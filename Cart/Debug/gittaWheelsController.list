
gittaWheelsController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e10  08009e10  00019e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08009e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000848  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200008d8  200008d8  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   000204dc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000044f7  00000000  00000000  0004059c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001940  00000000  00000000  00044a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001750  00000000  00000000  000463d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c893  00000000  00000000  00047b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000077fd  00000000  00000000  000543bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005bbb8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c78  00000000  00000000  0005bc34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009dd4 	.word	0x08009dd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009dd4 	.word	0x08009dd4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_ddiv>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000422:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000426:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800042a:	bf1d      	ittte	ne
 800042c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000430:	ea94 0f0c 	teqne	r4, ip
 8000434:	ea95 0f0c 	teqne	r5, ip
 8000438:	f000 f8a7 	bleq	800058a <__aeabi_ddiv+0x16e>
 800043c:	eba4 0405 	sub.w	r4, r4, r5
 8000440:	ea81 0e03 	eor.w	lr, r1, r3
 8000444:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f000 8088 	beq.w	8000560 <__aeabi_ddiv+0x144>
 8000450:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000454:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000458:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800045c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000460:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000464:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000468:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800046c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000470:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000474:	429d      	cmp	r5, r3
 8000476:	bf08      	it	eq
 8000478:	4296      	cmpeq	r6, r2
 800047a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800047e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000482:	d202      	bcs.n	800048a <__aeabi_ddiv+0x6e>
 8000484:	085b      	lsrs	r3, r3, #1
 8000486:	ea4f 0232 	mov.w	r2, r2, rrx
 800048a:	1ab6      	subs	r6, r6, r2
 800048c:	eb65 0503 	sbc.w	r5, r5, r3
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	ea4f 0232 	mov.w	r2, r2, rrx
 8000496:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800049a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800049e:	ebb6 0e02 	subs.w	lr, r6, r2
 80004a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004a6:	bf22      	ittt	cs
 80004a8:	1ab6      	subcs	r6, r6, r2
 80004aa:	4675      	movcs	r5, lr
 80004ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80004b0:	085b      	lsrs	r3, r3, #1
 80004b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004be:	bf22      	ittt	cs
 80004c0:	1ab6      	subcs	r6, r6, r2
 80004c2:	4675      	movcs	r5, lr
 80004c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80004ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80004d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004d6:	bf22      	ittt	cs
 80004d8:	1ab6      	subcs	r6, r6, r2
 80004da:	4675      	movcs	r5, lr
 80004dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80004e0:	085b      	lsrs	r3, r3, #1
 80004e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004ee:	bf22      	ittt	cs
 80004f0:	1ab6      	subcs	r6, r6, r2
 80004f2:	4675      	movcs	r5, lr
 80004f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80004f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80004fc:	d018      	beq.n	8000530 <__aeabi_ddiv+0x114>
 80004fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000502:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000506:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800050a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800050e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000512:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000516:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800051a:	d1c0      	bne.n	800049e <__aeabi_ddiv+0x82>
 800051c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000520:	d10b      	bne.n	800053a <__aeabi_ddiv+0x11e>
 8000522:	ea41 0100 	orr.w	r1, r1, r0
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800052e:	e7b6      	b.n	800049e <__aeabi_ddiv+0x82>
 8000530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000534:	bf04      	itt	eq
 8000536:	4301      	orreq	r1, r0
 8000538:	2000      	moveq	r0, #0
 800053a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800053e:	bf88      	it	hi
 8000540:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000544:	f63f aeaf 	bhi.w	80002a6 <__aeabi_dmul+0xde>
 8000548:	ebb5 0c03 	subs.w	ip, r5, r3
 800054c:	bf04      	itt	eq
 800054e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000564:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000568:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800056c:	bfc2      	ittt	gt
 800056e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000572:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000576:	bd70      	popgt	{r4, r5, r6, pc}
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f04f 0e00 	mov.w	lr, #0
 8000580:	3c01      	subs	r4, #1
 8000582:	e690      	b.n	80002a6 <__aeabi_dmul+0xde>
 8000584:	ea45 0e06 	orr.w	lr, r5, r6
 8000588:	e68d      	b.n	80002a6 <__aeabi_dmul+0xde>
 800058a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800058e:	ea94 0f0c 	teq	r4, ip
 8000592:	bf08      	it	eq
 8000594:	ea95 0f0c 	teqeq	r5, ip
 8000598:	f43f af3b 	beq.w	8000412 <__aeabi_dmul+0x24a>
 800059c:	ea94 0f0c 	teq	r4, ip
 80005a0:	d10a      	bne.n	80005b8 <__aeabi_ddiv+0x19c>
 80005a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a6:	f47f af34 	bne.w	8000412 <__aeabi_dmul+0x24a>
 80005aa:	ea95 0f0c 	teq	r5, ip
 80005ae:	f47f af25 	bne.w	80003fc <__aeabi_dmul+0x234>
 80005b2:	4610      	mov	r0, r2
 80005b4:	4619      	mov	r1, r3
 80005b6:	e72c      	b.n	8000412 <__aeabi_dmul+0x24a>
 80005b8:	ea95 0f0c 	teq	r5, ip
 80005bc:	d106      	bne.n	80005cc <__aeabi_ddiv+0x1b0>
 80005be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005c2:	f43f aefd 	beq.w	80003c0 <__aeabi_dmul+0x1f8>
 80005c6:	4610      	mov	r0, r2
 80005c8:	4619      	mov	r1, r3
 80005ca:	e722      	b.n	8000412 <__aeabi_dmul+0x24a>
 80005cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005d0:	bf18      	it	ne
 80005d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005d6:	f47f aec5 	bne.w	8000364 <__aeabi_dmul+0x19c>
 80005da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80005de:	f47f af0d 	bne.w	80003fc <__aeabi_dmul+0x234>
 80005e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80005e6:	f47f aeeb 	bne.w	80003c0 <__aeabi_dmul+0x1f8>
 80005ea:	e712      	b.n	8000412 <__aeabi_dmul+0x24a>

080005ec <__gedf2>:
 80005ec:	f04f 3cff 	mov.w	ip, #4294967295
 80005f0:	e006      	b.n	8000600 <__cmpdf2+0x4>
 80005f2:	bf00      	nop

080005f4 <__ledf2>:
 80005f4:	f04f 0c01 	mov.w	ip, #1
 80005f8:	e002      	b.n	8000600 <__cmpdf2+0x4>
 80005fa:	bf00      	nop

080005fc <__cmpdf2>:
 80005fc:	f04f 0c01 	mov.w	ip, #1
 8000600:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000604:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000610:	bf18      	it	ne
 8000612:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000616:	d01b      	beq.n	8000650 <__cmpdf2+0x54>
 8000618:	b001      	add	sp, #4
 800061a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061e:	bf0c      	ite	eq
 8000620:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000624:	ea91 0f03 	teqne	r1, r3
 8000628:	bf02      	ittt	eq
 800062a:	ea90 0f02 	teqeq	r0, r2
 800062e:	2000      	moveq	r0, #0
 8000630:	4770      	bxeq	lr
 8000632:	f110 0f00 	cmn.w	r0, #0
 8000636:	ea91 0f03 	teq	r1, r3
 800063a:	bf58      	it	pl
 800063c:	4299      	cmppl	r1, r3
 800063e:	bf08      	it	eq
 8000640:	4290      	cmpeq	r0, r2
 8000642:	bf2c      	ite	cs
 8000644:	17d8      	asrcs	r0, r3, #31
 8000646:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800064a:	f040 0001 	orr.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000658:	d102      	bne.n	8000660 <__cmpdf2+0x64>
 800065a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065e:	d107      	bne.n	8000670 <__cmpdf2+0x74>
 8000660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000668:	d1d6      	bne.n	8000618 <__cmpdf2+0x1c>
 800066a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066e:	d0d3      	beq.n	8000618 <__cmpdf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cdrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4610      	mov	r0, r2
 800067c:	4662      	mov	r2, ip
 800067e:	468c      	mov	ip, r1
 8000680:	4619      	mov	r1, r3
 8000682:	4663      	mov	r3, ip
 8000684:	e000      	b.n	8000688 <__aeabi_cdcmpeq>
 8000686:	bf00      	nop

08000688 <__aeabi_cdcmpeq>:
 8000688:	b501      	push	{r0, lr}
 800068a:	f7ff ffb7 	bl	80005fc <__cmpdf2>
 800068e:	2800      	cmp	r0, #0
 8000690:	bf48      	it	mi
 8000692:	f110 0f00 	cmnmi.w	r0, #0
 8000696:	bd01      	pop	{r0, pc}

08000698 <__aeabi_dcmpeq>:
 8000698:	f84d ed08 	str.w	lr, [sp, #-8]!
 800069c:	f7ff fff4 	bl	8000688 <__aeabi_cdcmpeq>
 80006a0:	bf0c      	ite	eq
 80006a2:	2001      	moveq	r0, #1
 80006a4:	2000      	movne	r0, #0
 80006a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006aa:	bf00      	nop

080006ac <__aeabi_dcmplt>:
 80006ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b0:	f7ff ffea 	bl	8000688 <__aeabi_cdcmpeq>
 80006b4:	bf34      	ite	cc
 80006b6:	2001      	movcc	r0, #1
 80006b8:	2000      	movcs	r0, #0
 80006ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80006be:	bf00      	nop

080006c0 <__aeabi_dcmple>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff ffe0 	bl	8000688 <__aeabi_cdcmpeq>
 80006c8:	bf94      	ite	ls
 80006ca:	2001      	movls	r0, #1
 80006cc:	2000      	movhi	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_dcmpge>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffce 	bl	8000678 <__aeabi_cdrcmple>
 80006dc:	bf94      	ite	ls
 80006de:	2001      	movls	r0, #1
 80006e0:	2000      	movhi	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmpgt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffc4 	bl	8000678 <__aeabi_cdrcmple>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_d2iz>:
 80006fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000700:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000704:	d215      	bcs.n	8000732 <__aeabi_d2iz+0x36>
 8000706:	d511      	bpl.n	800072c <__aeabi_d2iz+0x30>
 8000708:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800070c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000710:	d912      	bls.n	8000738 <__aeabi_d2iz+0x3c>
 8000712:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800071a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	fa23 f002 	lsr.w	r0, r3, r2
 8000726:	bf18      	it	ne
 8000728:	4240      	negne	r0, r0
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000736:	d105      	bne.n	8000744 <__aeabi_d2iz+0x48>
 8000738:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <__aeabi_uldivmod>:
 800074c:	b953      	cbnz	r3, 8000764 <__aeabi_uldivmod+0x18>
 800074e:	b94a      	cbnz	r2, 8000764 <__aeabi_uldivmod+0x18>
 8000750:	2900      	cmp	r1, #0
 8000752:	bf08      	it	eq
 8000754:	2800      	cmpeq	r0, #0
 8000756:	bf1c      	itt	ne
 8000758:	f04f 31ff 	movne.w	r1, #4294967295
 800075c:	f04f 30ff 	movne.w	r0, #4294967295
 8000760:	f000 b97a 	b.w	8000a58 <__aeabi_idiv0>
 8000764:	f1ad 0c08 	sub.w	ip, sp, #8
 8000768:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800076c:	f000 f806 	bl	800077c <__udivmoddi4>
 8000770:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr

0800077c <__udivmoddi4>:
 800077c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000780:	468c      	mov	ip, r1
 8000782:	460d      	mov	r5, r1
 8000784:	4604      	mov	r4, r0
 8000786:	9e08      	ldr	r6, [sp, #32]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d151      	bne.n	8000830 <__udivmoddi4+0xb4>
 800078c:	428a      	cmp	r2, r1
 800078e:	4617      	mov	r7, r2
 8000790:	d96d      	bls.n	800086e <__udivmoddi4+0xf2>
 8000792:	fab2 fe82 	clz	lr, r2
 8000796:	f1be 0f00 	cmp.w	lr, #0
 800079a:	d00b      	beq.n	80007b4 <__udivmoddi4+0x38>
 800079c:	f1ce 0c20 	rsb	ip, lr, #32
 80007a0:	fa01 f50e 	lsl.w	r5, r1, lr
 80007a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007a8:	fa02 f70e 	lsl.w	r7, r2, lr
 80007ac:	ea4c 0c05 	orr.w	ip, ip, r5
 80007b0:	fa00 f40e 	lsl.w	r4, r0, lr
 80007b4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80007b8:	0c25      	lsrs	r5, r4, #16
 80007ba:	fbbc f8fa 	udiv	r8, ip, sl
 80007be:	fa1f f987 	uxth.w	r9, r7
 80007c2:	fb0a cc18 	mls	ip, sl, r8, ip
 80007c6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80007ca:	fb08 f309 	mul.w	r3, r8, r9
 80007ce:	42ab      	cmp	r3, r5
 80007d0:	d90a      	bls.n	80007e8 <__udivmoddi4+0x6c>
 80007d2:	19ed      	adds	r5, r5, r7
 80007d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80007d8:	f080 8123 	bcs.w	8000a22 <__udivmoddi4+0x2a6>
 80007dc:	42ab      	cmp	r3, r5
 80007de:	f240 8120 	bls.w	8000a22 <__udivmoddi4+0x2a6>
 80007e2:	f1a8 0802 	sub.w	r8, r8, #2
 80007e6:	443d      	add	r5, r7
 80007e8:	1aed      	subs	r5, r5, r3
 80007ea:	b2a4      	uxth	r4, r4
 80007ec:	fbb5 f0fa 	udiv	r0, r5, sl
 80007f0:	fb0a 5510 	mls	r5, sl, r0, r5
 80007f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007f8:	fb00 f909 	mul.w	r9, r0, r9
 80007fc:	45a1      	cmp	r9, r4
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x98>
 8000800:	19e4      	adds	r4, r4, r7
 8000802:	f100 33ff 	add.w	r3, r0, #4294967295
 8000806:	f080 810a 	bcs.w	8000a1e <__udivmoddi4+0x2a2>
 800080a:	45a1      	cmp	r9, r4
 800080c:	f240 8107 	bls.w	8000a1e <__udivmoddi4+0x2a2>
 8000810:	3802      	subs	r0, #2
 8000812:	443c      	add	r4, r7
 8000814:	eba4 0409 	sub.w	r4, r4, r9
 8000818:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800081c:	2100      	movs	r1, #0
 800081e:	2e00      	cmp	r6, #0
 8000820:	d061      	beq.n	80008e6 <__udivmoddi4+0x16a>
 8000822:	fa24 f40e 	lsr.w	r4, r4, lr
 8000826:	2300      	movs	r3, #0
 8000828:	6034      	str	r4, [r6, #0]
 800082a:	6073      	str	r3, [r6, #4]
 800082c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000830:	428b      	cmp	r3, r1
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0xc8>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d054      	beq.n	80008e2 <__udivmoddi4+0x166>
 8000838:	2100      	movs	r1, #0
 800083a:	e886 0021 	stmia.w	r6, {r0, r5}
 800083e:	4608      	mov	r0, r1
 8000840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000844:	fab3 f183 	clz	r1, r3
 8000848:	2900      	cmp	r1, #0
 800084a:	f040 808e 	bne.w	800096a <__udivmoddi4+0x1ee>
 800084e:	42ab      	cmp	r3, r5
 8000850:	d302      	bcc.n	8000858 <__udivmoddi4+0xdc>
 8000852:	4282      	cmp	r2, r0
 8000854:	f200 80fa 	bhi.w	8000a4c <__udivmoddi4+0x2d0>
 8000858:	1a84      	subs	r4, r0, r2
 800085a:	eb65 0503 	sbc.w	r5, r5, r3
 800085e:	2001      	movs	r0, #1
 8000860:	46ac      	mov	ip, r5
 8000862:	2e00      	cmp	r6, #0
 8000864:	d03f      	beq.n	80008e6 <__udivmoddi4+0x16a>
 8000866:	e886 1010 	stmia.w	r6, {r4, ip}
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b912      	cbnz	r2, 8000876 <__udivmoddi4+0xfa>
 8000870:	2701      	movs	r7, #1
 8000872:	fbb7 f7f2 	udiv	r7, r7, r2
 8000876:	fab7 fe87 	clz	lr, r7
 800087a:	f1be 0f00 	cmp.w	lr, #0
 800087e:	d134      	bne.n	80008ea <__udivmoddi4+0x16e>
 8000880:	1beb      	subs	r3, r5, r7
 8000882:	0c3a      	lsrs	r2, r7, #16
 8000884:	fa1f fc87 	uxth.w	ip, r7
 8000888:	2101      	movs	r1, #1
 800088a:	fbb3 f8f2 	udiv	r8, r3, r2
 800088e:	0c25      	lsrs	r5, r4, #16
 8000890:	fb02 3318 	mls	r3, r2, r8, r3
 8000894:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000898:	fb0c f308 	mul.w	r3, ip, r8
 800089c:	42ab      	cmp	r3, r5
 800089e:	d907      	bls.n	80008b0 <__udivmoddi4+0x134>
 80008a0:	19ed      	adds	r5, r5, r7
 80008a2:	f108 30ff 	add.w	r0, r8, #4294967295
 80008a6:	d202      	bcs.n	80008ae <__udivmoddi4+0x132>
 80008a8:	42ab      	cmp	r3, r5
 80008aa:	f200 80d1 	bhi.w	8000a50 <__udivmoddi4+0x2d4>
 80008ae:	4680      	mov	r8, r0
 80008b0:	1aed      	subs	r5, r5, r3
 80008b2:	b2a3      	uxth	r3, r4
 80008b4:	fbb5 f0f2 	udiv	r0, r5, r2
 80008b8:	fb02 5510 	mls	r5, r2, r0, r5
 80008bc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80008c0:	fb0c fc00 	mul.w	ip, ip, r0
 80008c4:	45a4      	cmp	ip, r4
 80008c6:	d907      	bls.n	80008d8 <__udivmoddi4+0x15c>
 80008c8:	19e4      	adds	r4, r4, r7
 80008ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ce:	d202      	bcs.n	80008d6 <__udivmoddi4+0x15a>
 80008d0:	45a4      	cmp	ip, r4
 80008d2:	f200 80b8 	bhi.w	8000a46 <__udivmoddi4+0x2ca>
 80008d6:	4618      	mov	r0, r3
 80008d8:	eba4 040c 	sub.w	r4, r4, ip
 80008dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008e0:	e79d      	b.n	800081e <__udivmoddi4+0xa2>
 80008e2:	4631      	mov	r1, r6
 80008e4:	4630      	mov	r0, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	f1ce 0420 	rsb	r4, lr, #32
 80008ee:	fa05 f30e 	lsl.w	r3, r5, lr
 80008f2:	fa07 f70e 	lsl.w	r7, r7, lr
 80008f6:	fa20 f804 	lsr.w	r8, r0, r4
 80008fa:	0c3a      	lsrs	r2, r7, #16
 80008fc:	fa25 f404 	lsr.w	r4, r5, r4
 8000900:	ea48 0803 	orr.w	r8, r8, r3
 8000904:	fbb4 f1f2 	udiv	r1, r4, r2
 8000908:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800090c:	fb02 4411 	mls	r4, r2, r1, r4
 8000910:	fa1f fc87 	uxth.w	ip, r7
 8000914:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000918:	fb01 f30c 	mul.w	r3, r1, ip
 800091c:	42ab      	cmp	r3, r5
 800091e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x1bc>
 8000924:	19ed      	adds	r5, r5, r7
 8000926:	f101 30ff 	add.w	r0, r1, #4294967295
 800092a:	f080 808a 	bcs.w	8000a42 <__udivmoddi4+0x2c6>
 800092e:	42ab      	cmp	r3, r5
 8000930:	f240 8087 	bls.w	8000a42 <__udivmoddi4+0x2c6>
 8000934:	3902      	subs	r1, #2
 8000936:	443d      	add	r5, r7
 8000938:	1aeb      	subs	r3, r5, r3
 800093a:	fa1f f588 	uxth.w	r5, r8
 800093e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000942:	fb02 3310 	mls	r3, r2, r0, r3
 8000946:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800094a:	fb00 f30c 	mul.w	r3, r0, ip
 800094e:	42ab      	cmp	r3, r5
 8000950:	d907      	bls.n	8000962 <__udivmoddi4+0x1e6>
 8000952:	19ed      	adds	r5, r5, r7
 8000954:	f100 38ff 	add.w	r8, r0, #4294967295
 8000958:	d26f      	bcs.n	8000a3a <__udivmoddi4+0x2be>
 800095a:	42ab      	cmp	r3, r5
 800095c:	d96d      	bls.n	8000a3a <__udivmoddi4+0x2be>
 800095e:	3802      	subs	r0, #2
 8000960:	443d      	add	r5, r7
 8000962:	1aeb      	subs	r3, r5, r3
 8000964:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000968:	e78f      	b.n	800088a <__udivmoddi4+0x10e>
 800096a:	f1c1 0720 	rsb	r7, r1, #32
 800096e:	fa22 f807 	lsr.w	r8, r2, r7
 8000972:	408b      	lsls	r3, r1
 8000974:	fa05 f401 	lsl.w	r4, r5, r1
 8000978:	ea48 0303 	orr.w	r3, r8, r3
 800097c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000980:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000984:	40fd      	lsrs	r5, r7
 8000986:	ea4e 0e04 	orr.w	lr, lr, r4
 800098a:	fbb5 f9fc 	udiv	r9, r5, ip
 800098e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000992:	fb0c 5519 	mls	r5, ip, r9, r5
 8000996:	fa1f f883 	uxth.w	r8, r3
 800099a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800099e:	fb09 f408 	mul.w	r4, r9, r8
 80009a2:	42ac      	cmp	r4, r5
 80009a4:	fa02 f201 	lsl.w	r2, r2, r1
 80009a8:	fa00 fa01 	lsl.w	sl, r0, r1
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x244>
 80009ae:	18ed      	adds	r5, r5, r3
 80009b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80009b4:	d243      	bcs.n	8000a3e <__udivmoddi4+0x2c2>
 80009b6:	42ac      	cmp	r4, r5
 80009b8:	d941      	bls.n	8000a3e <__udivmoddi4+0x2c2>
 80009ba:	f1a9 0902 	sub.w	r9, r9, #2
 80009be:	441d      	add	r5, r3
 80009c0:	1b2d      	subs	r5, r5, r4
 80009c2:	fa1f fe8e 	uxth.w	lr, lr
 80009c6:	fbb5 f0fc 	udiv	r0, r5, ip
 80009ca:	fb0c 5510 	mls	r5, ip, r0, r5
 80009ce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80009d2:	fb00 f808 	mul.w	r8, r0, r8
 80009d6:	45a0      	cmp	r8, r4
 80009d8:	d907      	bls.n	80009ea <__udivmoddi4+0x26e>
 80009da:	18e4      	adds	r4, r4, r3
 80009dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80009e0:	d229      	bcs.n	8000a36 <__udivmoddi4+0x2ba>
 80009e2:	45a0      	cmp	r8, r4
 80009e4:	d927      	bls.n	8000a36 <__udivmoddi4+0x2ba>
 80009e6:	3802      	subs	r0, #2
 80009e8:	441c      	add	r4, r3
 80009ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009ee:	eba4 0408 	sub.w	r4, r4, r8
 80009f2:	fba0 8902 	umull	r8, r9, r0, r2
 80009f6:	454c      	cmp	r4, r9
 80009f8:	46c6      	mov	lr, r8
 80009fa:	464d      	mov	r5, r9
 80009fc:	d315      	bcc.n	8000a2a <__udivmoddi4+0x2ae>
 80009fe:	d012      	beq.n	8000a26 <__udivmoddi4+0x2aa>
 8000a00:	b156      	cbz	r6, 8000a18 <__udivmoddi4+0x29c>
 8000a02:	ebba 030e 	subs.w	r3, sl, lr
 8000a06:	eb64 0405 	sbc.w	r4, r4, r5
 8000a0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a0e:	40cb      	lsrs	r3, r1
 8000a10:	431f      	orrs	r7, r3
 8000a12:	40cc      	lsrs	r4, r1
 8000a14:	6037      	str	r7, [r6, #0]
 8000a16:	6074      	str	r4, [r6, #4]
 8000a18:	2100      	movs	r1, #0
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	e6f8      	b.n	8000814 <__udivmoddi4+0x98>
 8000a22:	4690      	mov	r8, r2
 8000a24:	e6e0      	b.n	80007e8 <__udivmoddi4+0x6c>
 8000a26:	45c2      	cmp	sl, r8
 8000a28:	d2ea      	bcs.n	8000a00 <__udivmoddi4+0x284>
 8000a2a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a2e:	eb69 0503 	sbc.w	r5, r9, r3
 8000a32:	3801      	subs	r0, #1
 8000a34:	e7e4      	b.n	8000a00 <__udivmoddi4+0x284>
 8000a36:	4628      	mov	r0, r5
 8000a38:	e7d7      	b.n	80009ea <__udivmoddi4+0x26e>
 8000a3a:	4640      	mov	r0, r8
 8000a3c:	e791      	b.n	8000962 <__udivmoddi4+0x1e6>
 8000a3e:	4681      	mov	r9, r0
 8000a40:	e7be      	b.n	80009c0 <__udivmoddi4+0x244>
 8000a42:	4601      	mov	r1, r0
 8000a44:	e778      	b.n	8000938 <__udivmoddi4+0x1bc>
 8000a46:	3802      	subs	r0, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	e745      	b.n	80008d8 <__udivmoddi4+0x15c>
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	e708      	b.n	8000862 <__udivmoddi4+0xe6>
 8000a50:	f1a8 0802 	sub.w	r8, r8, #2
 8000a54:	443d      	add	r5, r7
 8000a56:	e72b      	b.n	80008b0 <__udivmoddi4+0x134>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	4a71      	ldr	r2, [pc, #452]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000a78:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b6e      	ldr	r3, [pc, #440]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	4a6a      	ldr	r2, [pc, #424]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000a94:	4b69      	ldr	r3, [pc, #420]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4a63      	ldr	r2, [pc, #396]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000ab0:	4b62      	ldr	r3, [pc, #392]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4a5c      	ldr	r2, [pc, #368]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000acc:	4b5b      	ldr	r3, [pc, #364]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4a55      	ldr	r2, [pc, #340]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000ae8:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4a4e      	ldr	r2, [pc, #312]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000b04:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	4848      	ldr	r0, [pc, #288]	; (8000c40 <MX_GPIO_Init+0x1e4>)
 8000b20:	f001 fab8 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2101      	movs	r1, #1
 8000b28:	4846      	ldr	r0, [pc, #280]	; (8000c44 <MX_GPIO_Init+0x1e8>)
 8000b2a:	f001 fab3 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000b34:	4844      	ldr	r0, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x1ec>)
 8000b36:	f001 faad 	bl	8002094 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	483b      	ldr	r0, [pc, #236]	; (8000c40 <MX_GPIO_Init+0x1e4>)
 8000b52:	f001 f905 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4835      	ldr	r0, [pc, #212]	; (8000c44 <MX_GPIO_Init+0x1e8>)
 8000b6e:	f001 f8f7 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b82:	2305      	movs	r3, #5
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	482d      	ldr	r0, [pc, #180]	; (8000c44 <MX_GPIO_Init+0x1e8>)
 8000b8e:	f001 f8e7 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x1f0>)
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482a      	ldr	r0, [pc, #168]	; (8000c50 <MX_GPIO_Init+0x1f4>)
 8000ba6:	f001 f8db 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000baa:	2304      	movs	r3, #4
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4825      	ldr	r0, [pc, #148]	; (8000c54 <MX_GPIO_Init+0x1f8>)
 8000bbe:	f001 f8cf 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481d      	ldr	r0, [pc, #116]	; (8000c54 <MX_GPIO_Init+0x1f8>)
 8000be0:	f001 f8be 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000be4:	f64f 7310 	movw	r3, #65296	; 0xff10
 8000be8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <MX_GPIO_Init+0x1ec>)
 8000bfe:	f001 f8af 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c02:	2320      	movs	r3, #32
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x1ec>)
 8000c16:	f001 f8a3 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_GPIO_Init+0x1f0>)
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_GPIO_Init+0x1e4>)
 8000c2e:	f001 f897 	bl	8001d60 <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	10120000 	.word	0x10120000
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <MX_I2C1_Init+0x54>)
 8000c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x58>)
 8000c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c96:	f002 ff1d 	bl	8003ad4 <HAL_I2C_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca0:	f000 fc00 	bl	80014a4 <Error_Handler>
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000c0 	.word	0x200000c0
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	000186a0 	.word	0x000186a0

08000cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12c      	bne.n	8000d30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d04:	2304      	movs	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0x8c>)
 8000d10:	f001 f826 	bl	8001d60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400

08000d44 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <MX_I2S3_Init+0x58>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d54:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <MX_I2S3_Init+0x5c>)
 8000d6e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d84:	f002 ffde 	bl	8003d44 <HAL_I2S_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d8e:	f000 fb89 	bl	80014a4 <Error_Handler>
  }

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000114 	.word	0x20000114
 8000d9c:	40003c00 	.word	0x40003c00
 8000da0:	00017700 	.word	0x00017700

08000da4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <HAL_I2S_MspInit+0xc0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d14a      	bne.n	8000e5c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_I2S_MspInit+0xc4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <HAL_I2S_MspInit+0xc8>)
 8000e36:	f000 ff93 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e3a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <HAL_I2S_MspInit+0xcc>)
 8000e58:	f000 ff82 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40003c00 	.word	0x40003c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020800 	.word	0x40020800

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000e7a:	f000 fdcd 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */
  union {
  	  double v;
  	  uint8_t bytes[sizeof(double)];
  } v[4];
  int cnt = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t byte;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f8a1 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f7ff fde9 	bl	8000a5c <MX_GPIO_Init>

  MX_I2C1_Init();
 8000e8a:	f7ff fee5 	bl	8000c58 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e8e:	f7ff ff59 	bl	8000d44 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e92:	f000 fb0f 	bl	80014b4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e96:	f000 fc2d 	bl	80016f4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000e9a:	f000 fd4b 	bl	8001934 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000e9e:	f008 fb67 	bl	8009570 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4845      	ldr	r0, [pc, #276]	; (8000fbc <main+0x148>)
 8000ea6:	f004 fa4f 	bl	8005348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x148>)
 8000eae:	f004 fa4b 	bl	8005348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	4841      	ldr	r0, [pc, #260]	; (8000fbc <main+0x148>)
 8000eb6:	f004 fa47 	bl	8005348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000eba:	210c      	movs	r1, #12
 8000ebc:	483f      	ldr	r0, [pc, #252]	; (8000fbc <main+0x148>)
 8000ebe:	f004 fa43 	bl	8005348 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	483d      	ldr	r0, [pc, #244]	; (8000fc0 <main+0x14c>)
 8000eca:	f001 f8e3 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	483a      	ldr	r0, [pc, #232]	; (8000fc0 <main+0x14c>)
 8000ed6:	f001 f8dd 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	4837      	ldr	r0, [pc, #220]	; (8000fc0 <main+0x14c>)
 8000ee2:	f001 f8d7 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eec:	4834      	ldr	r0, [pc, #208]	; (8000fc0 <main+0x14c>)
 8000eee:	f001 f8d1 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4831      	ldr	r0, [pc, #196]	; (8000fc0 <main+0x14c>)
 8000efa:	f001 f8cb 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <main+0x14c>)
 8000f06:	f001 f8c5 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f10:	482b      	ldr	r0, [pc, #172]	; (8000fc0 <main+0x14c>)
 8000f12:	f001 f8bf 	bl	8002094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1c:	4828      	ldr	r0, [pc, #160]	; (8000fc0 <main+0x14c>)
 8000f1e:	f001 f8b9 	bl	8002094 <HAL_GPIO_WritePin>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f22:	f008 fb4b 	bl	80095bc <MX_USB_HOST_Process>

   /* USER CODE BEGIN 3 */
    cnt = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		if (HAL_UART_Receive(&huart2, &byte, 1, 100) == HAL_OK)
 8000f2a:	1df9      	adds	r1, r7, #7
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4824      	ldr	r0, [pc, #144]	; (8000fc4 <main+0x150>)
 8000f32:	f005 f888 	bl	8006046 <HAL_UART_Receive>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f6      	bne.n	8000f2a <main+0xb6>
		{
			v[(int)(cnt/8)].bytes[cnt%8] = byte;
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <main+0xd0>
 8000f42:	3307      	adds	r3, #7
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	4618      	mov	r0, r3
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	425a      	negs	r2, r3
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	f002 0207 	and.w	r2, r2, #7
 8000f54:	bf58      	it	pl
 8000f56:	4253      	negpl	r3, r2
 8000f58:	79f9      	ldrb	r1, [r7, #7]
 8000f5a:	00c2      	lsls	r2, r0, #3
 8000f5c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000f60:	4402      	add	r2, r0
 8000f62:	4413      	add	r3, r2
 8000f64:	3b28      	subs	r3, #40	; 0x28
 8000f66:	460a      	mov	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
			cnt++;
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_UART_Transmit(&huart2, &byte, 1, 100);
 8000f70:	1df9      	adds	r1, r7, #7
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	2201      	movs	r2, #1
 8000f76:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <main+0x150>)
 8000f78:	f004 ffcd 	bl	8005f16 <HAL_UART_Transmit>
			if(cnt>=32)
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	2b1f      	cmp	r3, #31
 8000f80:	ddd3      	ble.n	8000f2a <main+0xb6>
			{
				cnt = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
				//motor control
				motorControl(v[0].v, v[1].v, v[2].v, v[3].v);
 8000f86:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f8a:	ed97 6b04 	vldr	d6, [r7, #16]
 8000f8e:	ed97 5b06 	vldr	d5, [r7, #24]
 8000f92:	ed97 4b08 	vldr	d4, [r7, #32]
 8000f96:	eeb0 3a44 	vmov.f32	s6, s8
 8000f9a:	eef0 3a64 	vmov.f32	s7, s9
 8000f9e:	eeb0 2a45 	vmov.f32	s4, s10
 8000fa2:	eef0 2a65 	vmov.f32	s5, s11
 8000fa6:	eeb0 1a46 	vmov.f32	s2, s12
 8000faa:	eef0 1a66 	vmov.f32	s3, s13
 8000fae:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb2:	eef0 0a67 	vmov.f32	s1, s15
 8000fb6:	f000 f939 	bl	800122c <motorControl>
		if (HAL_UART_Receive(&huart2, &byte, 1, 100) == HAL_OK)
 8000fba:	e7b6      	b.n	8000f2a <main+0xb6>
 8000fbc:	200001b4 	.word	0x200001b4
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	200001f4 	.word	0x200001f4

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	; 0x60
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	2230      	movs	r2, #48	; 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fe36 	bl	8009c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <SystemClock_Config+0xfc>)
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <SystemClock_Config+0xfc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <SystemClock_Config+0xfc>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <SystemClock_Config+0x100>)
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <SystemClock_Config+0x100>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <SystemClock_Config+0x100>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001046:	2308      	movs	r3, #8
 8001048:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800104a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800104e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001054:	2307      	movs	r3, #7
 8001056:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fb0f 	bl	8004680 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001068:	f000 fa1c 	bl	80014a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 800106c:	230f      	movs	r3, #15
 800106e:	61fb      	str	r3, [r7, #28]
		  RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001078:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2105      	movs	r1, #5
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fd68 	bl	8004b60 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001096:	f000 fa05 	bl	80014a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 ff4a 	bl	8004f44 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80010b6:	f000 f9f5 	bl	80014a4 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3760      	adds	r7, #96	; 0x60
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <controlRotateDirection>:

/* USER CODE BEGIN 4 */
void controlRotateDirection(int motorNum, double vel)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	ed87 0b00 	vstr	d0, [r7]
	switch(motorNum)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	f200 80a0 	bhi.w	8001220 <controlRotateDirection+0x154>
 80010e0:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <controlRotateDirection+0x1c>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	080010f9 	.word	0x080010f9
 80010ec:	08001143 	.word	0x08001143
 80010f0:	0800118d 	.word	0x0800118d
 80010f4:	080011d7 	.word	0x080011d7
	{
	case 0:
		if(vel > 0.0){
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff faf0 	bl	80006e8 <__aeabi_dcmpgt>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00c      	beq.n	8001128 <controlRotateDirection+0x5c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	4844      	ldr	r0, [pc, #272]	; (8001228 <controlRotateDirection+0x15c>)
 8001116:	f000 ffbd 	bl	8002094 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	4841      	ldr	r0, [pc, #260]	; (8001228 <controlRotateDirection+0x15c>)
 8001122:	f000 ffb7 	bl	8002094 <HAL_GPIO_WritePin>
		}
		else{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
		}
		break;
 8001126:	e07b      	b.n	8001220 <controlRotateDirection+0x154>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112e:	483e      	ldr	r0, [pc, #248]	; (8001228 <controlRotateDirection+0x15c>)
 8001130:	f000 ffb0 	bl	8002094 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	483b      	ldr	r0, [pc, #236]	; (8001228 <controlRotateDirection+0x15c>)
 800113c:	f000 ffaa 	bl	8002094 <HAL_GPIO_WritePin>
		break;
 8001140:	e06e      	b.n	8001220 <controlRotateDirection+0x154>
	case 1:
			if(vel > 0.0){
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800114e:	f7ff facb 	bl	80006e8 <__aeabi_dcmpgt>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <controlRotateDirection+0xa6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4832      	ldr	r0, [pc, #200]	; (8001228 <controlRotateDirection+0x15c>)
 8001160:	f000 ff98 	bl	8002094 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116a:	482f      	ldr	r0, [pc, #188]	; (8001228 <controlRotateDirection+0x15c>)
 800116c:	f000 ff92 	bl	8002094 <HAL_GPIO_WritePin>
			}
			else{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
			}
			break;
 8001170:	e056      	b.n	8001220 <controlRotateDirection+0x154>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001178:	482b      	ldr	r0, [pc, #172]	; (8001228 <controlRotateDirection+0x15c>)
 800117a:	f000 ff8b 	bl	8002094 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001184:	4828      	ldr	r0, [pc, #160]	; (8001228 <controlRotateDirection+0x15c>)
 8001186:	f000 ff85 	bl	8002094 <HAL_GPIO_WritePin>
			break;
 800118a:	e049      	b.n	8001220 <controlRotateDirection+0x154>
	case 2:
			if(vel > 0.0){
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001198:	f7ff faa6 	bl	80006e8 <__aeabi_dcmpgt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00c      	beq.n	80011bc <controlRotateDirection+0xf0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	481f      	ldr	r0, [pc, #124]	; (8001228 <controlRotateDirection+0x15c>)
 80011aa:	f000 ff73 	bl	8002094 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b4:	481c      	ldr	r0, [pc, #112]	; (8001228 <controlRotateDirection+0x15c>)
 80011b6:	f000 ff6d 	bl	8002094 <HAL_GPIO_WritePin>
			}
			else{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
			}
			break;
 80011ba:	e031      	b.n	8001220 <controlRotateDirection+0x154>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	4819      	ldr	r0, [pc, #100]	; (8001228 <controlRotateDirection+0x15c>)
 80011c4:	f000 ff66 	bl	8002094 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	4816      	ldr	r0, [pc, #88]	; (8001228 <controlRotateDirection+0x15c>)
 80011d0:	f000 ff60 	bl	8002094 <HAL_GPIO_WritePin>
			break;
 80011d4:	e024      	b.n	8001220 <controlRotateDirection+0x154>

	case 3:
			if(vel > 0.0){
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e2:	f7ff fa81 	bl	80006e8 <__aeabi_dcmpgt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00c      	beq.n	8001206 <controlRotateDirection+0x13a>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f2:	480d      	ldr	r0, [pc, #52]	; (8001228 <controlRotateDirection+0x15c>)
 80011f4:	f000 ff4e 	bl	8002094 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <controlRotateDirection+0x15c>)
 8001200:	f000 ff48 	bl	8002094 <HAL_GPIO_WritePin>
			}
			else{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
			}
			break;
 8001204:	e00b      	b.n	800121e <controlRotateDirection+0x152>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <controlRotateDirection+0x15c>)
 800120e:	f000 ff41 	bl	8002094 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <controlRotateDirection+0x15c>)
 800121a:	f000 ff3b 	bl	8002094 <HAL_GPIO_WritePin>
			break;
 800121e:	bf00      	nop
	}
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020c00 	.word	0x40020c00

0800122c <motorControl>:

void motorControl(double vel1, double vel2, double vel3, double vel4)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b08d      	sub	sp, #52	; 0x34
 8001230:	af00      	add	r7, sp, #0
 8001232:	ed87 0b06 	vstr	d0, [r7, #24]
 8001236:	ed87 1b04 	vstr	d1, [r7, #16]
 800123a:	ed87 2b02 	vstr	d2, [r7, #8]
 800123e:	ed87 3b00 	vstr	d3, [r7]
	//double abs1 = abs(vel1) > abs(vel2) ? abs(vel1) : abs(vel2);
	//double abs2 = abs(vel3) > abs(vel4) ? abs(vel3) : abs(vel4);
	//double abs_max = abs1 > abs2 ? abs1 : abs2;
	if(vel1 == 0.0)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124e:	f7ff fa23 	bl	8000698 <__aeabi_dcmpeq>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <motorControl+0x46>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125e:	488d      	ldr	r0, [pc, #564]	; (8001494 <motorControl+0x268>)
 8001260:	f000 ff18 	bl	8002094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126a:	488a      	ldr	r0, [pc, #552]	; (8001494 <motorControl+0x268>)
 800126c:	f000 ff12 	bl	8002094 <HAL_GPIO_WritePin>
 8001270:	e030      	b.n	80012d4 <motorControl+0xa8>
	}
	else{
		controlRotateDirection(0, vel1);
 8001272:	ed97 0b06 	vldr	d0, [r7, #24]
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ff28 	bl	80010cc <controlRotateDirection>
		if(vel1 <0.0){
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001288:	f7ff fa10 	bl	80006ac <__aeabi_dcmplt>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <motorControl+0x72>
			vel1 = vel1* -1;
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800129c:	61fb      	str	r3, [r7, #28]
		}
		int pwm = (vel1 / 8.0) * 500.0;
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <motorControl+0x26c>)
 80012a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012a8:	f7ff f8b8 	bl	800041c <__aeabi_ddiv>
 80012ac:	4603      	mov	r3, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	4618      	mov	r0, r3
 80012b2:	4621      	mov	r1, r4
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b78      	ldr	r3, [pc, #480]	; (800149c <motorControl+0x270>)
 80012ba:	f7fe ff85 	bl	80001c8 <__aeabi_dmul>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	4618      	mov	r0, r3
 80012c4:	4621      	mov	r1, r4
 80012c6:	f7ff fa19 	bl	80006fc <__aeabi_d2iz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		TIM1->CCR1 = pwm;
 80012ce:	4a74      	ldr	r2, [pc, #464]	; (80014a0 <motorControl+0x274>)
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	6353      	str	r3, [r2, #52]	; 0x34
	}
	if(vel2 == 0.0)
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e0:	f7ff f9da 	bl	8000698 <__aeabi_dcmpeq>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <motorControl+0xd8>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f0:	4868      	ldr	r0, [pc, #416]	; (8001494 <motorControl+0x268>)
 80012f2:	f000 fecf 	bl	8002094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4865      	ldr	r0, [pc, #404]	; (8001494 <motorControl+0x268>)
 80012fe:	f000 fec9 	bl	8002094 <HAL_GPIO_WritePin>
 8001302:	e030      	b.n	8001366 <motorControl+0x13a>
	}
	else{
		controlRotateDirection(1, vel2);
 8001304:	ed97 0b04 	vldr	d0, [r7, #16]
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fedf 	bl	80010cc <controlRotateDirection>
		if(vel2<0.0){
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800131a:	f7ff f9c7 	bl	80006ac <__aeabi_dcmplt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <motorControl+0x104>
			vel2 = vel2* -1;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800132e:	617b      	str	r3, [r7, #20]
		}
		int pwm = (vel2 / 8.0) * 500.0;
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b58      	ldr	r3, [pc, #352]	; (8001498 <motorControl+0x26c>)
 8001336:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800133a:	f7ff f86f 	bl	800041c <__aeabi_ddiv>
 800133e:	4603      	mov	r3, r0
 8001340:	460c      	mov	r4, r1
 8001342:	4618      	mov	r0, r3
 8001344:	4621      	mov	r1, r4
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b54      	ldr	r3, [pc, #336]	; (800149c <motorControl+0x270>)
 800134c:	f7fe ff3c 	bl	80001c8 <__aeabi_dmul>
 8001350:	4603      	mov	r3, r0
 8001352:	460c      	mov	r4, r1
 8001354:	4618      	mov	r0, r3
 8001356:	4621      	mov	r1, r4
 8001358:	f7ff f9d0 	bl	80006fc <__aeabi_d2iz>
 800135c:	4603      	mov	r3, r0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
		TIM1->CCR2 = pwm;
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <motorControl+0x274>)
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if(vel3 == 0.0)
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001372:	f7ff f991 	bl	8000698 <__aeabi_dcmpeq>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <motorControl+0x16a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001382:	4844      	ldr	r0, [pc, #272]	; (8001494 <motorControl+0x268>)
 8001384:	f000 fe86 	bl	8002094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138e:	4841      	ldr	r0, [pc, #260]	; (8001494 <motorControl+0x268>)
 8001390:	f000 fe80 	bl	8002094 <HAL_GPIO_WritePin>
 8001394:	e030      	b.n	80013f8 <motorControl+0x1cc>
	}
	else{
		controlRotateDirection(2, vel3);
 8001396:	ed97 0b02 	vldr	d0, [r7, #8]
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff fe96 	bl	80010cc <controlRotateDirection>
		if(vel3<0.0){
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ac:	f7ff f97e 	bl	80006ac <__aeabi_dcmplt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <motorControl+0x196>
			vel3 = vel3 * -1;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013c0:	60fb      	str	r3, [r7, #12]
		}
		int pwm = (vel3 / 8.0) * 500.0;
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <motorControl+0x26c>)
 80013c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013cc:	f7ff f826 	bl	800041c <__aeabi_ddiv>
 80013d0:	4603      	mov	r3, r0
 80013d2:	460c      	mov	r4, r1
 80013d4:	4618      	mov	r0, r3
 80013d6:	4621      	mov	r1, r4
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <motorControl+0x270>)
 80013de:	f7fe fef3 	bl	80001c8 <__aeabi_dmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	4618      	mov	r0, r3
 80013e8:	4621      	mov	r1, r4
 80013ea:	f7ff f987 	bl	80006fc <__aeabi_d2iz>
 80013ee:	4603      	mov	r3, r0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
		TIM1->CCR3 = pwm;
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <motorControl+0x274>)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	if(vel4 == 0.0)
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001404:	f7ff f948 	bl	8000698 <__aeabi_dcmpeq>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00c      	beq.n	8001428 <motorControl+0x1fc>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001414:	481f      	ldr	r0, [pc, #124]	; (8001494 <motorControl+0x268>)
 8001416:	f000 fe3d 	bl	8002094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <motorControl+0x268>)
 8001422:	f000 fe37 	bl	8002094 <HAL_GPIO_WritePin>
			vel4 =vel4 * -1;
		}
		int pwm = (vel4 / 8.0) * 500.0;
		TIM1->CCR4 = pwm;
	}
}
 8001426:	e030      	b.n	800148a <motorControl+0x25e>
		controlRotateDirection(3, vel4);
 8001428:	ed97 0b00 	vldr	d0, [r7]
 800142c:	2003      	movs	r0, #3
 800142e:	f7ff fe4d 	bl	80010cc <controlRotateDirection>
		if(vel4<0.0){
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800143e:	f7ff f935 	bl	80006ac <__aeabi_dcmplt>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <motorControl+0x228>
			vel4 =vel4 * -1;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001452:	607b      	str	r3, [r7, #4]
		int pwm = (vel4 / 8.0) * 500.0;
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <motorControl+0x26c>)
 800145a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800145e:	f7fe ffdd 	bl	800041c <__aeabi_ddiv>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <motorControl+0x270>)
 8001470:	f7fe feaa 	bl	80001c8 <__aeabi_dmul>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4618      	mov	r0, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f7ff f93e 	bl	80006fc <__aeabi_d2iz>
 8001480:	4603      	mov	r3, r0
 8001482:	623b      	str	r3, [r7, #32]
		TIM1->CCR4 = pwm;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <motorControl+0x274>)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
}
 800148a:	bf00      	nop
 800148c:	3734      	adds	r7, #52	; 0x34
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40200000 	.word	0x40200000
 800149c:	407f4000 	.word	0x407f4000
 80014a0:	40010000 	.word	0x40010000

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_SPI1_Init+0x64>)
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <MX_SPI1_Init+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_SPI1_Init+0x64>)
 80014c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_SPI1_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_SPI1_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_SPI1_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_SPI1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_SPI1_Init+0x64>)
 80014e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_SPI1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_SPI1_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_SPI1_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_SPI1_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_SPI1_Init+0x64>)
 8001500:	220a      	movs	r2, #10
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_SPI1_Init+0x64>)
 8001506:	f003 fe5b 	bl	80051c0 <HAL_SPI_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001510:	f7ff ffc8 	bl	80014a4 <Error_Handler>
  }

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000015c 	.word	0x2000015c
 800151c:	40013000 	.word	0x40013000

08001520 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_SPI_MspInit+0x84>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12b      	bne.n	800159a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800157a:	23e0      	movs	r3, #224	; 0xe0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158a:	2305      	movs	r3, #5
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_SPI_MspInit+0x8c>)
 8001596:	f000 fbe3 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40013000 	.word	0x40013000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ee:	2007      	movs	r0, #7
 80015f0:	f000 fb74 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 fa32 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f000 ffbf 	bl	80025e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000610 	.word	0x20000610

08001670 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x50>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x16>
		heap_end = &end;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <_sbrk+0x50>)
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <_sbrk+0x54>)
 8001684:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <_sbrk+0x50>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <_sbrk+0x50>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	466a      	mov	r2, sp
 8001696:	4293      	cmp	r3, r2
 8001698:	d907      	bls.n	80016aa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800169a:	f008 fa9b 	bl	8009bd4 <__errno>
 800169e:	4602      	mov	r2, r0
 80016a0:	230c      	movs	r3, #12
 80016a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	e006      	b.n	80016b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <_sbrk+0x50>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <_sbrk+0x50>)
 80016b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000ac 	.word	0x200000ac
 80016c4:	200008d8 	.word	0x200008d8

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <SystemInit+0x28>)
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <SystemInit+0x28>)
 80016d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SystemInit+0x28>)
 80016de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e2:	609a      	str	r2, [r3, #8]
#endif
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b096      	sub	sp, #88	; 0x58
 80016f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2220      	movs	r2, #32
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f008 fa8b 	bl	8009c48 <memset>

  htim1.Instance = TIM1;
 8001732:	4b50      	ldr	r3, [pc, #320]	; (8001874 <MX_TIM1_Init+0x180>)
 8001734:	4a50      	ldr	r2, [pc, #320]	; (8001878 <MX_TIM1_Init+0x184>)
 8001736:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001738:	4b4e      	ldr	r3, [pc, #312]	; (8001874 <MX_TIM1_Init+0x180>)
 800173a:	22a7      	movs	r2, #167	; 0xa7
 800173c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <MX_TIM1_Init+0x180>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <MX_TIM1_Init+0x180>)
 8001746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800174a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b49      	ldr	r3, [pc, #292]	; (8001874 <MX_TIM1_Init+0x180>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001752:	4b48      	ldr	r3, [pc, #288]	; (8001874 <MX_TIM1_Init+0x180>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b46      	ldr	r3, [pc, #280]	; (8001874 <MX_TIM1_Init+0x180>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175e:	4845      	ldr	r0, [pc, #276]	; (8001874 <MX_TIM1_Init+0x180>)
 8001760:	f003 fd91 	bl	8005286 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800176a:	f7ff fe9b 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001778:	4619      	mov	r1, r3
 800177a:	483e      	ldr	r0, [pc, #248]	; (8001874 <MX_TIM1_Init+0x180>)
 800177c:	f003 fee8 	bl	8005550 <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001786:	f7ff fe8d 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800178a:	483a      	ldr	r0, [pc, #232]	; (8001874 <MX_TIM1_Init+0x180>)
 800178c:	f003 fda6 	bl	80052dc <HAL_TIM_PWM_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001796:	f7ff fe85 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a6:	4619      	mov	r1, r3
 80017a8:	4832      	ldr	r0, [pc, #200]	; (8001874 <MX_TIM1_Init+0x180>)
 80017aa:	f004 fa99 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017b4:	f7ff fe76 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b8:	2360      	movs	r3, #96	; 0x60
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	2200      	movs	r2, #0
 80017da:	4619      	mov	r1, r3
 80017dc:	4825      	ldr	r0, [pc, #148]	; (8001874 <MX_TIM1_Init+0x180>)
 80017de:	f003 fdf1 	bl	80053c4 <HAL_TIM_PWM_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017e8:	f7ff fe5c 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	2204      	movs	r2, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <MX_TIM1_Init+0x180>)
 80017f6:	f003 fde5 	bl	80053c4 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001800:	f7ff fe50 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	2208      	movs	r2, #8
 800180a:	4619      	mov	r1, r3
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <MX_TIM1_Init+0x180>)
 800180e:	f003 fdd9 	bl	80053c4 <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001818:	f7ff fe44 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	220c      	movs	r2, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <MX_TIM1_Init+0x180>)
 8001826:	f003 fdcd 	bl	80053c4 <HAL_TIM_PWM_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001830:	f7ff fe38 	bl	80014a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM1_Init+0x180>)
 8001858:	f004 fabe 	bl	8005dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001862:	f7ff fe1f 	bl	80014a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM1_Init+0x180>)
 8001868:	f000 f82a 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 800186c:	bf00      	nop
 800186e:	3758      	adds	r7, #88	; 0x58
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200001b4 	.word	0x200001b4
 8001878:	40010000 	.word	0x40010000

0800187c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_TIM_Base_MspInit+0x3c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10d      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40010000 	.word	0x40010000
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_TIM_MspPostInit+0x68>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11e      	bne.n	8001920 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_TIM_MspPostInit+0x6c>)
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_TIM_MspPostInit+0x6c>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80018fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001902:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_TIM_MspPostInit+0x70>)
 800191c:	f000 fa20 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010000 	.word	0x40010000
 800192c:	40023800 	.word	0x40023800
 8001930:	40021000 	.word	0x40021000

08001934 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART2_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800196c:	f004 fa86 	bl	8005e7c <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f7ff fd95 	bl	80014a4 <Error_Handler>
  }

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200001f4 	.word	0x200001f4
 8001984:	40004400 	.word	0x40004400

08001988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12b      	bne.n	8001a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e2:	230c      	movs	r3, #12
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_MspInit+0x8c>)
 80019fe:	f000 f9af 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_Init+0x40>)
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_Init+0x40>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_Init+0x40>)
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_Init+0x40>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_Init+0x40>)
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x40>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f94b 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fdb0 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f963 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f92b 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000234 	.word	0x20000234

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000234 	.word	0x20000234

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_Delay+0x40>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3f7      	bcc.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	4909      	ldr	r1, [pc, #36]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	490d      	ldr	r1, [pc, #52]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	4909      	ldr	r1, [pc, #36]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	401a      	ands	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	1e59      	subs	r1, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff90 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff2b 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff40 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff33 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e16b      	b.n	8002054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 815a 	bne.w	800204e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d00b      	beq.n	8001dba <HAL_GPIO_Init+0x5a>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0xfc>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80b4 	beq.w	800204e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_GPIO_Init+0x308>)
 8001eec:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_GPIO_Init+0x308>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_GPIO_Init+0x308>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_GPIO_Init+0x30c>)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a51      	ldr	r2, [pc, #324]	; (8002070 <HAL_GPIO_Init+0x310>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x226>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	; (8002074 <HAL_GPIO_Init+0x314>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x222>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_GPIO_Init+0x318>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x21e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_GPIO_Init+0x31c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x324>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_GPIO_Init+0x328>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	; (800208c <HAL_GPIO_Init+0x32c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x20a>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e00e      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f98:	4934      	ldr	r1, [pc, #208]	; (800206c <HAL_GPIO_Init+0x30c>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff4:	4a26      	ldr	r2, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_GPIO_Init+0x330>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_GPIO_Init+0x330>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_GPIO_Init+0x330>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae90 	bls.w	8001d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40021c00 	.word	0x40021c00
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c8:	b08f      	sub	sp, #60	; 0x3c
 80020ca:	af0a      	add	r7, sp, #40	; 0x28
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e054      	b.n	8002182 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f007 fa9a 	bl	800962c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fc36 	bl	8006988 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	687e      	ldr	r6, [r7, #4]
 8002124:	466d      	mov	r5, sp
 8002126:	f106 0410 	add.w	r4, r6, #16
 800212a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002136:	e885 0003 	stmia.w	r5, {r0, r1}
 800213a:	1d33      	adds	r3, r6, #4
 800213c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f004 fbb0 	bl	80068a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fc2d 	bl	80069aa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	687e      	ldr	r6, [r7, #4]
 8002158:	466d      	mov	r5, sp
 800215a:	f106 0410 	add.w	r4, r6, #16
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216a:	e885 0003 	stmia.w	r5, {r0, r1}
 800216e:	1d33      	adds	r3, r6, #4
 8002170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002172:	6838      	ldr	r0, [r7, #0]
 8002174:	f004 fd40 	bl	8006bf8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800218a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800218a:	b590      	push	{r4, r7, lr}
 800218c:	b089      	sub	sp, #36	; 0x24
 800218e:	af04      	add	r7, sp, #16
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	4608      	mov	r0, r1
 8002194:	4611      	mov	r1, r2
 8002196:	461a      	mov	r2, r3
 8002198:	4603      	mov	r3, r0
 800219a:	70fb      	strb	r3, [r7, #3]
 800219c:	460b      	mov	r3, r1
 800219e:	70bb      	strb	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_HCD_HC_Init+0x28>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e07f      	b.n	80022b2 <HAL_HCD_HC_Init+0x128>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	333d      	adds	r3, #61	; 0x3d
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3338      	adds	r3, #56	; 0x38
 80021de:	787a      	ldrb	r2, [r7, #1]
 80021e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3340      	adds	r3, #64	; 0x40
 80021f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021f4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3339      	adds	r3, #57	; 0x39
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	333f      	adds	r3, #63	; 0x3f
 800221a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800221e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	78bb      	ldrb	r3, [r7, #2]
 8002224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002228:	b2d8      	uxtb	r0, r3
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	333a      	adds	r3, #58	; 0x3a
 8002238:	4602      	mov	r2, r0
 800223a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800223c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002240:	2b00      	cmp	r3, #0
 8002242:	da0a      	bge.n	800225a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	333b      	adds	r3, #59	; 0x3b
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e009      	b.n	800226e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	333b      	adds	r3, #59	; 0x3b
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	333c      	adds	r3, #60	; 0x3c
 800227e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002282:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	787c      	ldrb	r4, [r7, #1]
 800228a:	78ba      	ldrb	r2, [r7, #2]
 800228c:	78f9      	ldrb	r1, [r7, #3]
 800228e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4623      	mov	r3, r4
 80022a0:	f004 fe34 	bl	8006f0c <USB_HC_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}

080022ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_HCD_HC_Halt+0x1e>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e00f      	b.n	80022f8 <HAL_HCD_HC_Halt+0x3e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f005 f87c 	bl	80073e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	70fb      	strb	r3, [r7, #3]
 8002312:	460b      	mov	r3, r1
 8002314:	70bb      	strb	r3, [r7, #2]
 8002316:	4613      	mov	r3, r2
 8002318:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	333b      	adds	r3, #59	; 0x3b
 800232a:	78ba      	ldrb	r2, [r7, #2]
 800232c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	333f      	adds	r3, #63	; 0x3f
 800233e:	787a      	ldrb	r2, [r7, #1]
 8002340:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002342:	7c3b      	ldrb	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d114      	bne.n	8002372 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	3342      	adds	r3, #66	; 0x42
 8002358:	2203      	movs	r2, #3
 800235a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	333d      	adds	r3, #61	; 0x3d
 800236c:	7f3a      	ldrb	r2, [r7, #28]
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e009      	b.n	8002386 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3342      	adds	r3, #66	; 0x42
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002386:	787b      	ldrb	r3, [r7, #1]
 8002388:	2b03      	cmp	r3, #3
 800238a:	f200 80d6 	bhi.w	800253a <HAL_HCD_HC_SubmitRequest+0x23a>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	08002525 	.word	0x08002525
 800239c:	08002411 	.word	0x08002411
 80023a0:	0800249b 	.word	0x0800249b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80023a4:	7c3b      	ldrb	r3, [r7, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 80c9 	bne.w	800253e <HAL_HCD_HC_SubmitRequest+0x23e>
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80c5 	bne.w	800253e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80023b4:	8b3b      	ldrh	r3, [r7, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3351      	adds	r3, #81	; 0x51
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3351      	adds	r3, #81	; 0x51
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3342      	adds	r3, #66	; 0x42
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023f8:	e0a1      	b.n	800253e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3342      	adds	r3, #66	; 0x42
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e096      	b.n	800253e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002410:	78bb      	ldrb	r3, [r7, #2]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d120      	bne.n	8002458 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3351      	adds	r3, #81	; 0x51
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3342      	adds	r3, #66	; 0x42
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002440:	e07e      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3342      	adds	r3, #66	; 0x42
 8002452:	2202      	movs	r2, #2
 8002454:	701a      	strb	r2, [r3, #0]
      break;
 8002456:	e073      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3350      	adds	r3, #80	; 0x50
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3342      	adds	r3, #66	; 0x42
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
      break;
 8002482:	e05d      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3342      	adds	r3, #66	; 0x42
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
      break;
 8002498:	e052      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800249a:	78bb      	ldrb	r3, [r7, #2]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d120      	bne.n	80024e2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3351      	adds	r3, #81	; 0x51
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3342      	adds	r3, #66	; 0x42
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024ca:	e039      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3342      	adds	r3, #66	; 0x42
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
      break;
 80024e0:	e02e      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3350      	adds	r3, #80	; 0x50
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3342      	adds	r3, #66	; 0x42
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
      break;
 800250c:	e018      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	3342      	adds	r3, #66	; 0x42
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e00d      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	3342      	adds	r3, #66	; 0x42
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
      break;
 8002538:	e002      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800253e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3344      	adds	r3, #68	; 0x44
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	8b39      	ldrh	r1, [r7, #24]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4403      	add	r3, r0
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	334c      	adds	r3, #76	; 0x4c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	3339      	adds	r3, #57	; 0x39
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	335d      	adds	r3, #93	; 0x5d
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	18d1      	adds	r1, r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	f004 fdac 	bl	8007130 <USB_HC_StartXfer>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop

080025e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fab9 	bl	8006b72 <USB_GetMode>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	f040 80ef 	bne.w	80027e6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f004 fa9d 	bl	8006b4c <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80e5 	beq.w	80027e4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f004 fa94 	bl	8006b4c <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800262e:	d104      	bne.n	800263a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fa84 	bl	8006b4c <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264e:	d104      	bne.n	800265a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f004 fa74 	bl	8006b4c <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800266a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266e:	d104      	bne.n	800267a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002678:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f004 fa64 	bl	8006b4c <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d103      	bne.n	8002696 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2202      	movs	r2, #2
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f004 fa56 	bl	8006b4c <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026aa:	d115      	bne.n	80026d8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f007 f82e 	bl	8009728 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 fb4e 	bl	8006d74 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fa35 	bl	8006b4c <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d102      	bne.n	80026f4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f001 f97c 	bl	80039ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 fa27 	bl	8006b4c <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b08      	cmp	r3, #8
 8002706:	d106      	bne.n	8002716 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f006 fff1 	bl	80096f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2208      	movs	r2, #8
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fa16 	bl	8006b4c <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272a:	d138      	bne.n	800279e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 fe47 	bl	80073c4 <USB_HC_ReadInterrupt>
 8002736:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e025      	b.n	800278a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002768:	d106      	bne.n	8002778 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8cf 	bl	8002914 <HCD_HC_IN_IRQHandler>
 8002776:	e005      	b.n	8002784 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fd08 	bl	8003194 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8d4      	bhi.n	800273e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 f9d2 	bl	8006b4c <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d101      	bne.n	80027b6 <HAL_HCD_IRQHandler+0x1d2>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_HCD_IRQHandler+0x1d4>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d014      	beq.n	80027e6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	6992      	ldr	r2, [r2, #24]
 80027c6:	f022 0210 	bic.w	r2, r2, #16
 80027ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 f861 	bl	8003894 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	6992      	ldr	r2, [r2, #24]
 80027dc:	f042 0210 	orr.w	r2, r2, #16
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	e000      	b.n	80027e6 <HAL_HCD_IRQHandler+0x202>
      return;
 80027e4:	bf00      	nop
    }
  }
}
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_HCD_Start+0x16>
 80027fe:	2302      	movs	r3, #2
 8002800:	e013      	b.n	800282a <HAL_HCD_Start+0x3e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f004 f8a9 	bl	8006966 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fb12 	bl	8006e44 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_HCD_Stop+0x16>
 8002844:	2302      	movs	r3, #2
 8002846:	e00d      	b.n	8002864 <HAL_HCD_Stop+0x32>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f004 ff0b 	bl	8007670 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f004 fab7 	bl	8006dec <USB_ResetPort>
 800287e:	4603      	mov	r3, r0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	335c      	adds	r3, #92	; 0x5c
 80028a4:	781b      	ldrb	r3, [r3, #0]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	334c      	adds	r3, #76	; 0x4c
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fafd 	bl	8006ee8 <USB_GetCurrentFrame>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fad8 	bl	8006eba <USB_GetHostSpeed>
 800290a:	4603      	mov	r3, r0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11a      	bne.n	800297a <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2304      	movs	r3, #4
 8002954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	4619      	mov	r1, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	60cb      	str	r3, [r1, #12]
 8002978:	e0d1      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002990:	d12d      	bne.n	80029ee <HCD_HC_IN_IRQHandler+0xda>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	335d      	adds	r3, #93	; 0x5d
 80029b6:	2207      	movs	r2, #7
 80029b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	4619      	mov	r1, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 fcfd 	bl	80073e6 <USB_HC_Halt>
 80029ec:	e097      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d109      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	2320      	movs	r3, #32
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	e082      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d135      	bne.n	8002a9a <HCD_HC_IN_IRQHandler+0x186>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	335d      	adds	r3, #93	; 0x5d
 8002a60:	2205      	movs	r2, #5
 8002a62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	461a      	mov	r2, r3
 8002a72:	2310      	movs	r3, #16
 8002a74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	2308      	movs	r3, #8
 8002a86:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 fca7 	bl	80073e6 <USB_HC_Halt>
 8002a98:	e041      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d135      	bne.n	8002b1e <HCD_HC_IN_IRQHandler+0x20a>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	4619      	mov	r1, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fc81 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	2310      	movs	r3, #16
 8002af4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	335d      	adds	r3, #93	; 0x5d
 8002b06:	2208      	movs	r2, #8
 8002b08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	461a      	mov	r2, r3
 8002b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d123      	bne.n	8002b7e <HCD_HC_IN_IRQHandler+0x26a>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	4619      	mov	r1, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f043 0302 	orr.w	r3, r3, #2
 8002b56:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fc3f 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b7c:	e306      	b.n	800318c <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 80ff 	bne.w	8002d94 <HCD_HC_IN_IRQHandler+0x480>
    if (hhcd->Init.dma_enable != 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01b      	beq.n	8002bd6 <HCD_HC_IN_IRQHandler+0x2c2>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3348      	adds	r3, #72	; 0x48
 8002bae:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002bc2:	1ad1      	subs	r1, r2, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4403      	add	r3, r0
 8002bd2:	334c      	adds	r3, #76	; 0x4c
 8002bd4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	335d      	adds	r3, #93	; 0x5d
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3358      	adds	r3, #88	; 0x58
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	333f      	adds	r3, #63	; 0x3f
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HCD_HC_IN_IRQHandler+0x328>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	333f      	adds	r3, #63	; 0x3f
 8002c36:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d122      	bne.n	8002c82 <HCD_HC_IN_IRQHandler+0x36e>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 fbbc 	bl	80073e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	6093      	str	r3, [r2, #8]
 8002c80:	e071      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x452>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	333f      	adds	r3, #63	; 0x3f
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d12b      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x3dc>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb8:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	b2d8      	uxtb	r0, r3
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	335c      	adds	r3, #92	; 0x5c
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4601      	mov	r1, r0
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f006 fd2b 	bl	8009744 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cee:	e03a      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x452>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	333f      	adds	r3, #63	; 0x3f
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d12f      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x452>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	335c      	adds	r3, #92	; 0x5c
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	3350      	adds	r3, #80	; 0x50
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2d8      	uxtb	r0, r3
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3350      	adds	r3, #80	; 0x50
 8002d42:	4602      	mov	r2, r0
 8002d44:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	b2d8      	uxtb	r0, r3
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	335c      	adds	r3, #92	; 0x5c
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4601      	mov	r1, r0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f006 fcef 	bl	8009744 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	3350      	adds	r3, #80	; 0x50
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f083 0301 	eor.w	r3, r3, #1
 8002d7c:	b2d8      	uxtb	r0, r3
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3350      	adds	r3, #80	; 0x50
 8002d8e:	4602      	mov	r2, r0
 8002d90:	701a      	strb	r2, [r3, #0]
}
 8002d92:	e1fb      	b.n	800318c <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	f040 811b 	bne.w	8002fe2 <HCD_HC_IN_IRQHandler+0x6ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	4619      	mov	r1, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f023 0302 	bic.w	r3, r3, #2
 8002dcc:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	335d      	adds	r3, #93	; 0x5d
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10a      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x4e6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e0d9      	b.n	8002fae <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	335d      	adds	r3, #93	; 0x5d
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d10a      	bne.n	8002e26 <HCD_HC_IN_IRQHandler+0x512>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	335c      	adds	r3, #92	; 0x5c
 8002e20:	2205      	movs	r2, #5
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e0c3      	b.n	8002fae <HCD_HC_IN_IRQHandler+0x69a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	335d      	adds	r3, #93	; 0x5d
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b06      	cmp	r3, #6
 8002e3a:	d00a      	beq.n	8002e52 <HCD_HC_IN_IRQHandler+0x53e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	335d      	adds	r3, #93	; 0x5d
 8002e4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d156      	bne.n	8002f00 <HCD_HC_IN_IRQHandler+0x5ec>
      hhcd->hc[ch_num].ErrCnt++;
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3358      	adds	r3, #88	; 0x58
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1c59      	adds	r1, r3, #1
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4403      	add	r3, r0
 8002e74:	3358      	adds	r3, #88	; 0x58
 8002e76:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3358      	adds	r3, #88	; 0x58
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d914      	bls.n	8002eb8 <HCD_HC_IN_IRQHandler+0x5a4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3358      	adds	r3, #88	; 0x58
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335c      	adds	r3, #92	; 0x5c
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e009      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x5b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	335c      	adds	r3, #92	; 0x5c
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e056      	b.n	8002fae <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	335d      	adds	r3, #93	; 0x5d
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d123      	bne.n	8002f5e <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	335c      	adds	r3, #92	; 0x5c
 8002f26:	2202      	movs	r2, #2
 8002f28:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f40:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f48:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	e027      	b.n	8002fae <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	335d      	adds	r3, #93	; 0x5d
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b07      	cmp	r3, #7
 8002f72:	d11c      	bne.n	8002fae <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt++;
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	3358      	adds	r3, #88	; 0x58
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4403      	add	r3, r0
 8002f96:	3358      	adds	r3, #88	; 0x58
 8002f98:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	335c      	adds	r3, #92	; 0x5c
 8002faa:	2204      	movs	r2, #4
 8002fac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	b2d8      	uxtb	r0, r3
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4601      	mov	r1, r0
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f006 fbb2 	bl	8009744 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fe0:	e0d4      	b.n	800318c <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d13f      	bne.n	8003078 <HCD_HC_IN_IRQHandler+0x764>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	4619      	mov	r1, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	3358      	adds	r3, #88	; 0x58
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1c59      	adds	r1, r3, #1
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4403      	add	r3, r0
 800303c:	3358      	adds	r3, #88	; 0x58
 800303e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	335d      	adds	r3, #93	; 0x5d
 8003050:	2206      	movs	r2, #6
 8003052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f004 f9c1 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	6093      	str	r3, [r2, #8]
}
 8003076:	e089      	b.n	800318c <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b10      	cmp	r3, #16
 800308c:	d17e      	bne.n	800318c <HCD_HC_IN_IRQHandler+0x878>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	333f      	adds	r3, #63	; 0x3f
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d123      	bne.n	80030ec <HCD_HC_IN_IRQHandler+0x7d8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3358      	adds	r3, #88	; 0x58
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	4619      	mov	r1, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 f97e 	bl	80073e6 <USB_HC_Halt>
 80030ea:	e046      	b.n	800317a <HCD_HC_IN_IRQHandler+0x866>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	333f      	adds	r3, #63	; 0x3f
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HCD_HC_IN_IRQHandler+0x804>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	333f      	adds	r3, #63	; 0x3f
 8003112:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003114:	2b02      	cmp	r3, #2
 8003116:	d130      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x866>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	3358      	adds	r3, #88	; 0x58
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d122      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x866>
        hhcd->hc[ch_num].state = HC_NAK;
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	335d      	adds	r3, #93	; 0x5d
 8003144:	2203      	movs	r2, #3
 8003146:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	4619      	mov	r1, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f004 f936 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	461a      	mov	r2, r3
 8003188:	2310      	movs	r3, #16
 800318a:	6093      	str	r3, [r2, #8]
}
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11a      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2304      	movs	r3, #4
 80031d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	4619      	mov	r1, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 80031f8:	e347      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b20      	cmp	r3, #32
 800320e:	d142      	bne.n	8003296 <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	461a      	mov	r2, r3
 800321e:	2320      	movs	r3, #32
 8003220:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	333d      	adds	r3, #61	; 0x3d
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	f040 8328 	bne.w	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].do_ping = 0U;
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	333d      	adds	r3, #61	; 0x3d
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	335c      	adds	r3, #92	; 0x5c
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	4619      	mov	r1, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f004 f8a9 	bl	80073e6 <USB_HC_Halt>
}
 8003294:	e2f9      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d140      	bne.n	800332e <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	335d      	adds	r3, #93	; 0x5d
 80032bc:	2204      	movs	r2, #4
 80032be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	333d      	adds	r3, #61	; 0x3d
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	3358      	adds	r3, #88	; 0x58
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	4619      	mov	r1, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f004 f866 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	461a      	mov	r2, r3
 8003328:	2340      	movs	r3, #64	; 0x40
 800332a:	6093      	str	r3, [r2, #8]
}
 800332c:	e2ad      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	d123      	bne.n	800338e <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	4619      	mov	r1, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f004 f837 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338a:	6093      	str	r3, [r2, #8]
}
 800338c:	e27d      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d136      	bne.n	8003412 <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	3358      	adds	r3, #88	; 0x58
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	4619      	mov	r1, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 fffe 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2301      	movs	r3, #1
 80033fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	335d      	adds	r3, #93	; 0x5d
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
}
 8003410:	e23b      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d12c      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2308      	movs	r3, #8
 8003438:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	4619      	mov	r1, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f003 ffbd 	bl	80073e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	335d      	adds	r3, #93	; 0x5d
 800347c:	2205      	movs	r2, #5
 800347e:	701a      	strb	r2, [r3, #0]
}
 8003480:	e203      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b10      	cmp	r3, #16
 8003496:	d156      	bne.n	8003546 <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	3358      	adds	r3, #88	; 0x58
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	335d      	adds	r3, #93	; 0x5d
 80034bc:	2203      	movs	r2, #3
 80034be:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	333d      	adds	r3, #61	; 0x3d
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	333c      	adds	r3, #60	; 0x3c
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	333d      	adds	r3, #61	; 0x3d
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	4619      	mov	r1, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f003 ff5a 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	461a      	mov	r2, r3
 8003540:	2310      	movs	r3, #16
 8003542:	6093      	str	r3, [r2, #8]
}
 8003544:	e1a1      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d12c      	bne.n	80035b6 <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	4619      	mov	r1, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f003 ff2c 	bl	80073e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	335d      	adds	r3, #93	; 0x5d
 800359e:	2206      	movs	r2, #6
 80035a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	6093      	str	r3, [r2, #8]
}
 80035b4:	e169      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d136      	bne.n	800363c <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	4619      	mov	r1, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fef3 	bl	80073e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	461a      	mov	r2, r3
 800360e:	2310      	movs	r3, #16
 8003610:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	461a      	mov	r2, r3
 8003620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003624:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	335d      	adds	r3, #93	; 0x5d
 8003636:	2208      	movs	r2, #8
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	e126      	b.n	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	f040 811b 	bne.w	800388a <HCD_HC_OUT_IRQHandler+0x6f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003660:	4619      	mov	r1, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f023 0302 	bic.w	r3, r3, #2
 8003674:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	335d      	adds	r3, #93	; 0x5d
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d137      	bne.n	80036fc <HCD_HC_OUT_IRQHandler+0x568>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	335c      	adds	r3, #92	; 0x5c
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	333f      	adds	r3, #63	; 0x3f
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d00b      	beq.n	80036ce <HCD_HC_OUT_IRQHandler+0x53a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	333f      	adds	r3, #63	; 0x3f
 80036c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	f040 80c5 	bne.w	8003858 <HCD_HC_OUT_IRQHandler+0x6c4>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	3351      	adds	r3, #81	; 0x51
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2d8      	uxtb	r0, r3
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3351      	adds	r3, #81	; 0x51
 80036f6:	4602      	mov	r2, r0
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e0ad      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	335d      	adds	r3, #93	; 0x5d
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d10a      	bne.n	8003728 <HCD_HC_OUT_IRQHandler+0x594>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	335c      	adds	r3, #92	; 0x5c
 8003722:	2202      	movs	r2, #2
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e097      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	335d      	adds	r3, #93	; 0x5d
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d10a      	bne.n	8003754 <HCD_HC_OUT_IRQHandler+0x5c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	335c      	adds	r3, #92	; 0x5c
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e081      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	335d      	adds	r3, #93	; 0x5d
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d10a      	bne.n	8003780 <HCD_HC_OUT_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	335c      	adds	r3, #92	; 0x5c
 800377a:	2205      	movs	r2, #5
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e06b      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	440b      	add	r3, r1
 800378e:	335d      	adds	r3, #93	; 0x5d
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d00a      	beq.n	80037ac <HCD_HC_OUT_IRQHandler+0x618>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	335d      	adds	r3, #93	; 0x5d
 80037a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d155      	bne.n	8003858 <HCD_HC_OUT_IRQHandler+0x6c4>
      hhcd->hc[ch_num].ErrCnt++;
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	3358      	adds	r3, #88	; 0x58
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4403      	add	r3, r0
 80037ce:	3358      	adds	r3, #88	; 0x58
 80037d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3358      	adds	r3, #88	; 0x58
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d914      	bls.n	8003812 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	3358      	adds	r3, #88	; 0x58
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	335c      	adds	r3, #92	; 0x5c
 800380c:	2204      	movs	r2, #4
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e009      	b.n	8003826 <HCD_HC_OUT_IRQHandler+0x692>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	335c      	adds	r3, #92	; 0x5c
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800383c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003844:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	461a      	mov	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	461a      	mov	r2, r3
 8003866:	2302      	movs	r3, #2
 8003868:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	b2d8      	uxtb	r0, r3
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	440b      	add	r3, r1
 800387c:	335c      	adds	r3, #92	; 0x5c
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4601      	mov	r1, r0
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f005 ff5d 	bl	8009744 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	0c5b      	lsrs	r3, r3, #17
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d003      	beq.n	80038d8 <HCD_RXQLVL_IRQHandler+0x44>
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	f000 8082 	beq.w	80039da <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038d6:	e083      	b.n	80039e0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d07f      	beq.n	80039de <HCD_RXQLVL_IRQHandler+0x14a>
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3344      	adds	r3, #68	; 0x44
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d074      	beq.n	80039de <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	440b      	add	r3, r1
 8003906:	3344      	adds	r3, #68	; 0x44
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	b292      	uxth	r2, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f003 f8f3 	bl	8006afa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	3344      	adds	r3, #68	; 0x44
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	18d1      	adds	r1, r2, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4403      	add	r3, r0
 8003938:	3344      	adds	r3, #68	; 0x44
 800393a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	334c      	adds	r3, #76	; 0x4c
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	18d1      	adds	r1, r2, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4403      	add	r3, r0
 8003960:	334c      	adds	r3, #76	; 0x4c
 8003962:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d031      	beq.n	80039de <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003990:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003998:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	3350      	adds	r3, #80	; 0x50
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f083 0301 	eor.w	r3, r3, #1
 80039c2:	b2d8      	uxtb	r0, r3
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	3350      	adds	r3, #80	; 0x50
 80039d4:	4602      	mov	r2, r0
 80039d6:	701a      	strb	r2, [r3, #0]
      break;
 80039d8:	e001      	b.n	80039de <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80039de:	bf00      	nop
  }
}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	1ff80000 	.word	0x1ff80000

080039ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d10b      	bne.n	8003a3c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f005 fe6c 	bl	800970c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d132      	bne.n	8003aac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d126      	bne.n	8003aa6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d113      	bne.n	8003a88 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6a:	d106      	bne.n	8003a7a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 f97e 	bl	8006d74 <USB_InitFSLSPClkSel>
 8003a78:	e011      	b.n	8003a9e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 f977 	bl	8006d74 <USB_InitFSLSPClkSel>
 8003a86:	e00a      	b.n	8003a9e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a96:	461a      	mov	r2, r3
 8003a98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a9c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f005 fe5e 	bl	8009760 <HAL_HCD_PortEnabled_Callback>
 8003aa4:	e002      	b.n	8003aac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f005 fe68 	bl	800977c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d103      	bne.n	8003abe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6013      	str	r3, [r2, #0]
}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e11f      	b.n	8003d26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd f8da 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b38:	f001 f9dc 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a7b      	ldr	r2, [pc, #492]	; (8003d30 <HAL_I2C_Init+0x25c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d807      	bhi.n	8003b58 <HAL_I2C_Init+0x84>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a7a      	ldr	r2, [pc, #488]	; (8003d34 <HAL_I2C_Init+0x260>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e006      	b.n	8003b66 <HAL_I2C_Init+0x92>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a77      	ldr	r2, [pc, #476]	; (8003d38 <HAL_I2C_Init+0x264>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0db      	b.n	8003d26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a72      	ldr	r2, [pc, #456]	; (8003d3c <HAL_I2C_Init+0x268>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4863      	ldr	r0, [pc, #396]	; (8003d30 <HAL_I2C_Init+0x25c>)
 8003ba2:	4283      	cmp	r3, r0
 8003ba4:	d802      	bhi.n	8003bac <HAL_I2C_Init+0xd8>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e009      	b.n	8003bc0 <HAL_I2C_Init+0xec>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb2:	fb00 f303 	mul.w	r3, r0, r3
 8003bb6:	4862      	ldr	r0, [pc, #392]	; (8003d40 <HAL_I2C_Init+0x26c>)
 8003bb8:	fba0 0303 	umull	r0, r3, r0, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4955      	ldr	r1, [pc, #340]	; (8003d30 <HAL_I2C_Init+0x25c>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d80d      	bhi.n	8003bfc <HAL_I2C_Init+0x128>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e59      	subs	r1, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	bf38      	it	cc
 8003bf8:	2304      	movcc	r3, #4
 8003bfa:	e04f      	b.n	8003c9c <HAL_I2C_Init+0x1c8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <HAL_I2C_Init+0x154>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e5c      	subs	r4, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	440b      	add	r3, r1
 8003c12:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e012      	b.n	8003c4e <HAL_I2C_Init+0x17a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e5c      	subs	r4, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	0099      	lsls	r1, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Init+0x182>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e022      	b.n	8003c9c <HAL_I2C_Init+0x1c8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <HAL_I2C_Init+0x1a8>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1e5c      	subs	r4, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	440b      	add	r3, r1
 8003c6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7a:	e00f      	b.n	8003c9c <HAL_I2C_Init+0x1c8>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e5c      	subs	r4, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	69d0      	ldr	r0, [r2, #28]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6a12      	ldr	r2, [r2, #32]
 8003cb6:	4302      	orrs	r2, r0
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	6908      	ldr	r0, [r1, #16]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68c9      	ldr	r1, [r1, #12]
 8003cd6:	4301      	orrs	r1, r0
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6950      	ldr	r0, [r2, #20]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6992      	ldr	r2, [r2, #24]
 8003cf2:	4302      	orrs	r2, r0
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd90      	pop	{r4, r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	000186a0 	.word	0x000186a0
 8003d34:	001e847f 	.word	0x001e847f
 8003d38:	003d08ff 	.word	0x003d08ff
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	10624dd3 	.word	0x10624dd3

08003d44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e127      	b.n	8003fa6 <HAL_I2S_Init+0x262>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a90      	ldr	r2, [pc, #576]	; (8003fb0 <HAL_I2S_Init+0x26c>)
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fd f817 	bl	8000da4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d8c:	f023 030f 	bic.w	r3, r3, #15
 8003d90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2202      	movs	r2, #2
 8003d98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d060      	beq.n	8003e64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003daa:	2310      	movs	r3, #16
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e001      	b.n	8003db4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003db0:	2320      	movs	r3, #32
 8003db2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d802      	bhi.n	8003dc2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f001 f9a0 	bl	8005108 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dc8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd2:	d125      	bne.n	8003e20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d010      	beq.n	8003dfe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	3305      	adds	r3, #5
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	e01f      	b.n	8003e3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	3305      	adds	r3, #5
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e00e      	b.n	8003e3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	3305      	adds	r3, #5
 8003e3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4a5c      	ldr	r2, [pc, #368]	; (8003fb4 <HAL_I2S_Init+0x270>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	08db      	lsrs	r3, r3, #3
 8003e48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e003      	b.n	8003e6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e64:	2302      	movs	r3, #2
 8003e66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d902      	bls.n	8003e78 <HAL_I2S_Init+0x134>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2bff      	cmp	r3, #255	; 0xff
 8003e76:	d907      	bls.n	8003e88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f043 0210 	orr.w	r2, r3, #16
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e08e      	b.n	8003fa6 <HAL_I2S_Init+0x262>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6911      	ldr	r1, [r2, #16]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4311      	orrs	r1, r2
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ea8:	f023 030f 	bic.w	r3, r3, #15
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	6848      	ldr	r0, [r1, #4]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	6889      	ldr	r1, [r1, #8]
 8003eb4:	4308      	orrs	r0, r1
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68c9      	ldr	r1, [r1, #12]
 8003eba:	4308      	orrs	r0, r1
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	6989      	ldr	r1, [r1, #24]
 8003ec0:	4301      	orrs	r1, r0
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ec8:	61d3      	str	r3, [r2, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d161      	bne.n	8003f96 <HAL_I2S_Init+0x252>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <HAL_I2S_Init+0x274>)
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a37      	ldr	r2, [pc, #220]	; (8003fbc <HAL_I2S_Init+0x278>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2S_Init+0x1a2>
 8003ee2:	4a37      	ldr	r2, [pc, #220]	; (8003fc0 <HAL_I2S_Init+0x27c>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2S_Init+0x1a6>
 8003ee6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4933      	ldr	r1, [pc, #204]	; (8003fbc <HAL_I2S_Init+0x278>)
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2S_Init+0x1b4>
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_I2S_Init+0x27c>)
 8003ef6:	e001      	b.n	8003efc <HAL_I2S_Init+0x1b8>
 8003ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f02:	f023 030f 	bic.w	r3, r3, #15
 8003f06:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <HAL_I2S_Init+0x278>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_I2S_Init+0x1d2>
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_I2S_Init+0x27c>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2S_Init+0x1d6>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <HAL_I2S_Init+0x278>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_I2S_Init+0x1e8>
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_I2S_Init+0x27c>)
 8003f2a:	e001      	b.n	8003f30 <HAL_I2S_Init+0x1ec>
 8003f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d003      	beq.n	8003f46 <HAL_I2S_Init+0x202>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_I2S_Init+0x20a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e001      	b.n	8003f52 <HAL_I2S_Init+0x20e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	b299      	uxth	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f68:	4303      	orrs	r3, r0
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	897b      	ldrh	r3, [r7, #10]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f7e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <HAL_I2S_Init+0x278>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <HAL_I2S_Init+0x24a>
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_I2S_Init+0x27c>)
 8003f8c:	e001      	b.n	8003f92 <HAL_I2S_Init+0x24e>
 8003f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f92:	897a      	ldrh	r2, [r7, #10]
 8003f94:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	080040bb 	.word	0x080040bb
 8003fb4:	cccccccd 	.word	0xcccccccd
 8003fb8:	080041d1 	.word	0x080041d1
 8003fbc:	40003800 	.word	0x40003800
 8003fc0:	40003400 	.word	0x40003400

08003fc4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004010:	8812      	ldrh	r2, [r2, #0]
 8004012:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10e      	bne.n	8004054 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	6852      	ldr	r2, [r2, #4]
 8004040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004044:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ffb8 	bl	8003fc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	b292      	uxth	r2, r2
 8004070:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	1c9a      	adds	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10e      	bne.n	80040b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	6852      	ldr	r2, [r2, #4]
 800409e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff93 	bl	8003fd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d13a      	bne.n	800414c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d109      	bne.n	80040f4 <I2S_IRQHandler+0x3a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d102      	bne.n	80040f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ffb4 	bl	800405c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d126      	bne.n	800414c <I2S_IRQHandler+0x92>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b20      	cmp	r3, #32
 800410a:	d11f      	bne.n	800414c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	6852      	ldr	r2, [r2, #4]
 8004116:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800411a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff50 	bl	8003fec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d136      	bne.n	80041c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d109      	bne.n	8004176 <I2S_IRQHandler+0xbc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d102      	bne.n	8004176 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff45 	bl	8004000 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b08      	cmp	r3, #8
 800417e:	d122      	bne.n	80041c6 <I2S_IRQHandler+0x10c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b20      	cmp	r3, #32
 800418c:	d11b      	bne.n	80041c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6852      	ldr	r2, [r2, #4]
 8004198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800419c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff13 	bl	8003fec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4aa2      	ldr	r2, [pc, #648]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041ea:	4ba2      	ldr	r3, [pc, #648]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041ec:	e001      	b.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a9b      	ldr	r2, [pc, #620]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004208:	4b9a      	ldr	r3, [pc, #616]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800420a:	e001      	b.n	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800420c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421c:	d004      	beq.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 8099 	bne.w	800435a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d107      	bne.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f925 	bl	800448c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9c6 	bl	80045e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d13a      	bne.n	80042dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d035      	beq.n	80042dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a7e      	ldr	r2, [pc, #504]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800427a:	4b7e      	ldr	r3, [pc, #504]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800427c:	e001      	b.n	8004282 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800427e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	497a      	ldr	r1, [pc, #488]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004288:	428a      	cmp	r2, r1
 800428a:	d101      	bne.n	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0xc0>
 800428c:	4a79      	ldr	r2, [pc, #484]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800428e:	e001      	b.n	8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0xc4>
 8004290:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004294:	6852      	ldr	r2, [r2, #4]
 8004296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800429a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	6852      	ldr	r2, [r2, #4]
 80042a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f043 0202 	orr.w	r2, r3, #2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fe88 	bl	8003fec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	f040 80be 	bne.w	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80b8 	beq.w	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	6852      	ldr	r2, [r2, #4]
 80042fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004302:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a59      	ldr	r2, [pc, #356]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800430e:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004310:	e001      	b.n	8004316 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	4955      	ldr	r1, [pc, #340]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800431c:	428a      	cmp	r2, r1
 800431e:	d101      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8004320:	4a54      	ldr	r2, [pc, #336]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004322:	e001      	b.n	8004328 <HAL_I2SEx_FullDuplex_IRQHandler+0x158>
 8004324:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004328:	6852      	ldr	r2, [r2, #4]
 800432a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800432e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f043 0204 	orr.w	r2, r3, #4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fe4a 	bl	8003fec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004358:	e084      	b.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d107      	bne.n	8004374 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8be 	bl	80044f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d107      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8fb 	bl	8004584 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d12f      	bne.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02a      	beq.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6852      	ldr	r2, [r2, #4]
 80043ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2e      	ldr	r2, [pc, #184]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043be:	e001      	b.n	80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	4929      	ldr	r1, [pc, #164]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043ca:	428a      	cmp	r2, r1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
 80043ce:	4a29      	ldr	r2, [pc, #164]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043d0:	e001      	b.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x206>
 80043d2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80043d6:	6852      	ldr	r2, [r2, #4]
 80043d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f043 0202 	orr.w	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fdfa 	bl	8003fec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d131      	bne.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02c      	beq.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004416:	4b17      	ldr	r3, [pc, #92]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004418:	e001      	b.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800441a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	4913      	ldr	r1, [pc, #76]	; (8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004424:	428a      	cmp	r2, r1
 8004426:	d101      	bne.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>
 8004428:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800442a:	e001      	b.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>
 800442c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004430:	6852      	ldr	r2, [r2, #4]
 8004432:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004436:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	6852      	ldr	r2, [r2, #4]
 8004442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004446:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fdc5 	bl	8003fec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004462:	e000      	b.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004464:	bf00      	nop
}
 8004466:	bf00      	nop
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40003800 	.word	0x40003800
 8004474:	40003400 	.word	0x40003400

08004478 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	1c98      	adds	r0, r3, #2
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	6248      	str	r0, [r1, #36]	; 0x24
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d113      	bne.n	80044e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	6852      	ldr	r2, [r2, #4]
 80044c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ffc9 	bl	8004478 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <I2SEx_TxISR_I2SExt+0x8c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <I2SEx_TxISR_I2SExt+0x16>
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <I2SEx_TxISR_I2SExt+0x90>)
 8004504:	e001      	b.n	800450a <I2SEx_TxISR_I2SExt+0x1a>
 8004506:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c98      	adds	r0, r3, #2
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	6248      	str	r0, [r1, #36]	; 0x24
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d121      	bne.n	8004574 <I2SEx_TxISR_I2SExt+0x84>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a11      	ldr	r2, [pc, #68]	; (800457c <I2SEx_TxISR_I2SExt+0x8c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <I2SEx_TxISR_I2SExt+0x4e>
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <I2SEx_TxISR_I2SExt+0x90>)
 800453c:	e001      	b.n	8004542 <I2SEx_TxISR_I2SExt+0x52>
 800453e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	490d      	ldr	r1, [pc, #52]	; (800457c <I2SEx_TxISR_I2SExt+0x8c>)
 8004548:	428a      	cmp	r2, r1
 800454a:	d101      	bne.n	8004550 <I2SEx_TxISR_I2SExt+0x60>
 800454c:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <I2SEx_TxISR_I2SExt+0x90>)
 800454e:	e001      	b.n	8004554 <I2SEx_TxISR_I2SExt+0x64>
 8004550:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004554:	6852      	ldr	r2, [r2, #4]
 8004556:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800455a:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <I2SEx_TxISR_I2SExt+0x84>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ff82 	bl	8004478 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004574:	bf00      	nop
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40003800 	.word	0x40003800
 8004580:	40003400 	.word	0x40003400

08004584 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	1c99      	adds	r1, r3, #2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	68d2      	ldr	r2, [r2, #12]
 800459c:	b292      	uxth	r2, r2
 800459e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d113      	bne.n	80045e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	6852      	ldr	r2, [r2, #4]
 80045c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ff4c 	bl	8004478 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	1c99      	adds	r1, r3, #2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	491e      	ldr	r1, [pc, #120]	; (8004678 <I2SEx_RxISR_I2SExt+0x90>)
 8004600:	428a      	cmp	r2, r1
 8004602:	d101      	bne.n	8004608 <I2SEx_RxISR_I2SExt+0x20>
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <I2SEx_RxISR_I2SExt+0x94>)
 8004606:	e001      	b.n	800460c <I2SEx_RxISR_I2SExt+0x24>
 8004608:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	b292      	uxth	r2, r2
 8004610:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d121      	bne.n	800466e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <I2SEx_RxISR_I2SExt+0x90>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <I2SEx_RxISR_I2SExt+0x50>
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <I2SEx_RxISR_I2SExt+0x94>)
 8004636:	e001      	b.n	800463c <I2SEx_RxISR_I2SExt+0x54>
 8004638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	490d      	ldr	r1, [pc, #52]	; (8004678 <I2SEx_RxISR_I2SExt+0x90>)
 8004642:	428a      	cmp	r2, r1
 8004644:	d101      	bne.n	800464a <I2SEx_RxISR_I2SExt+0x62>
 8004646:	4a0d      	ldr	r2, [pc, #52]	; (800467c <I2SEx_RxISR_I2SExt+0x94>)
 8004648:	e001      	b.n	800464e <I2SEx_RxISR_I2SExt+0x66>
 800464a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800464e:	6852      	ldr	r2, [r2, #4]
 8004650:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004654:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ff05 	bl	8004478 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40003800 	.word	0x40003800
 800467c:	40003400 	.word	0x40003400

08004680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e25b      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d075      	beq.n	800478a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	4ba3      	ldr	r3, [pc, #652]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d00c      	beq.n	80046c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046aa:	4ba0      	ldr	r3, [pc, #640]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d112      	bne.n	80046dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b9d      	ldr	r3, [pc, #628]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c2:	d10b      	bne.n	80046dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c4:	4b99      	ldr	r3, [pc, #612]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05b      	beq.n	8004788 <HAL_RCC_OscConfig+0x108>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d157      	bne.n	8004788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e236      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d106      	bne.n	80046f4 <HAL_RCC_OscConfig+0x74>
 80046e6:	4a91      	ldr	r2, [pc, #580]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	4b90      	ldr	r3, [pc, #576]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e01d      	b.n	8004730 <HAL_RCC_OscConfig+0xb0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x98>
 80046fe:	4a8b      	ldr	r2, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004700:	4b8a      	ldr	r3, [pc, #552]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4a88      	ldr	r2, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800470c:	4b87      	ldr	r3, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0xb0>
 8004718:	4a84      	ldr	r2, [pc, #528]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800471a:	4b84      	ldr	r3, [pc, #528]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4a81      	ldr	r2, [pc, #516]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004726:	4b81      	ldr	r3, [pc, #516]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd f9d4 	bl	8001ae4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd f9d0 	bl	8001ae4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1fb      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0xc0>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd f9c0 	bl	8001ae4 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004768:	f7fd f9bc 	bl	8001ae4 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1e7      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	4b6c      	ldr	r3, [pc, #432]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0xe8>
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d063      	beq.n	800485e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d11c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b5f      	ldr	r3, [pc, #380]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d116      	bne.n	80047e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	4b5c      	ldr	r3, [pc, #368]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCC_OscConfig+0x152>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e1bb      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4956      	ldr	r1, [pc, #344]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	4b55      	ldr	r3, [pc, #340]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	e03a      	b.n	800485e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f0:	4b4f      	ldr	r3, [pc, #316]	; (8004930 <HAL_RCC_OscConfig+0x2b0>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd f975 	bl	8001ae4 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd f971 	bl	8001ae4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e19c      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	4b46      	ldr	r3, [pc, #280]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4943      	ldr	r1, [pc, #268]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800481e:	4b43      	ldr	r3, [pc, #268]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
 8004830:	e015      	b.n	800485e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_OscConfig+0x2b0>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd f954 	bl	8001ae4 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004840:	f7fd f950 	bl	8001ae4 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e17b      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d030      	beq.n	80048cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_OscConfig+0x2b4>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd f934 	bl	8001ae4 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004880:	f7fd f930 	bl	8001ae4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e15b      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x200>
 800489e:	e015      	b.n	80048cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCC_OscConfig+0x2b4>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f91d 	bl	8001ae4 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ae:	f7fd f919 	bl	8001ae4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e144      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80a0 	beq.w	8004a1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	4a0f      	ldr	r2, [pc, #60]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6413      	str	r3, [r2, #64]	; 0x40
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_OscConfig+0x2b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d121      	bne.n	800495a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004916:	4a08      	ldr	r2, [pc, #32]	; (8004938 <HAL_RCC_OscConfig+0x2b8>)
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCC_OscConfig+0x2b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004922:	f7fd f8df 	bl	8001ae4 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004928:	e011      	b.n	800494e <HAL_RCC_OscConfig+0x2ce>
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	42470000 	.word	0x42470000
 8004934:	42470e80 	.word	0x42470e80
 8004938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fd f8d2 	bl	8001ae4 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0fd      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b81      	ldr	r3, [pc, #516]	; (8004b54 <HAL_RCC_OscConfig+0x4d4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x2f0>
 8004962:	4a7d      	ldr	r2, [pc, #500]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004964:	4b7c      	ldr	r3, [pc, #496]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	e01c      	b.n	80049aa <HAL_RCC_OscConfig+0x32a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x312>
 8004978:	4a77      	ldr	r2, [pc, #476]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 800497a:	4b77      	ldr	r3, [pc, #476]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4a74      	ldr	r2, [pc, #464]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004986:	4b74      	ldr	r3, [pc, #464]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	e00b      	b.n	80049aa <HAL_RCC_OscConfig+0x32a>
 8004992:	4a71      	ldr	r2, [pc, #452]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004994:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	4a6e      	ldr	r2, [pc, #440]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 80049a0:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fd f897 	bl	8001ae4 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd f893 	bl	8001ae4 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0bc      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCC_OscConfig+0x33a>
 80049dc:	e014      	b.n	8004a08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fd f881 	bl	8001ae4 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fd f87d 	bl	8001ae4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e0a6      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ee      	bne.n	80049e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4a52      	ldr	r2, [pc, #328]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004a10:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8092 	beq.w	8004b48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a24:	4b4c      	ldr	r3, [pc, #304]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d05c      	beq.n	8004aea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d141      	bne.n	8004abc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <HAL_RCC_OscConfig+0x4dc>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fd f851 	bl	8001ae4 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fd f84d 	bl	8001ae4 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e078      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a58:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a64:	493c      	ldr	r1, [pc, #240]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a8e:	4b33      	ldr	r3, [pc, #204]	; (8004b5c <HAL_RCC_OscConfig+0x4dc>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fd f826 	bl	8001ae4 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fd f822 	bl	8001ae4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e04d      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x41c>
 8004aba:	e045      	b.n	8004b48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abc:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <HAL_RCC_OscConfig+0x4dc>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fd f80f 	bl	8001ae4 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aca:	f7fd f80b 	bl	8001ae4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e036      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004adc:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f0      	bne.n	8004aca <HAL_RCC_OscConfig+0x44a>
 8004ae8:	e02e      	b.n	8004b48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e029      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_RCC_OscConfig+0x4d8>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d11c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d115      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40007000 	.word	0x40007000
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470060 	.word	0x42470060

08004b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0cc      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b74:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0b8      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4a59      	ldr	r2, [pc, #356]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bcc:	4a53      	ldr	r2, [pc, #332]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	4b53      	ldr	r3, [pc, #332]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4950      	ldr	r1, [pc, #320]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d044      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d119      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e067      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3e:	4937      	ldr	r1, [pc, #220]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 0203 	bic.w	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fc ff48 	bl	8001ae4 <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fc ff44 	bl	8001ae4 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e04f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1eb      	bne.n	8004c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d90c      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 020f 	and.w	r2, r3, #15
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e032      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb4:	4919      	ldr	r1, [pc, #100]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd2:	4912      	ldr	r1, [pc, #72]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce6:	f000 f821 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cea:	4601      	mov	r1, r0
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf8:	5cd3      	ldrb	r3, [r2, r3]
 8004cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_ClockConfig+0x1c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fc fea8 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023c00 	.word	0x40023c00
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	08009df0 	.word	0x08009df0
 8004d24:	20000000 	.word	0x20000000
 8004d28:	20000004 	.word	0x20000004

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	b08f      	sub	sp, #60	; 0x3c
 8004d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d38:	2300      	movs	r3, #0
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d44:	4b62      	ldr	r3, [pc, #392]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d007      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d008      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 80b2 	bne.w	8004ebe <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5a:	4b5e      	ldr	r3, [pc, #376]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004d5e:	e0b1      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d60:	4b5d      	ldr	r3, [pc, #372]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d64:	e0ae      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d66:	4b5a      	ldr	r3, [pc, #360]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d70:	4b57      	ldr	r3, [pc, #348]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d04e      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7c:	4b54      	ldr	r3, [pc, #336]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	ea01 0103 	and.w	r1, r1, r3
 8004d92:	ea02 0204 	and.w	r2, r2, r4
 8004d96:	460b      	mov	r3, r1
 8004d98:	4614      	mov	r4, r2
 8004d9a:	0160      	lsls	r0, r4, #5
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24
 8004d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004da4:	6278      	str	r0, [r7, #36]	; 0x24
 8004da6:	015b      	lsls	r3, r3, #5
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004dae:	1a5b      	subs	r3, r3, r1
 8004db0:	eb64 0402 	sbc.w	r4, r4, r2
 8004db4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8004db8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8004dbc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8004dc0:	ebb8 0803 	subs.w	r8, r8, r3
 8004dc4:	eb69 0904 	sbc.w	r9, r9, r4
 8004dc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004de0:	eb18 0801 	adds.w	r8, r8, r1
 8004de4:	eb49 0902 	adc.w	r9, r9, r2
 8004de8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004e00:	4640      	mov	r0, r8
 8004e02:	4649      	mov	r1, r9
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	f04f 0400 	mov.w	r4, #0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4623      	mov	r3, r4
 8004e0e:	f7fb fc9d 	bl	800074c <__aeabi_uldivmod>
 8004e12:	4603      	mov	r3, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
 8004e18:	e043      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	ea01 0103 	and.w	r1, r1, r3
 8004e30:	ea02 0204 	and.w	r2, r2, r4
 8004e34:	460b      	mov	r3, r1
 8004e36:	4614      	mov	r4, r2
 8004e38:	0160      	lsls	r0, r4, #5
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	015b      	lsls	r3, r3, #5
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004e4c:	1a5b      	subs	r3, r3, r1
 8004e4e:	eb64 0402 	sbc.w	r4, r4, r2
 8004e52:	01a6      	lsls	r6, r4, #6
 8004e54:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8004e58:	019d      	lsls	r5, r3, #6
 8004e5a:	1aed      	subs	r5, r5, r3
 8004e5c:	eb66 0604 	sbc.w	r6, r6, r4
 8004e60:	00f3      	lsls	r3, r6, #3
 8004e62:	607b      	str	r3, [r7, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	00eb      	lsls	r3, r5, #3
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	e897 0060 	ldmia.w	r7, {r5, r6}
 8004e74:	186d      	adds	r5, r5, r1
 8004e76:	eb46 0602 	adc.w	r6, r6, r2
 8004e7a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004e7e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8004e82:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8004e86:	4655      	mov	r5, sl
 8004e88:	465e      	mov	r6, fp
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	461a      	mov	r2, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	f7fb fc58 	bl	800074c <__aeabi_uldivmod>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	0c1b      	lsrs	r3, r3, #16
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	3301      	adds	r3, #1
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	373c      	adds	r7, #60	; 0x3c
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	007a1200 	.word	0x007a1200

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000000 	.word	0x20000000

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef8:	f7ff fff0 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004efc:	4601      	mov	r1, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0a9b      	lsrs	r3, r3, #10
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4a03      	ldr	r2, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0a:	5cd3      	ldrb	r3, [r2, r3]
 8004f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	08009e00 	.word	0x08009e00

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f20:	f7ff ffdc 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f24:	4601      	mov	r1, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0b5b      	lsrs	r3, r3, #13
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4a03      	ldr	r2, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f32:	5cd3      	ldrb	r3, [r2, r3]
 8004f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	08009e00 	.word	0x08009e00

08004f44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d035      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f6c:	4b62      	ldr	r3, [pc, #392]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fc fdb7 	bl	8001ae4 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f7a:	f7fc fdb3 	bl	8001ae4 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0b0      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f8c:	4b5b      	ldr	r3, [pc, #364]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f98:	4958      	ldr	r1, [pc, #352]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	019a      	lsls	r2, r3, #6
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	071b      	lsls	r3, r3, #28
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fac:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fd97 	bl	8001ae4 <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fba:	f7fc fd93 	bl	8001ae4 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e090      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fcc:	4b4b      	ldr	r3, [pc, #300]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8083 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	4a44      	ldr	r2, [pc, #272]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fec:	4b43      	ldr	r3, [pc, #268]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff6:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005002:	4a3f      	ldr	r2, [pc, #252]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005004:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800500e:	f7fc fd69 	bl	8001ae4 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fc fd65 	bl	8001ae4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e062      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005028:	4b35      	ldr	r3, [pc, #212]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005034:	4b31      	ldr	r3, [pc, #196]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02f      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	429a      	cmp	r2, r3
 8005050:	d028      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800505c:	4b29      	ldr	r3, [pc, #164]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005062:	4b28      	ldr	r3, [pc, #160]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005068:	4a24      	ldr	r2, [pc, #144]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800506e:	4b23      	ldr	r3, [pc, #140]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d114      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800507a:	f7fc fd33 	bl	8001ae4 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	e00a      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fc fd2f 	bl	8001ae4 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e02a      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0ee      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b0:	d10d      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050b2:	4912      	ldr	r1, [pc, #72]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]
 80050cc:	e005      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050ce:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050d8:	6093      	str	r3, [r2, #8]
 80050da:	4908      	ldr	r1, [pc, #32]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e8:	4313      	orrs	r3, r2
 80050ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	42470068 	.word	0x42470068
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470e40 	.word	0x42470e40

08005108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d13d      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800512e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12f      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800513c:	617b      	str	r3, [r7, #20]
          break;
 800513e:	e02f      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800514c:	d108      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005158:	fbb2 f3f3 	udiv	r3, r2, r3
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	e007      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005168:	4a14      	ldr	r2, [pc, #80]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]
          break;
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
          break;
 800519e:	bf00      	nop
        }
      }
      break;
 80051a0:	bf00      	nop
    }
  }
  return frequency;
 80051a2:	697b      	ldr	r3, [r7, #20]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40023800 	.word	0x40023800
 80051b4:	00bb8000 	.word	0x00bb8000
 80051b8:	007a1200 	.word	0x007a1200
 80051bc:	00f42400 	.word	0x00f42400

080051c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e055      	b.n	800527e <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc f997 	bl	8001520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005208:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6851      	ldr	r1, [r2, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6892      	ldr	r2, [r2, #8]
 8005216:	4311      	orrs	r1, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68d2      	ldr	r2, [r2, #12]
 800521c:	4311      	orrs	r1, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6912      	ldr	r2, [r2, #16]
 8005222:	4311      	orrs	r1, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6952      	ldr	r2, [r2, #20]
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6992      	ldr	r2, [r2, #24]
 800522e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	69d2      	ldr	r2, [r2, #28]
 8005238:	4311      	orrs	r1, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6a12      	ldr	r2, [r2, #32]
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005244:	430a      	orrs	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6992      	ldr	r2, [r2, #24]
 8005250:	0c12      	lsrs	r2, r2, #16
 8005252:	f002 0104 	and.w	r1, r2, #4
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	69d2      	ldr	r2, [r2, #28]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e01d      	b.n	80052d4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fc fae5 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 f9fb 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e01d      	b.n	800532a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f815 	bl	8005332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f000 f9d0 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fc9a 	bl	8005c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <HAL_TIM_PWM_Start+0x74>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_PWM_Start+0x2c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <HAL_TIM_PWM_Start+0x78>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d101      	bne.n	8005378 <HAL_TIM_PWM_Start+0x30>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_TIM_PWM_Start+0x32>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800538c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b06      	cmp	r3, #6
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400

080053c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053da:	2302      	movs	r3, #2
 80053dc:	e0b4      	b.n	8005548 <HAL_TIM_PWM_ConfigChannel+0x184>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	f200 809f 	bhi.w	8005534 <HAL_TIM_PWM_ConfigChannel+0x170>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005535 	.word	0x08005535
 8005404:	08005535 	.word	0x08005535
 8005408:	08005535 	.word	0x08005535
 800540c:	08005471 	.word	0x08005471
 8005410:	08005535 	.word	0x08005535
 8005414:	08005535 	.word	0x08005535
 8005418:	08005535 	.word	0x08005535
 800541c:	080054b3 	.word	0x080054b3
 8005420:	08005535 	.word	0x08005535
 8005424:	08005535 	.word	0x08005535
 8005428:	08005535 	.word	0x08005535
 800542c:	080054f3 	.word	0x080054f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9e2 	bl	8005800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	6992      	ldr	r2, [r2, #24]
 8005446:	f042 0208 	orr.w	r2, r2, #8
 800544a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	6992      	ldr	r2, [r2, #24]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	6991      	ldr	r1, [r2, #24]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	6912      	ldr	r2, [r2, #16]
 800546a:	430a      	orrs	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
      break;
 800546e:	e062      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fa32 	bl	80058e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	6992      	ldr	r2, [r2, #24]
 8005486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	6992      	ldr	r2, [r2, #24]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	6991      	ldr	r1, [r2, #24]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	6912      	ldr	r2, [r2, #16]
 80054aa:	0212      	lsls	r2, r2, #8
 80054ac:	430a      	orrs	r2, r1
 80054ae:	619a      	str	r2, [r3, #24]
      break;
 80054b0:	e041      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fa87 	bl	80059cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	69d2      	ldr	r2, [r2, #28]
 80054c8:	f042 0208 	orr.w	r2, r2, #8
 80054cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	69d2      	ldr	r2, [r2, #28]
 80054d8:	f022 0204 	bic.w	r2, r2, #4
 80054dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	69d1      	ldr	r1, [r2, #28]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	6912      	ldr	r2, [r2, #16]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	61da      	str	r2, [r3, #28]
      break;
 80054f0:	e021      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fadb 	bl	8005ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	69d2      	ldr	r2, [r2, #28]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	69d2      	ldr	r2, [r2, #28]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	69d1      	ldr	r1, [r2, #28]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	6912      	ldr	r2, [r2, #16]
 800552c:	0212      	lsls	r2, r2, #8
 800552e:	430a      	orrs	r2, r1
 8005530:	61da      	str	r2, [r3, #28]
      break;
 8005532:	e000      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005534:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIM_ConfigClockSource+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e0a6      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x166>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d067      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0x120>
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d80b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x6c>
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d073      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x140>
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d802      	bhi.n	80055b2 <HAL_TIM_ConfigClockSource+0x62>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d06f      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055b0:	e078      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d06c      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x140>
 80055b6:	2b30      	cmp	r3, #48	; 0x30
 80055b8:	d06a      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80055ba:	e073      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055bc:	2b70      	cmp	r3, #112	; 0x70
 80055be:	d00d      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0x8c>
 80055c0:	2b70      	cmp	r3, #112	; 0x70
 80055c2:	d804      	bhi.n	80055ce <HAL_TIM_ConfigClockSource+0x7e>
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d033      	beq.n	8005630 <HAL_TIM_ConfigClockSource+0xe0>
 80055c8:	2b60      	cmp	r3, #96	; 0x60
 80055ca:	d041      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055cc:	e06a      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d066      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x152>
 80055d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d8:	d017      	beq.n	800560a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055da:	e063      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f000 fb32 	bl	8005c54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
      break;
 8005608:	e04c      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f000 fb1b 	bl	8005c54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	609a      	str	r2, [r3, #8]
      break;
 800562e:	e039      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	6859      	ldr	r1, [r3, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	461a      	mov	r2, r3
 800563e:	f000 fa8f 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2150      	movs	r1, #80	; 0x50
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fae8 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 800564e:	e029      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	461a      	mov	r2, r3
 800565e:	f000 faae 	bl	8005bbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2160      	movs	r1, #96	; 0x60
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fad8 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 800566e:	e019      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	461a      	mov	r2, r3
 800567e:	f000 fa6f 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2140      	movs	r1, #64	; 0x40
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fac8 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 800568e:	e009      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f000 fabf 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 80056a0:	e000      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80056a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a40      	ldr	r2, [pc, #256]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056de:	d00f      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3d      	ldr	r2, [pc, #244]	; (80057d8 <TIM_Base_SetConfig+0x118>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00b      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3c      	ldr	r2, [pc, #240]	; (80057dc <TIM_Base_SetConfig+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3b      	ldr	r2, [pc, #236]	; (80057e0 <TIM_Base_SetConfig+0x120>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3a      	ldr	r2, [pc, #232]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d108      	bne.n	8005712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d027      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <TIM_Base_SetConfig+0x118>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d023      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <TIM_Base_SetConfig+0x11c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <TIM_Base_SetConfig+0x120>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <TIM_Base_SetConfig+0x128>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a27      	ldr	r2, [pc, #156]	; (80057ec <TIM_Base_SetConfig+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <TIM_Base_SetConfig+0x130>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <TIM_Base_SetConfig+0x134>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <TIM_Base_SetConfig+0x138>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <TIM_Base_SetConfig+0x13c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0xf8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d103      	bne.n	80057c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	615a      	str	r2, [r3, #20]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800
 80057f4:	40001800 	.word	0x40001800
 80057f8:	40001c00 	.word	0x40001c00
 80057fc:	40002000 	.word	0x40002000

08005800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <TIM_OC1_SetConfig+0xd8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC1_SetConfig+0x64>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <TIM_OC1_SetConfig+0xdc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10c      	bne.n	800587e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0308 	bic.w	r3, r3, #8
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC1_SetConfig+0xd8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC1_SetConfig+0x8e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC1_SetConfig+0xdc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d111      	bne.n	80058b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40010400 	.word	0x40010400

080058e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0210 	bic.w	r2, r3, #16
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <TIM_OC2_SetConfig+0xe4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC2_SetConfig+0x68>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <TIM_OC2_SetConfig+0xe8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10d      	bne.n	8005964 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <TIM_OC2_SetConfig+0xe4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC2_SetConfig+0x94>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <TIM_OC2_SetConfig+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d113      	bne.n	800599c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800597a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40010400 	.word	0x40010400

080059cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a21      	ldr	r2, [pc, #132]	; (8005aac <TIM_OC3_SetConfig+0xe0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_OC3_SetConfig+0x66>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <TIM_OC3_SetConfig+0xe4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10d      	bne.n	8005a4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <TIM_OC3_SetConfig+0xe0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC3_SetConfig+0x92>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <TIM_OC3_SetConfig+0xe4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d113      	bne.n	8005a86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a12      	ldr	r2, [pc, #72]	; (8005b58 <TIM_OC4_SetConfig+0xa4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC4_SetConfig+0x68>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <TIM_OC4_SetConfig+0xa8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d109      	bne.n	8005b30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	019b      	lsls	r3, r3, #6
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010400 	.word	0x40010400

08005b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 030a 	bic.w	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0210 	bic.w	r2, r3, #16
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f043 0307 	orr.w	r3, r3, #7
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	609a      	str	r2, [r3, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e05a      	b.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a21      	ldr	r2, [pc, #132]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d01d      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1b      	ldr	r2, [pc, #108]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10c      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40001800 	.word	0x40001800

08005dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e03d      	b.n	8005e70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e03f      	b.n	8005f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fb fd70 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	68d2      	ldr	r2, [r2, #12]
 8005eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f9b1 	bl	8006228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	6912      	ldr	r2, [r2, #16]
 8005ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	6952      	ldr	r2, [r2, #20]
 8005ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	68d2      	ldr	r2, [r2, #12]
 8005ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b088      	sub	sp, #32
 8005f1a:	af02      	add	r7, sp, #8
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	f040 8082 	bne.w	800603c <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_UART_Transmit+0x2e>
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e07a      	b.n	800603e <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Transmit+0x40>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e073      	b.n	800603e <HAL_UART_Transmit+0x128>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2221      	movs	r2, #33	; 0x21
 8005f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f6c:	f7fb fdba 	bl	8001ae4 <HAL_GetTick>
 8005f70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f86:	e041      	b.n	800600c <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9e:	d121      	bne.n	8005fe4 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f8f1 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e041      	b.n	800603e <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	8812      	ldrh	r2, [r2, #0]
 8005fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fca:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d103      	bne.n	8005fdc <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	e017      	b.n	800600c <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	e013      	b.n	800600c <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2200      	movs	r2, #0
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f8cf 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e01f      	b.n	800603e <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1b8      	bne.n	8005f88 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	2140      	movs	r1, #64	; 0x40
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f8b6 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e006      	b.n	800603e <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b088      	sub	sp, #32
 800604a:	af02      	add	r7, sp, #8
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b20      	cmp	r3, #32
 8006064:	f040 8090 	bne.w	8006188 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_UART_Receive+0x2e>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e088      	b.n	800618a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_UART_Receive+0x40>
 8006082:	2302      	movs	r3, #2
 8006084:	e081      	b.n	800618a <HAL_UART_Receive+0x144>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2222      	movs	r2, #34	; 0x22
 8006098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800609c:	f7fb fd22 	bl	8001ae4 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060b6:	e05c      	b.n	8006172 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	d12b      	bne.n	8006128 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	2120      	movs	r1, #32
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f859 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04f      	b.n	800618a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10c      	bne.n	8006110 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	b29a      	uxth	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	3302      	adds	r3, #2
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	e030      	b.n	8006172 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	b29b      	uxth	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	b29a      	uxth	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	3301      	adds	r3, #1
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	e024      	b.n	8006172 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	2120      	movs	r1, #32
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f82d 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e023      	b.n	800618a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d108      	bne.n	800615c <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	60ba      	str	r2, [r7, #8]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	6852      	ldr	r2, [r2, #4]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e00a      	b.n	8006172 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	60ba      	str	r2, [r7, #8]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	6852      	ldr	r2, [r2, #4]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d19d      	bne.n	80060b8 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e000      	b.n	800618a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a2:	e02c      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d028      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80061b2:	f7fb fc97 	bl	8001ae4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d91d      	bls.n	80061fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	68d2      	ldr	r2, [r2, #12]
 80061cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	6952      	ldr	r2, [r2, #20]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e00f      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	401a      	ands	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	429a      	cmp	r2, r3
 800621a:	d0c3      	beq.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	b0a3      	sub	sp, #140	; 0x8c
 800622e:	af00      	add	r7, sp, #0
 8006230:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	431a      	orrs	r2, r3
 8006252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8006262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006264:	6819      	ldr	r1, [r3, #0]
 8006266:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8006270:	f022 020c 	bic.w	r2, r2, #12
 8006274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006278:	4313      	orrs	r3, r2
 800627a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800627c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800628a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	4313      	orrs	r3, r2
 8006290:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629a:	f040 8171 	bne.w	8006580 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800629e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4ab4      	ldr	r2, [pc, #720]	; (8006574 <UART_SetConfig+0x34c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d005      	beq.n	80062b4 <UART_SetConfig+0x8c>
 80062a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4ab2      	ldr	r2, [pc, #712]	; (8006578 <UART_SetConfig+0x350>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f040 80b1 	bne.w	8006416 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7fe fe32 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 80062b8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062be:	681d      	ldr	r5, [r3, #0]
 80062c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062c4:	4619      	mov	r1, r3
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4614      	mov	r4, r2
 80062ce:	18db      	adds	r3, r3, r3
 80062d0:	eb44 0404 	adc.w	r4, r4, r4
 80062d4:	185b      	adds	r3, r3, r1
 80062d6:	eb44 0402 	adc.w	r4, r4, r2
 80062da:	00e0      	lsls	r0, r4, #3
 80062dc:	6478      	str	r0, [r7, #68]	; 0x44
 80062de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80062e0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80062e4:	6478      	str	r0, [r7, #68]	; 0x44
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80062ee:	eb13 0801 	adds.w	r8, r3, r1
 80062f2:	eb44 0902 	adc.w	r9, r4, r2
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f04f 0400 	mov.w	r4, #0
 8006302:	18db      	adds	r3, r3, r3
 8006304:	eb44 0404 	adc.w	r4, r4, r4
 8006308:	461a      	mov	r2, r3
 800630a:	4623      	mov	r3, r4
 800630c:	f7fa fa1e 	bl	800074c <__aeabi_uldivmod>
 8006310:	4603      	mov	r3, r0
 8006312:	460c      	mov	r4, r1
 8006314:	461a      	mov	r2, r3
 8006316:	4b99      	ldr	r3, [pc, #612]	; (800657c <UART_SetConfig+0x354>)
 8006318:	fba3 2302 	umull	r2, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	011e      	lsls	r6, r3, #4
 8006320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006324:	4619      	mov	r1, r3
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	460b      	mov	r3, r1
 800632c:	4614      	mov	r4, r2
 800632e:	18db      	adds	r3, r3, r3
 8006330:	eb44 0404 	adc.w	r4, r4, r4
 8006334:	185b      	adds	r3, r3, r1
 8006336:	eb44 0402 	adc.w	r4, r4, r2
 800633a:	00e0      	lsls	r0, r4, #3
 800633c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800633e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006340:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8006344:	63f8      	str	r0, [r7, #60]	; 0x3c
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
 800634a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800634e:	eb13 0801 	adds.w	r8, r3, r1
 8006352:	eb44 0902 	adc.w	r9, r4, r2
 8006356:	4640      	mov	r0, r8
 8006358:	4649      	mov	r1, r9
 800635a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f04f 0400 	mov.w	r4, #0
 8006362:	18db      	adds	r3, r3, r3
 8006364:	eb44 0404 	adc.w	r4, r4, r4
 8006368:	461a      	mov	r2, r3
 800636a:	4623      	mov	r3, r4
 800636c:	f7fa f9ee 	bl	800074c <__aeabi_uldivmod>
 8006370:	4603      	mov	r3, r0
 8006372:	460c      	mov	r4, r1
 8006374:	461a      	mov	r2, r3
 8006376:	4b81      	ldr	r3, [pc, #516]	; (800657c <UART_SetConfig+0x354>)
 8006378:	fba3 1302 	umull	r1, r3, r3, r2
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	2164      	movs	r1, #100	; 0x64
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	3332      	adds	r3, #50	; 0x32
 800638a:	4a7c      	ldr	r2, [pc, #496]	; (800657c <UART_SetConfig+0x354>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006398:	441e      	add	r6, r3
 800639a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800639e:	4619      	mov	r1, r3
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4614      	mov	r4, r2
 80063a8:	18db      	adds	r3, r3, r3
 80063aa:	eb44 0404 	adc.w	r4, r4, r4
 80063ae:	185b      	adds	r3, r3, r1
 80063b0:	eb44 0402 	adc.w	r4, r4, r2
 80063b4:	00e0      	lsls	r0, r4, #3
 80063b6:	6378      	str	r0, [r7, #52]	; 0x34
 80063b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063ba:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80063be:	6378      	str	r0, [r7, #52]	; 0x34
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30
 80063c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80063c8:	eb13 0801 	adds.w	r8, r3, r1
 80063cc:	eb44 0902 	adc.w	r9, r4, r2
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f04f 0400 	mov.w	r4, #0
 80063dc:	18db      	adds	r3, r3, r3
 80063de:	eb44 0404 	adc.w	r4, r4, r4
 80063e2:	461a      	mov	r2, r3
 80063e4:	4623      	mov	r3, r4
 80063e6:	f7fa f9b1 	bl	800074c <__aeabi_uldivmod>
 80063ea:	4603      	mov	r3, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	461a      	mov	r2, r3
 80063f0:	4b62      	ldr	r3, [pc, #392]	; (800657c <UART_SetConfig+0x354>)
 80063f2:	fba3 1302 	umull	r1, r3, r3, r2
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2164      	movs	r1, #100	; 0x64
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	3332      	adds	r3, #50	; 0x32
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <UART_SetConfig+0x354>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	4433      	add	r3, r6
 8006412:	60ab      	str	r3, [r5, #8]
 8006414:	e240      	b.n	8006898 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006416:	f7fe fd6d 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 800641a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800641e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	673a      	str	r2, [r7, #112]	; 0x70
 8006424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006428:	4619      	mov	r1, r3
 800642a:	f04f 0200 	mov.w	r2, #0
 800642e:	460b      	mov	r3, r1
 8006430:	4614      	mov	r4, r2
 8006432:	18db      	adds	r3, r3, r3
 8006434:	eb44 0404 	adc.w	r4, r4, r4
 8006438:	185b      	adds	r3, r3, r1
 800643a:	eb44 0402 	adc.w	r4, r4, r2
 800643e:	00e0      	lsls	r0, r4, #3
 8006440:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006444:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8006448:	62f8      	str	r0, [r7, #44]	; 0x2c
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
 800644e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006452:	185d      	adds	r5, r3, r1
 8006454:	eb44 0602 	adc.w	r6, r4, r2
 8006458:	4628      	mov	r0, r5
 800645a:	4631      	mov	r1, r6
 800645c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	18db      	adds	r3, r3, r3
 8006466:	eb44 0404 	adc.w	r4, r4, r4
 800646a:	461a      	mov	r2, r3
 800646c:	4623      	mov	r3, r4
 800646e:	f7fa f96d 	bl	800074c <__aeabi_uldivmod>
 8006472:	4603      	mov	r3, r0
 8006474:	460c      	mov	r4, r1
 8006476:	461a      	mov	r2, r3
 8006478:	4b40      	ldr	r3, [pc, #256]	; (800657c <UART_SetConfig+0x354>)
 800647a:	fba3 2302 	umull	r2, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	011e      	lsls	r6, r3, #4
 8006482:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006486:	4619      	mov	r1, r3
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	460b      	mov	r3, r1
 800648e:	4614      	mov	r4, r2
 8006490:	18db      	adds	r3, r3, r3
 8006492:	eb44 0404 	adc.w	r4, r4, r4
 8006496:	185b      	adds	r3, r3, r1
 8006498:	eb44 0402 	adc.w	r4, r4, r2
 800649c:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80064a0:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80064a4:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80064a8:	4653      	mov	r3, sl
 80064aa:	465c      	mov	r4, fp
 80064ac:	eb13 0a01 	adds.w	sl, r3, r1
 80064b0:	eb44 0b02 	adc.w	fp, r4, r2
 80064b4:	4650      	mov	r0, sl
 80064b6:	4659      	mov	r1, fp
 80064b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f04f 0400 	mov.w	r4, #0
 80064c0:	18db      	adds	r3, r3, r3
 80064c2:	eb44 0404 	adc.w	r4, r4, r4
 80064c6:	461a      	mov	r2, r3
 80064c8:	4623      	mov	r3, r4
 80064ca:	f7fa f93f 	bl	800074c <__aeabi_uldivmod>
 80064ce:	4603      	mov	r3, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	461a      	mov	r2, r3
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <UART_SetConfig+0x354>)
 80064d6:	fba3 1302 	umull	r1, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2164      	movs	r1, #100	; 0x64
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a24      	ldr	r2, [pc, #144]	; (800657c <UART_SetConfig+0x354>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f6:	441e      	add	r6, r3
 80064f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064fc:	4619      	mov	r1, r3
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	460b      	mov	r3, r1
 8006504:	4614      	mov	r4, r2
 8006506:	18db      	adds	r3, r3, r3
 8006508:	eb44 0404 	adc.w	r4, r4, r4
 800650c:	185b      	adds	r3, r3, r1
 800650e:	eb44 0402 	adc.w	r4, r4, r2
 8006512:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8006516:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800651a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800651e:	4643      	mov	r3, r8
 8006520:	464c      	mov	r4, r9
 8006522:	eb13 0801 	adds.w	r8, r3, r1
 8006526:	eb44 0902 	adc.w	r9, r4, r2
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f04f 0400 	mov.w	r4, #0
 8006536:	18db      	adds	r3, r3, r3
 8006538:	eb44 0404 	adc.w	r4, r4, r4
 800653c:	461a      	mov	r2, r3
 800653e:	4623      	mov	r3, r4
 8006540:	f7fa f904 	bl	800074c <__aeabi_uldivmod>
 8006544:	4603      	mov	r3, r0
 8006546:	460c      	mov	r4, r1
 8006548:	461a      	mov	r2, r3
 800654a:	4b0c      	ldr	r3, [pc, #48]	; (800657c <UART_SetConfig+0x354>)
 800654c:	fba3 1302 	umull	r1, r3, r3, r2
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	2164      	movs	r1, #100	; 0x64
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	3332      	adds	r3, #50	; 0x32
 800655e:	4a07      	ldr	r2, [pc, #28]	; (800657c <UART_SetConfig+0x354>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	4433      	add	r3, r6
 800656c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800656e:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006570:	e192      	b.n	8006898 <UART_SetConfig+0x670>
 8006572:	bf00      	nop
 8006574:	40011000 	.word	0x40011000
 8006578:	40011400 	.word	0x40011400
 800657c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4bc1      	ldr	r3, [pc, #772]	; (800688c <UART_SetConfig+0x664>)
 8006586:	429a      	cmp	r2, r3
 8006588:	d005      	beq.n	8006596 <UART_SetConfig+0x36e>
 800658a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4bc0      	ldr	r3, [pc, #768]	; (8006890 <UART_SetConfig+0x668>)
 8006590:	429a      	cmp	r2, r3
 8006592:	f040 80bf 	bne.w	8006714 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006596:	f7fe fcc1 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 800659a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800659e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065a0:	681e      	ldr	r6, [r3, #0]
 80065a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065a6:	4619      	mov	r1, r3
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4614      	mov	r4, r2
 80065b0:	18db      	adds	r3, r3, r3
 80065b2:	eb44 0404 	adc.w	r4, r4, r4
 80065b6:	185b      	adds	r3, r3, r1
 80065b8:	eb44 0402 	adc.w	r4, r4, r2
 80065bc:	00e0      	lsls	r0, r4, #3
 80065be:	6278      	str	r0, [r7, #36]	; 0x24
 80065c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80065c6:	6278      	str	r0, [r7, #36]	; 0x24
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80065d0:	eb13 0801 	adds.w	r8, r3, r1
 80065d4:	eb44 0902 	adc.w	r9, r4, r2
 80065d8:	4640      	mov	r0, r8
 80065da:	4649      	mov	r1, r9
 80065dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f04f 0400 	mov.w	r4, #0
 80065e4:	00a2      	lsls	r2, r4, #2
 80065e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80065e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065ea:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80065ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065f8:	f7fa f8a8 	bl	800074c <__aeabi_uldivmod>
 80065fc:	4603      	mov	r3, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	461a      	mov	r2, r3
 8006602:	4ba4      	ldr	r3, [pc, #656]	; (8006894 <UART_SetConfig+0x66c>)
 8006604:	fba3 2302 	umull	r2, r3, r3, r2
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	011d      	lsls	r5, r3, #4
 800660c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006610:	4619      	mov	r1, r3
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	460b      	mov	r3, r1
 8006618:	4614      	mov	r4, r2
 800661a:	18db      	adds	r3, r3, r3
 800661c:	eb44 0404 	adc.w	r4, r4, r4
 8006620:	185b      	adds	r3, r3, r1
 8006622:	eb44 0402 	adc.w	r4, r4, r2
 8006626:	00e0      	lsls	r0, r4, #3
 8006628:	61f8      	str	r0, [r7, #28]
 800662a:	69f8      	ldr	r0, [r7, #28]
 800662c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8006630:	61f8      	str	r0, [r7, #28]
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800663a:	eb13 0801 	adds.w	r8, r3, r1
 800663e:	eb44 0902 	adc.w	r9, r4, r2
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f04f 0400 	mov.w	r4, #0
 800664e:	00a2      	lsls	r2, r4, #2
 8006650:	657a      	str	r2, [r7, #84]	; 0x54
 8006652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006654:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006658:	657a      	str	r2, [r7, #84]	; 0x54
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
 800665e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006662:	f7fa f873 	bl	800074c <__aeabi_uldivmod>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	461a      	mov	r2, r3
 800666c:	4b89      	ldr	r3, [pc, #548]	; (8006894 <UART_SetConfig+0x66c>)
 800666e:	fba3 1302 	umull	r1, r3, r3, r2
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2164      	movs	r1, #100	; 0x64
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	3332      	adds	r3, #50	; 0x32
 8006680:	4a84      	ldr	r2, [pc, #528]	; (8006894 <UART_SetConfig+0x66c>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668c:	441d      	add	r5, r3
 800668e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006692:	4619      	mov	r1, r3
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	460b      	mov	r3, r1
 800669a:	4614      	mov	r4, r2
 800669c:	18db      	adds	r3, r3, r3
 800669e:	eb44 0404 	adc.w	r4, r4, r4
 80066a2:	185b      	adds	r3, r3, r1
 80066a4:	eb44 0402 	adc.w	r4, r4, r2
 80066a8:	00e0      	lsls	r0, r4, #3
 80066aa:	6178      	str	r0, [r7, #20]
 80066ac:	6978      	ldr	r0, [r7, #20]
 80066ae:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80066b2:	6178      	str	r0, [r7, #20]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80066bc:	eb13 0801 	adds.w	r8, r3, r1
 80066c0:	eb44 0902 	adc.w	r9, r4, r2
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f04f 0400 	mov.w	r4, #0
 80066d0:	00a2      	lsls	r2, r4, #2
 80066d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80066d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066d6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80066da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066e4:	f7fa f832 	bl	800074c <__aeabi_uldivmod>
 80066e8:	4603      	mov	r3, r0
 80066ea:	460c      	mov	r4, r1
 80066ec:	461a      	mov	r2, r3
 80066ee:	4b69      	ldr	r3, [pc, #420]	; (8006894 <UART_SetConfig+0x66c>)
 80066f0:	fba3 1302 	umull	r1, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	2164      	movs	r1, #100	; 0x64
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	3332      	adds	r3, #50	; 0x32
 8006702:	4a64      	ldr	r2, [pc, #400]	; (8006894 <UART_SetConfig+0x66c>)
 8006704:	fba2 2303 	umull	r2, r3, r2, r3
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	442b      	add	r3, r5
 8006710:	60b3      	str	r3, [r6, #8]
 8006712:	e0c1      	b.n	8006898 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006714:	f7fe fbee 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8006718:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800671c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	65bb      	str	r3, [r7, #88]	; 0x58
 8006722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006726:	4619      	mov	r1, r3
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	460b      	mov	r3, r1
 800672e:	4614      	mov	r4, r2
 8006730:	18db      	adds	r3, r3, r3
 8006732:	eb44 0404 	adc.w	r4, r4, r4
 8006736:	185b      	adds	r3, r3, r1
 8006738:	eb44 0402 	adc.w	r4, r4, r2
 800673c:	00e6      	lsls	r6, r4, #3
 800673e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8006742:	00dd      	lsls	r5, r3, #3
 8006744:	462b      	mov	r3, r5
 8006746:	4634      	mov	r4, r6
 8006748:	185d      	adds	r5, r3, r1
 800674a:	eb44 0602 	adc.w	r6, r4, r2
 800674e:	4628      	mov	r0, r5
 8006750:	4631      	mov	r1, r6
 8006752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f04f 0400 	mov.w	r4, #0
 800675a:	00a5      	lsls	r5, r4, #2
 800675c:	677d      	str	r5, [r7, #116]	; 0x74
 800675e:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8006760:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8006764:	677d      	str	r5, [r7, #116]	; 0x74
 8006766:	009c      	lsls	r4, r3, #2
 8006768:	673c      	str	r4, [r7, #112]	; 0x70
 800676a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800676e:	f7f9 ffed 	bl	800074c <__aeabi_uldivmod>
 8006772:	4603      	mov	r3, r0
 8006774:	460c      	mov	r4, r1
 8006776:	461a      	mov	r2, r3
 8006778:	4b46      	ldr	r3, [pc, #280]	; (8006894 <UART_SetConfig+0x66c>)
 800677a:	fba3 1302 	umull	r1, r3, r3, r2
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	011d      	lsls	r5, r3, #4
 8006782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006786:	4619      	mov	r1, r3
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	460b      	mov	r3, r1
 800678e:	4614      	mov	r4, r2
 8006790:	18db      	adds	r3, r3, r3
 8006792:	eb44 0404 	adc.w	r4, r4, r4
 8006796:	185b      	adds	r3, r3, r1
 8006798:	eb44 0402 	adc.w	r4, r4, r2
 800679c:	00e0      	lsls	r0, r4, #3
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	00d8      	lsls	r0, r3, #3
 80067aa:	60b8      	str	r0, [r7, #8]
 80067ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80067b0:	eb13 0801 	adds.w	r8, r3, r1
 80067b4:	eb44 0902 	adc.w	r9, r4, r2
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	00a6      	lsls	r6, r4, #2
 80067c6:	66fe      	str	r6, [r7, #108]	; 0x6c
 80067c8:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80067ca:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80067ce:	66fe      	str	r6, [r7, #108]	; 0x6c
 80067d0:	009c      	lsls	r4, r3, #2
 80067d2:	66bc      	str	r4, [r7, #104]	; 0x68
 80067d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80067d8:	f7f9 ffb8 	bl	800074c <__aeabi_uldivmod>
 80067dc:	4603      	mov	r3, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	461a      	mov	r2, r3
 80067e2:	4b2c      	ldr	r3, [pc, #176]	; (8006894 <UART_SetConfig+0x66c>)
 80067e4:	fba3 1302 	umull	r1, r3, r3, r2
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	2164      	movs	r1, #100	; 0x64
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	3332      	adds	r3, #50	; 0x32
 80067f6:	4a27      	ldr	r2, [pc, #156]	; (8006894 <UART_SetConfig+0x66c>)
 80067f8:	fba2 1303 	umull	r1, r3, r2, r3
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006802:	441d      	add	r5, r3
 8006804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006808:	4619      	mov	r1, r3
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	460b      	mov	r3, r1
 8006810:	4614      	mov	r4, r2
 8006812:	18db      	adds	r3, r3, r3
 8006814:	eb44 0404 	adc.w	r4, r4, r4
 8006818:	185b      	adds	r3, r3, r1
 800681a:	eb44 0402 	adc.w	r4, r4, r2
 800681e:	00e0      	lsls	r0, r4, #3
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	00d8      	lsls	r0, r3, #3
 800682c:	6038      	str	r0, [r7, #0]
 800682e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8006832:	eb13 0801 	adds.w	r8, r3, r1
 8006836:	eb44 0902 	adc.w	r9, r4, r2
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f04f 0400 	mov.w	r4, #0
 8006846:	00a6      	lsls	r6, r4, #2
 8006848:	667e      	str	r6, [r7, #100]	; 0x64
 800684a:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800684c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8006850:	667e      	str	r6, [r7, #100]	; 0x64
 8006852:	009c      	lsls	r4, r3, #2
 8006854:	663c      	str	r4, [r7, #96]	; 0x60
 8006856:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800685a:	f7f9 ff77 	bl	800074c <__aeabi_uldivmod>
 800685e:	4603      	mov	r3, r0
 8006860:	460c      	mov	r4, r1
 8006862:	461a      	mov	r2, r3
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <UART_SetConfig+0x66c>)
 8006866:	fba3 1302 	umull	r1, r3, r3, r2
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2164      	movs	r1, #100	; 0x64
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	3332      	adds	r3, #50	; 0x32
 8006878:	4a06      	ldr	r2, [pc, #24]	; (8006894 <UART_SetConfig+0x66c>)
 800687a:	fba2 1303 	umull	r1, r3, r2, r3
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	442b      	add	r3, r5
 8006886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006888:	6093      	str	r3, [r2, #8]
}
 800688a:	e005      	b.n	8006898 <UART_SetConfig+0x670>
 800688c:	40011000 	.word	0x40011000
 8006890:	40011400 	.word	0x40011400
 8006894:	51eb851f 	.word	0x51eb851f
 8006898:	bf00      	nop
 800689a:	378c      	adds	r7, #140	; 0x8c
 800689c:	46bd      	mov	sp, r7
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a2:	bf00      	nop

080068a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068a4:	b084      	sub	sp, #16
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	f107 001c 	add.w	r0, r7, #28
 80068b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d122      	bne.n	8006902 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d105      	bne.n	80068f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f94a 	bl	8006b90 <USB_CoreReset>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e01a      	b.n	8006938 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f93e 	bl	8006b90 <USB_CoreReset>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
 800692a:	e005      	b.n	8006938 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	2b01      	cmp	r3, #1
 800693c:	d10b      	bne.n	8006956 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f043 0206 	orr.w	r2, r3, #6
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006962:	b004      	add	sp, #16
 8006964:	4770      	bx	lr

08006966 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f043 0201 	orr.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f023 0201 	bic.w	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d106      	bne.n	80069d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]
 80069d4:	e00b      	b.n	80069ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]
 80069e8:	e001      	b.n	80069ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e003      	b.n	80069f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80069ee:	2032      	movs	r0, #50	; 0x32
 80069f0:	f7fb f884 	bl	8001afc <HAL_Delay>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	019b      	lsls	r3, r3, #6
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <USB_FlushTxFifo+0x48>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e006      	b.n	8006a3a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d0f0      	beq.n	8006a1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	00030d40 	.word	0x00030d40

08006a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <USB_FlushRxFifo+0x40>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d901      	bls.n	8006a70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e006      	b.n	8006a7e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d0f0      	beq.n	8006a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	00030d40 	.word	0x00030d40

08006a90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b089      	sub	sp, #36	; 0x24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	71fb      	strb	r3, [r7, #7]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006aae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11a      	bne.n	8006aec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ab6:	88bb      	ldrh	r3, [r7, #4]
 8006ab8:	3303      	adds	r3, #3
 8006aba:	089b      	lsrs	r3, r3, #2
 8006abc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e00f      	b.n	8006ae4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	031a      	lsls	r2, r3, #12
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3304      	adds	r3, #4
 8006adc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3eb      	bcc.n	8006ac4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3724      	adds	r7, #36	; 0x24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b089      	sub	sp, #36	; 0x24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	4613      	mov	r3, r2
 8006b06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	3303      	adds	r3, #3
 8006b14:	089b      	lsrs	r3, r3, #2
 8006b16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	e00b      	b.n	8006b36 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d3ef      	bcc.n	8006b1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3724      	adds	r7, #36	; 0x24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4013      	ands	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b64:	68fb      	ldr	r3, [r7, #12]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
	...

08006b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <USB_CoreReset+0x64>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d901      	bls.n	8006bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e01b      	b.n	8006be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	daf2      	bge.n	8006b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <USB_CoreReset+0x64>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d901      	bls.n	8006bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e006      	b.n	8006be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d0f0      	beq.n	8006bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	00030d40 	.word	0x00030d40

08006bf8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	f107 001c 	add.w	r0, r7, #28
 8006c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c14:	461a      	mov	r2, r3
 8006c16:	2300      	movs	r3, #0
 8006c18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01a      	beq.n	8006c80 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d10b      	bne.n	8006c68 <USB_HostInit+0x70>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c56:	461a      	mov	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f043 0304 	orr.w	r3, r3, #4
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e016      	b.n	8006c96 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	e00a      	b.n	8006c96 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c86:	461a      	mov	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006c96:	2110      	movs	r1, #16
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff feb1 	bl	8006a00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fed4 	bl	8006a4c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e015      	b.n	8006cd6 <USB_HostInit+0xde>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	6a3a      	ldr	r2, [r7, #32]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d8e5      	bhi.n	8006caa <USB_HostInit+0xb2>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006cde:	2101      	movs	r1, #1
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8af 	bl	8006e44 <USB_DriveVbus>

  HAL_Delay(200U);
 8006ce6:	20c8      	movs	r0, #200	; 0xc8
 8006ce8:	f7fa ff08 	bl	8001afc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <USB_HostInit+0x126>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <USB_HostInit+0x168>)
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <USB_HostInit+0x16c>)
 8006d18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d1c:	e009      	b.n	8006d32 <USB_HostInit+0x13a>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2280      	movs	r2, #128	; 0x80
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <USB_HostInit+0x170>)
 8006d28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a0f      	ldr	r2, [pc, #60]	; (8006d6c <USB_HostInit+0x174>)
 8006d2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <USB_HostInit+0x14c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f043 0210 	orr.w	r2, r3, #16
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <USB_HostInit+0x178>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d5c:	b004      	add	sp, #16
 8006d5e:	4770      	bx	lr
 8006d60:	01000200 	.word	0x01000200
 8006d64:	00e00300 	.word	0x00e00300
 8006d68:	00600080 	.word	0x00600080
 8006d6c:	004000e0 	.word	0x004000e0
 8006d70:	a3200008 	.word	0xa3200008

08006d74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f023 0303 	bic.w	r3, r3, #3
 8006d98:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da0:	4619      	mov	r1, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d107      	bne.n	8006dca <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006dc6:	6053      	str	r3, [r2, #4]
 8006dc8:	e009      	b.n	8006dde <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d106      	bne.n	8006dde <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ddc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e14:	461a      	mov	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e1e:	2064      	movs	r0, #100	; 0x64
 8006e20:	f7fa fe6c 	bl	8001afc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006e34:	200a      	movs	r0, #10
 8006e36:	f7fa fe61 	bl	8001afc <HAL_Delay>

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <USB_DriveVbus+0x46>
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d107      	bne.n	8006e8a <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e80:	461a      	mov	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e88:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e94:	d10a      	bne.n	8006eac <USB_DriveVbus+0x68>
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eaa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	0c5b      	lsrs	r3, r3, #17
 8006ed8:	f003 0303 	and.w	r3, r3, #3
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	b29b      	uxth	r3, r3
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	4608      	mov	r0, r1
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	70fb      	strb	r3, [r7, #3]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70bb      	strb	r3, [r7, #2]
 8006f22:	4613      	mov	r3, r2
 8006f24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	f200 8084 	bhi.w	8007054 <USB_HC_Init+0x148>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <USB_HC_Init+0x48>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08007015 	.word	0x08007015
 8006f5c:	08006f65 	.word	0x08006f65
 8006f60:	08006fd5 	.word	0x08006fd5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f70:	461a      	mov	r2, r3
 8006f72:	f240 439d 	movw	r3, #1181	; 0x49d
 8006f76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da11      	bge.n	8006fa4 <USB_HC_Init+0x98>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa0:	60cb      	str	r3, [r1, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006fa2:	e05a      	b.n	800705a <USB_HC_Init+0x14e>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d054      	beq.n	800705a <USB_HC_Init+0x14e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fd0:	60cb      	str	r3, [r1, #12]
      break;
 8006fd2:	e042      	b.n	800705a <USB_HC_Init+0x14e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006fe6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fe8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da36      	bge.n	800705e <USB_HC_Init+0x152>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007010:	60cb      	str	r3, [r1, #12]
      }

      break;
 8007012:	e024      	b.n	800705e <USB_HC_Init+0x152>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007020:	461a      	mov	r2, r3
 8007022:	f240 2325 	movw	r3, #549	; 0x225
 8007026:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007028:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800702c:	2b00      	cmp	r3, #0
 800702e:	da18      	bge.n	8007062 <USB_HC_Init+0x156>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4413      	add	r3, r2
 8007038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703c:	4619      	mov	r1, r3
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007050:	60cb      	str	r3, [r1, #12]
      }
      break;
 8007052:	e006      	b.n	8007062 <USB_HC_Init+0x156>

    default:
      ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
      break;
 8007058:	e004      	b.n	8007064 <USB_HC_Init+0x158>
      break;
 800705a:	bf00      	nop
 800705c:	e002      	b.n	8007064 <USB_HC_Init+0x158>
      break;
 800705e:	bf00      	nop
 8007060:	e000      	b.n	8007064 <USB_HC_Init+0x158>
      break;
 8007062:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800706a:	4618      	mov	r0, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007072:	699a      	ldr	r2, [r3, #24]
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	2101      	movs	r1, #1
 800707c:	fa01 f303 	lsl.w	r3, r1, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007090:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007094:	2b00      	cmp	r3, #0
 8007096:	da03      	bge.n	80070a0 <USB_HC_Init+0x194>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e001      	b.n	80070a4 <USB_HC_Init+0x198>
  }
  else
  {
    HCcharEpDir = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80070a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d103      	bne.n	80070b4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80070ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e001      	b.n	80070b8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c4:	4619      	mov	r1, r3
 80070c6:	787b      	ldrb	r3, [r7, #1]
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070ce:	78bb      	ldrb	r3, [r7, #2]
 80070d0:	02db      	lsls	r3, r3, #11
 80070d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80070dc:	049b      	lsls	r3, r3, #18
 80070de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070f4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80070f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d110      	bne.n	8007120 <USB_HC_Init+0x214>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710a:	4619      	mov	r1, r3
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4413      	add	r3, r2
 8007114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800711e:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop

08007130 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800714c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d029      	beq.n	80071ae <USB_HC_StartXfer+0x7e>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	791b      	ldrb	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d125      	bne.n	80071ae <USB_HC_StartXfer+0x7e>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <USB_HC_StartXfer+0x50>
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	795b      	ldrb	r3, [r3, #5]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d107      	bne.n	8007180 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	4619      	mov	r1, r3
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fa3e 	bl	80075f8 <USB_DoPing>
      return HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	e118      	b.n	80073b2 <USB_HC_StartXfer+0x282>
    }
    else if (dma == 1U)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d113      	bne.n	80071ae <USB_HC_StartXfer+0x7e>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	4619      	mov	r1, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80071a6:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d018      	beq.n	80071e8 <USB_HC_StartXfer+0xb8>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	8912      	ldrh	r2, [r2, #8]
 80071be:	4413      	add	r3, r2
 80071c0:	3b01      	subs	r3, #1
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	8912      	ldrh	r2, [r2, #8]
 80071c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80071cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071ce:	8b7b      	ldrh	r3, [r7, #26]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d90b      	bls.n	80071ec <USB_HC_StartXfer+0xbc>
    {
      num_packets = max_hc_pkt_count;
 80071d4:	8b7b      	ldrh	r3, [r7, #26]
 80071d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80071d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	8912      	ldrh	r2, [r2, #8]
 80071de:	fb02 f203 	mul.w	r2, r2, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	611a      	str	r2, [r3, #16]
 80071e6:	e001      	b.n	80071ec <USB_HC_StartXfer+0xbc>
    }
  }
  else
  {
    num_packets = 1U;
 80071e8:	2301      	movs	r3, #1
 80071ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	78db      	ldrb	r3, [r3, #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <USB_HC_StartXfer+0xd2>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80071f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	8912      	ldrh	r2, [r2, #8]
 80071fa:	fb02 f203 	mul.w	r2, r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720e:	4618      	mov	r0, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007218:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800721a:	04d9      	lsls	r1, r3, #19
 800721c:	4b67      	ldr	r3, [pc, #412]	; (80073bc <USB_HC_StartXfer+0x28c>)
 800721e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007220:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	7a9b      	ldrb	r3, [r3, #10]
 8007226:	075b      	lsls	r3, r3, #29
 8007228:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800722c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800722e:	6103      	str	r3, [r0, #16]

  if (dma != 0U)
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <USB_HC_StartXfer+0x11a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007242:	461a      	mov	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	bf0c      	ite	eq
 800725a:	2301      	moveq	r3, #1
 800725c:	2300      	movne	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	4413      	add	r3, r2
 800726a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726e:	4619      	mov	r1, r3
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	4413      	add	r3, r2
 8007278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007282:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	4413      	add	r3, r2
 800728c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007290:	4619      	mov	r1, r3
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	4413      	add	r3, r2
 800729a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	7e7b      	ldrb	r3, [r7, #25]
 80072a2:	075b      	lsls	r3, r3, #29
 80072a4:	4313      	orrs	r3, r2
 80072a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a42      	ldr	r2, [pc, #264]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072b8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072ba:	4b41      	ldr	r3, [pc, #260]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072c2:	4a3f      	ldr	r2, [pc, #252]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072c4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	78db      	ldrb	r3, [r3, #3]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d006      	beq.n	80072dc <USB_HC_StartXfer+0x1ac>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072ce:	4b3c      	ldr	r3, [pc, #240]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d6:	4a3a      	ldr	r2, [pc, #232]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e005      	b.n	80072e8 <USB_HC_StartXfer+0x1b8>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072dc:	4b38      	ldr	r3, [pc, #224]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072e4:	4a36      	ldr	r2, [pc, #216]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072e6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072e8:	4b35      	ldr	r3, [pc, #212]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f0:	4a33      	ldr	r2, [pc, #204]	; (80073c0 <USB_HC_StartXfer+0x290>)
 80072f2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007300:	461a      	mov	r2, r3
 8007302:	4b2f      	ldr	r3, [pc, #188]	; (80073c0 <USB_HC_StartXfer+0x290>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <USB_HC_StartXfer+0x1e2>
  {
    return HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	e04f      	b.n	80073b2 <USB_HC_StartXfer+0x282>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	78db      	ldrb	r3, [r3, #3]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d14a      	bne.n	80073b0 <USB_HC_StartXfer+0x280>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d046      	beq.n	80073b0 <USB_HC_StartXfer+0x280>
  {
    switch (hc->ep_type)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	79db      	ldrb	r3, [r3, #7]
 8007326:	2b03      	cmp	r3, #3
 8007328:	d830      	bhi.n	800738c <USB_HC_StartXfer+0x25c>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <USB_HC_StartXfer+0x200>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007341 	.word	0x08007341
 8007334:	08007365 	.word	0x08007365
 8007338:	08007341 	.word	0x08007341
 800733c:	08007365 	.word	0x08007365
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	3303      	adds	r3, #3
 8007346:	089b      	lsrs	r3, r3, #2
 8007348:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800734a:	8afa      	ldrh	r2, [r7, #22]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	b29b      	uxth	r3, r3
 8007352:	429a      	cmp	r2, r3
 8007354:	d91c      	bls.n	8007390 <USB_HC_StartXfer+0x260>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	619a      	str	r2, [r3, #24]
        }
        break;
 8007362:	e015      	b.n	8007390 <USB_HC_StartXfer+0x260>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	3303      	adds	r3, #3
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800736e:	8afa      	ldrh	r2, [r7, #22]
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	b29b      	uxth	r3, r3
 800737a:	429a      	cmp	r2, r3
 800737c:	d90a      	bls.n	8007394 <USB_HC_StartXfer+0x264>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	619a      	str	r2, [r3, #24]
        }
        break;
 800738a:	e003      	b.n	8007394 <USB_HC_StartXfer+0x264>

      default:
        break;
 800738c:	bf00      	nop
 800738e:	e002      	b.n	8007396 <USB_HC_StartXfer+0x266>
        break;
 8007390:	bf00      	nop
 8007392:	e000      	b.n	8007396 <USB_HC_StartXfer+0x266>
        break;
 8007394:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	68d9      	ldr	r1, [r3, #12]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	785a      	ldrb	r2, [r3, #1]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	b298      	uxth	r0, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4603      	mov	r3, r0
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff fb70 	bl	8006a90 <USB_WritePacket>
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	1ff80000 	.word	0x1ff80000
 80073c0:	200000b0 	.word	0x200000b0

080073c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	b29b      	uxth	r3, r3
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4413      	add	r3, r2
 8007406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	0c9b      	lsrs	r3, r3, #18
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <USB_HC_Halt+0x3a>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d171      	bne.n	8007504 <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	4619      	mov	r1, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007440:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d146      	bne.n	80074dc <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745a:	4619      	mov	r1, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4413      	add	r3, r2
 8007464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800746e:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	4413      	add	r3, r2
 8007478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747c:	4619      	mov	r1, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4413      	add	r3, r2
 8007486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007490:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749e:	4619      	mov	r1, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074b2:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	3301      	adds	r3, #1
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074c0:	d81e      	bhi.n	8007500 <USB_HC_Halt+0x11a>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d8:	d0ec      	beq.n	80074b4 <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074da:	e086      	b.n	80075ea <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e8:	4619      	mov	r1, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074fc:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074fe:	e074      	b.n	80075ea <USB_HC_Halt+0x204>
          break;
 8007500:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007502:	e072      	b.n	80075ea <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4413      	add	r3, r2
 800750c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007510:	4619      	mov	r1, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007524:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d146      	bne.n	80075c4 <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007542:	4619      	mov	r1, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007556:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	4413      	add	r3, r2
 8007560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007564:	4619      	mov	r1, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	4413      	add	r3, r2
 800756e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007578:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4413      	add	r3, r2
 8007582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007586:	4619      	mov	r1, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	4413      	add	r3, r2
 8007590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800759a:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	3301      	adds	r3, #1
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a8:	d81e      	bhi.n	80075e8 <USB_HC_Halt+0x202>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c0:	d0ec      	beq.n	800759c <USB_HC_Halt+0x1b6>
 80075c2:	e012      	b.n	80075ea <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d0:	4619      	mov	r1, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075e4:	600b      	str	r3, [r1, #0]
 80075e6:	e000      	b.n	80075ea <USB_HC_Halt+0x204>
          break;
 80075e8:	bf00      	nop
    }
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800760c:	2301      	movs	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4413      	add	r3, r2
 8007618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761c:	4619      	mov	r1, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	04da      	lsls	r2, r3, #19
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <USB_DoPing+0x74>)
 8007624:	4013      	ands	r3, r2
 8007626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800762a:	610b      	str	r3, [r1, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	4413      	add	r3, r2
 8007634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007642:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800764a:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007658:	461a      	mov	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	1ff80000 	.word	0x1ff80000

08007670 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff f981 	bl	8006988 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007686:	2110      	movs	r1, #16
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff f9b9 	bl	8006a00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff f9dc 	bl	8006a4c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007694:	2300      	movs	r3, #0
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	e01f      	b.n	80076da <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076c0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ce:	461a      	mov	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3301      	adds	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b0f      	cmp	r3, #15
 80076de:	d9dc      	bls.n	800769a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	e034      	b.n	8007750 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007704:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800770c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	461a      	mov	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3301      	adds	r3, #1
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800772c:	d80c      	bhi.n	8007748 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007744:	d0ec      	beq.n	8007720 <USB_StopHost+0xb0>
 8007746:	e000      	b.n	800774a <USB_StopHost+0xda>
        break;
 8007748:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3301      	adds	r3, #1
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d9c7      	bls.n	80076e6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775c:	461a      	mov	r2, r3
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f04f 32ff 	mov.w	r2, #4294967295
 800776a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff f8fa 	bl	8006966 <USB_EnableGlobalInt>

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800777c:	b590      	push	{r4, r7, lr}
 800777e:	b089      	sub	sp, #36	; 0x24
 8007780:	af04      	add	r7, sp, #16
 8007782:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007784:	2301      	movs	r3, #1
 8007786:	2202      	movs	r2, #2
 8007788:	2102      	movs	r1, #2
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fc68 	bl	8008060 <USBH_FindInterface>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2bff      	cmp	r3, #255	; 0xff
 8007798:	d002      	beq.n	80077a0 <USBH_CDC_InterfaceInit+0x24>
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d901      	bls.n	80077a4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077a0:	2302      	movs	r3, #2
 80077a2:	e13d      	b.n	8007a20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fc3d 	bl	8008028 <USBH_SelectInterface>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80077b8:	2302      	movs	r3, #2
 80077ba:	e131      	b.n	8007a20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80077c2:	2050      	movs	r0, #80	; 0x50
 80077c4:	f002 fa30 	bl	8009c28 <malloc>
 80077c8:	4603      	mov	r3, r0
 80077ca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80077dc:	2302      	movs	r3, #2
 80077de:	e11f      	b.n	8007a20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80077e0:	2250      	movs	r2, #80	; 0x50
 80077e2:	2100      	movs	r1, #0
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	f002 fa2f 	bl	8009c48 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	211a      	movs	r1, #26
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da15      	bge.n	800782e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	211a      	movs	r1, #26
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	211a      	movs	r1, #26
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	4413      	add	r3, r2
 8007824:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 fe36 	bl	80094a6 <USBH_AllocPipe>
 800783a:	4603      	mov	r3, r0
 800783c:	461a      	mov	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	7819      	ldrb	r1, [r3, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	7858      	ldrb	r0, [r3, #1]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	8952      	ldrh	r2, [r2, #10]
 800785a:	9202      	str	r2, [sp, #8]
 800785c:	2203      	movs	r2, #3
 800785e:	9201      	str	r2, [sp, #4]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4623      	mov	r3, r4
 8007864:	4602      	mov	r2, r0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fdee 	bl	8009448 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2200      	movs	r2, #0
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f002 f8fd 	bl	8009a74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800787a:	2300      	movs	r3, #0
 800787c:	2200      	movs	r2, #0
 800787e:	210a      	movs	r1, #10
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fbed 	bl	8008060 <USBH_FindInterface>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2bff      	cmp	r3, #255	; 0xff
 800788e:	d002      	beq.n	8007896 <USBH_CDC_InterfaceInit+0x11a>
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d901      	bls.n	800789a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007896:	2302      	movs	r3, #2
 8007898:	e0c2      	b.n	8007a20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	211a      	movs	r1, #26
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da16      	bge.n	80078e0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	211a      	movs	r1, #26
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	211a      	movs	r1, #26
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078d8:	881a      	ldrh	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	835a      	strh	r2, [r3, #26]
 80078de:	e015      	b.n	800790c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	211a      	movs	r1, #26
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	211a      	movs	r1, #26
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	4413      	add	r3, r2
 8007902:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007906:	881a      	ldrh	r2, [r3, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	211a      	movs	r1, #26
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	f203 3356 	addw	r3, r3, #854	; 0x356
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b25b      	sxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	da16      	bge.n	8007952 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	211a      	movs	r1, #26
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	211a      	movs	r1, #26
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	4413      	add	r3, r2
 8007946:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800794a:	881a      	ldrh	r2, [r3, #0]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	835a      	strh	r2, [r3, #26]
 8007950:	e015      	b.n	800797e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	211a      	movs	r1, #26
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	4413      	add	r3, r2
 800795e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007962:	781a      	ldrb	r2, [r3, #0]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	211a      	movs	r1, #26
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007978:	881a      	ldrh	r2, [r3, #0]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	7b9b      	ldrb	r3, [r3, #14]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 fd8e 	bl	80094a6 <USBH_AllocPipe>
 800798a:	4603      	mov	r3, r0
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	7bdb      	ldrb	r3, [r3, #15]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fd84 	bl	80094a6 <USBH_AllocPipe>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	7b59      	ldrb	r1, [r3, #13]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	7b98      	ldrb	r0, [r3, #14]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	8b12      	ldrh	r2, [r2, #24]
 80079be:	9202      	str	r2, [sp, #8]
 80079c0:	2202      	movs	r2, #2
 80079c2:	9201      	str	r2, [sp, #4]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4623      	mov	r3, r4
 80079c8:	4602      	mov	r2, r0
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 fd3c 	bl	8009448 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	7b19      	ldrb	r1, [r3, #12]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	7bd8      	ldrb	r0, [r3, #15]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	8b52      	ldrh	r2, [r2, #26]
 80079e8:	9202      	str	r2, [sp, #8]
 80079ea:	2202      	movs	r2, #2
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4623      	mov	r3, r4
 80079f2:	4602      	mov	r2, r0
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 fd27 	bl	8009448 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	7b5b      	ldrb	r3, [r3, #13]
 8007a06:	2200      	movs	r2, #0
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f002 f832 	bl	8009a74 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	7b1b      	ldrb	r3, [r3, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f002 f82b 	bl	8009a74 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd90      	pop	{r4, r7, pc}

08007a28 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00e      	beq.n	8007a60 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fd1c 	bl	8009486 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fd47 	bl	80094e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	7b1b      	ldrb	r3, [r3, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	7b1b      	ldrb	r3, [r3, #12]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 fd09 	bl	8009486 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	7b1b      	ldrb	r3, [r3, #12]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 fd34 	bl	80094e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	7b5b      	ldrb	r3, [r3, #13]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	7b5b      	ldrb	r3, [r3, #13]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fcf6 	bl	8009486 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	7b5b      	ldrb	r3, [r3, #13]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fd21 	bl	80094e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f002 f8b9 	bl	8009c38 <free>
    phost->pActiveClass->pData = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007acc:	2200      	movs	r2, #0
 8007ace:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3340      	adds	r3, #64	; 0x40
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8b1 	bl	8007c5a <GetLineCoding>
 8007af8:	4603      	mov	r3, r0
 8007afa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b08:	2102      	movs	r1, #2
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d877      	bhi.n	8007c2c <USBH_CDC_Process+0x114>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <USBH_CDC_Process+0x2c>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b59 	.word	0x08007b59
 8007b48:	08007b5f 	.word	0x08007b5f
 8007b4c:	08007b8f 	.word	0x08007b8f
 8007b50:	08007c03 	.word	0x08007c03
 8007b54:	08007c11 	.word	0x08007c11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	e06d      	b.n	8007c3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f897 	bl	8007c98 <SetLineCoding>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b7c:	e058      	b.n	8007c30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d055      	beq.n	8007c30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2204      	movs	r2, #4
 8007b88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b8c:	e050      	b.n	8007c30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3340      	adds	r3, #64	; 0x40
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f860 	bl	8007c5a <GetLineCoding>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d126      	bne.n	8007bf2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb6:	791b      	ldrb	r3, [r3, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d13b      	bne.n	8007c34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d133      	bne.n	8007c34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d12b      	bne.n	8007c34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d124      	bne.n	8007c34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f95a 	bl	8007ea4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bf0:	e020      	b.n	8007c34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d01d      	beq.n	8007c34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c00:	e018      	b.n	8007c34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f867 	bl	8007cd6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8dc 	bl	8007dc6 <CDC_ProcessReception>
      break;
 8007c0e:	e014      	b.n	8007c3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 ffe5 	bl	8008be2 <USBH_ClrFeature>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007c2a:	e005      	b.n	8007c38 <USBH_CDC_Process+0x120>

    default:
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <USBH_CDC_Process+0x122>
      break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <USBH_CDC_Process+0x122>
      break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <USBH_CDC_Process+0x122>
      break;
 8007c38:	bf00      	nop

  }

  return status;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	22a1      	movs	r2, #161	; 0xa1
 8007c68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2221      	movs	r2, #33	; 0x21
 8007c6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2207      	movs	r2, #7
 8007c80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2207      	movs	r2, #7
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 f98a 	bl	8008fa2 <USBH_CtlReq>
 8007c8e:	4603      	mov	r3, r0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2221      	movs	r2, #33	; 0x21
 8007ca6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2207      	movs	r2, #7
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 f96b 	bl	8008fa2 <USBH_CtlReq>
 8007ccc:	4603      	mov	r3, r0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af02      	add	r7, sp, #8
 8007cdc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d002      	beq.n	8007cfc <CDC_ProcessTransmission+0x26>
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d025      	beq.n	8007d46 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007cfa:	e060      	b.n	8007dbe <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	8b12      	ldrh	r2, [r2, #24]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d90c      	bls.n	8007d22 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	69d9      	ldr	r1, [r3, #28]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8b1a      	ldrh	r2, [r3, #24]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	7b58      	ldrb	r0, [r3, #13]
 8007d14:	2301      	movs	r3, #1
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	4603      	mov	r3, r0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fb51 	bl	80093c2 <USBH_BulkSendData>
 8007d20:	e00c      	b.n	8007d3c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	7b58      	ldrb	r0, [r3, #13]
 8007d30:	2301      	movs	r3, #1
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4603      	mov	r3, r0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fb43 	bl	80093c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d44:	e03b      	b.n	8007dbe <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	7b5b      	ldrb	r3, [r3, #13]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 fe67 	bl	8009a20 <USBH_LL_GetURBState>
 8007d52:	4603      	mov	r3, r0
 8007d54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d128      	bne.n	8007dae <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	8b12      	ldrh	r2, [r2, #24]
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d90e      	bls.n	8007d86 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	8b12      	ldrh	r2, [r2, #24]
 8007d70:	1a9a      	subs	r2, r3, r2
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	8b12      	ldrh	r2, [r2, #24]
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	61da      	str	r2, [r3, #28]
 8007d84:	e002      	b.n	8007d8c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d9c:	e00e      	b.n	8007dbc <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f868 	bl	8007e7c <USBH_CDC_TransmitCallback>
      break;
 8007dac:	e006      	b.n	8007dbc <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d103      	bne.n	8007dbc <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007dbc:	bf00      	nop
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d002      	beq.n	8007dec <CDC_ProcessReception+0x26>
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d00e      	beq.n	8007e08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007dea:	e043      	b.n	8007e74 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	6a19      	ldr	r1, [r3, #32]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	8b5a      	ldrh	r2, [r3, #26]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	7b1b      	ldrb	r3, [r3, #12]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 fb07 	bl	800940c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2204      	movs	r2, #4
 8007e02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e06:	e035      	b.n	8007e74 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	7b1b      	ldrb	r3, [r3, #12]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fe06 	bl	8009a20 <USBH_LL_GetURBState>
 8007e14:	4603      	mov	r3, r0
 8007e16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007e18:	7cfb      	ldrb	r3, [r7, #19]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d129      	bne.n	8007e72 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	7b1b      	ldrb	r3, [r3, #12]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fd69 	bl	80098fc <USBH_LL_GetLastXferSize>
 8007e2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d016      	beq.n	8007e64 <CDC_ProcessReception+0x9e>
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	8b5b      	ldrh	r3, [r3, #26]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d210      	bcs.n	8007e64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1ad2      	subs	r2, r2, r3
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a1a      	ldr	r2, [r3, #32]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	441a      	add	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e62:	e006      	b.n	8007e72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f80f 	bl	8007e90 <USBH_CDC_ReceiveCallback>
      break;
 8007e72:	bf00      	nop
  }
}
 8007e74:	bf00      	nop
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e029      	b.n	8007f24 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	79fa      	ldrb	r2, [r7, #7]
 8007ed4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f81f 	bl	8007f2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fc3b 	bl	8009798 <USBH_LL_Init>

  return USBH_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	e009      	b.n	8007f52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	33e0      	adds	r3, #224	; 0xe0
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	2200      	movs	r2, #0
 8007f4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b0e      	cmp	r3, #14
 8007f56:	d9f2      	bls.n	8007f3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e009      	b.n	8007f72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f78:	d3f1      	bcc.n	8007f5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2240      	movs	r2, #64	; 0x40
 8007f9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d016      	beq.n	8008016 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10e      	bne.n	8008010 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ff8:	1c59      	adds	r1, r3, #1
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	33de      	adds	r3, #222	; 0xde
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	e004      	b.n	800801a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008010:	2302      	movs	r3, #2
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e001      	b.n	800801a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008016:	2302      	movs	r3, #2
 8008018:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	429a      	cmp	r2, r3
 8008042:	d204      	bcs.n	800804e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800804c:	e001      	b.n	8008052 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800804e:	2302      	movs	r3, #2
 8008050:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	4603      	mov	r3, r0
 8008070:	70fb      	strb	r3, [r7, #3]
 8008072:	460b      	mov	r3, r1
 8008074:	70bb      	strb	r3, [r7, #2]
 8008076:	4613      	mov	r3, r2
 8008078:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008088:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800808a:	e025      	b.n	80080d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	221a      	movs	r2, #26
 8008090:	fb02 f303 	mul.w	r3, r2, r3
 8008094:	3308      	adds	r3, #8
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	3302      	adds	r3, #2
 800809c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	795b      	ldrb	r3, [r3, #5]
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d002      	beq.n	80080ae <USBH_FindInterface+0x4e>
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	2bff      	cmp	r3, #255	; 0xff
 80080ac:	d111      	bne.n	80080d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080b2:	78ba      	ldrb	r2, [r7, #2]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d002      	beq.n	80080be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080b8:	78bb      	ldrb	r3, [r7, #2]
 80080ba:	2bff      	cmp	r3, #255	; 0xff
 80080bc:	d109      	bne.n	80080d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080c2:	787a      	ldrb	r2, [r7, #1]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d002      	beq.n	80080ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80080c8:	787b      	ldrb	r3, [r7, #1]
 80080ca:	2bff      	cmp	r3, #255	; 0xff
 80080cc:	d101      	bne.n	80080d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	e006      	b.n	80080e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	3301      	adds	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d9d6      	bls.n	800808c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80080de:	23ff      	movs	r3, #255	; 0xff
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 fb8b 	bl	8009810 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80080fa:	2101      	movs	r1, #1
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fca2 	bl	8009a46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af04      	add	r7, sp, #16
 8008112:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008114:	2302      	movs	r3, #2
 8008116:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	d102      	bne.n	800812e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2203      	movs	r2, #3
 800812c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b0b      	cmp	r3, #11
 8008136:	f200 81b3 	bhi.w	80084a0 <USBH_Process+0x394>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBH_Process+0x34>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008171 	.word	0x08008171
 8008144:	080081a3 	.word	0x080081a3
 8008148:	0800820b 	.word	0x0800820b
 800814c:	0800843b 	.word	0x0800843b
 8008150:	080084a1 	.word	0x080084a1
 8008154:	080082af 	.word	0x080082af
 8008158:	080083e1 	.word	0x080083e1
 800815c:	080082e5 	.word	0x080082e5
 8008160:	08008305 	.word	0x08008305
 8008164:	08008325 	.word	0x08008325
 8008168:	08008353 	.word	0x08008353
 800816c:	08008423 	.word	0x08008423
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8193 	beq.w	80084a4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008184:	20c8      	movs	r0, #200	; 0xc8
 8008186:	f001 fca8 	bl	8009ada <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fb9b 	bl	80098c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081a0:	e180      	b.n	80084a4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d107      	bne.n	80081bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081ba:	e182      	b.n	80084c2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081c6:	d914      	bls.n	80081f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d903      	bls.n	80081ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	220d      	movs	r2, #13
 80081e6:	701a      	strb	r2, [r3, #0]
      break;
 80081e8:	e16b      	b.n	80084c2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
      break;
 80081f0:	e167      	b.n	80084c2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081f8:	f103 020a 	add.w	r2, r3, #10
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008202:	200a      	movs	r0, #10
 8008204:	f001 fc69 	bl	8009ada <USBH_Delay>
      break;
 8008208:	e15b      	b.n	80084c2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800821a:	2104      	movs	r1, #4
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008220:	2064      	movs	r0, #100	; 0x64
 8008222:	f001 fc5a 	bl	8009ada <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fb28 	bl	800987c <USBH_LL_GetSpeed>
 800822c:	4603      	mov	r3, r0
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2205      	movs	r2, #5
 800823a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 f931 	bl	80094a6 <USBH_AllocPipe>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800824c:	2180      	movs	r1, #128	; 0x80
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 f929 	bl	80094a6 <USBH_AllocPipe>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7919      	ldrb	r1, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008270:	b292      	uxth	r2, r2
 8008272:	9202      	str	r2, [sp, #8]
 8008274:	2200      	movs	r2, #0
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4603      	mov	r3, r0
 800827c:	2280      	movs	r2, #128	; 0x80
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 f8e2 	bl	8009448 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	7959      	ldrb	r1, [r3, #5]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008298:	b292      	uxth	r2, r2
 800829a:	9202      	str	r2, [sp, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	9201      	str	r2, [sp, #4]
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	4603      	mov	r3, r0
 80082a4:	2200      	movs	r2, #0
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 f8ce 	bl	8009448 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082ac:	e109      	b.n	80084c2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f90c 	bl	80084cc <USBH_HandleEnum>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 80f3 	bne.w	80084a8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d103      	bne.n	80082dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2208      	movs	r2, #8
 80082d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80082da:	e0e5      	b.n	80084a8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2207      	movs	r2, #7
 80082e0:	701a      	strb	r2, [r3, #0]
      break;
 80082e2:	e0e1      	b.n	80084a8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80de 	beq.w	80084ac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082f6:	2101      	movs	r1, #1
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2208      	movs	r2, #8
 8008300:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008302:	e0d3      	b.n	80084ac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800830a:	b29b      	uxth	r3, r3
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fc20 	bl	8008b54 <USBH_SetCfg>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 80ca 	bne.w	80084b0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2209      	movs	r2, #9
 8008320:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008322:	e0c5      	b.n	80084b0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008332:	2101      	movs	r1, #1
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fc30 	bl	8008b9a <USBH_SetFeature>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 80b9 	bne.w	80084b4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	220a      	movs	r2, #10
 8008346:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008348:	e0b4      	b.n	80084b4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	220a      	movs	r2, #10
 800834e:	701a      	strb	r2, [r3, #0]
      break;
 8008350:	e0b0      	b.n	80084b4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 80ad 	beq.w	80084b8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
 800836a:	e016      	b.n	800839a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800836c:	7bfa      	ldrb	r2, [r7, #15]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	32de      	adds	r2, #222	; 0xde
 8008372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008376:	791a      	ldrb	r2, [r3, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800837e:	429a      	cmp	r2, r3
 8008380:	d108      	bne.n	8008394 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008382:	7bfa      	ldrb	r2, [r7, #15]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	32de      	adds	r2, #222	; 0xde
 8008388:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008392:	e005      	b.n	80083a0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	3301      	adds	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0e5      	beq.n	800836c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d016      	beq.n	80083d8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2206      	movs	r2, #6
 80083c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083c8:	2103      	movs	r1, #3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083ce:	e073      	b.n	80084b8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220d      	movs	r2, #13
 80083d4:	701a      	strb	r2, [r3, #0]
      break;
 80083d6:	e06f      	b.n	80084b8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	220d      	movs	r2, #13
 80083dc:	701a      	strb	r2, [r3, #0]
      break;
 80083de:	e06b      	b.n	80084b8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d017      	beq.n	800841a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	220b      	movs	r2, #11
 8008406:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008408:	e058      	b.n	80084bc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d154      	bne.n	80084bc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	220d      	movs	r2, #13
 8008416:	701a      	strb	r2, [r3, #0]
      break;
 8008418:	e050      	b.n	80084bc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	220d      	movs	r2, #13
 800841e:	701a      	strb	r2, [r3, #0]
      break;
 8008420:	e04c      	b.n	80084bc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d049      	beq.n	80084c0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
      }
      break;
 8008438:	e042      	b.n	80084c0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fd72 	bl	8007f2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008476:	2105      	movs	r1, #5
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d107      	bne.n	8008498 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fe2b 	bl	80080ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008496:	e014      	b.n	80084c2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f9b9 	bl	8009810 <USBH_LL_Start>
      break;
 800849e:	e010      	b.n	80084c2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80084a0:	bf00      	nop
 80084a2:	e00e      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084a4:	bf00      	nop
 80084a6:	e00c      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084a8:	bf00      	nop
 80084aa:	e00a      	b.n	80084c2 <USBH_Process+0x3b6>
    break;
 80084ac:	bf00      	nop
 80084ae:	e008      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084b0:	bf00      	nop
 80084b2:	e006      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084b4:	bf00      	nop
 80084b6:	e004      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084b8:	bf00      	nop
 80084ba:	e002      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084bc:	bf00      	nop
 80084be:	e000      	b.n	80084c2 <USBH_Process+0x3b6>
      break;
 80084c0:	bf00      	nop
  }
  return USBH_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af04      	add	r7, sp, #16
 80084d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084d8:	2301      	movs	r3, #1
 80084da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b07      	cmp	r3, #7
 80084e2:	f200 81c1 	bhi.w	8008868 <USBH_HandleEnum+0x39c>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <USBH_HandleEnum+0x20>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	0800850d 	.word	0x0800850d
 80084f0:	080085cb 	.word	0x080085cb
 80084f4:	08008635 	.word	0x08008635
 80084f8:	080086c3 	.word	0x080086c3
 80084fc:	0800872d 	.word	0x0800872d
 8008500:	0800879d 	.word	0x0800879d
 8008504:	080087e3 	.word	0x080087e3
 8008508:	08008829 	.word	0x08008829
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800850c:	2108      	movs	r1, #8
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa50 	bl	80089b4 <USBH_Get_DevDesc>
 8008514:	4603      	mov	r3, r0
 8008516:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d130      	bne.n	8008580 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7919      	ldrb	r1, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008542:	b292      	uxth	r2, r2
 8008544:	9202      	str	r2, [sp, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	9201      	str	r2, [sp, #4]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	4603      	mov	r3, r0
 800854e:	2280      	movs	r2, #128	; 0x80
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 ff79 	bl	8009448 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7959      	ldrb	r1, [r3, #5]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800856a:	b292      	uxth	r2, r2
 800856c:	9202      	str	r2, [sp, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	9201      	str	r2, [sp, #4]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4603      	mov	r3, r0
 8008576:	2200      	movs	r2, #0
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 ff65 	bl	8009448 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800857e:	e175      	b.n	800886c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b03      	cmp	r3, #3
 8008584:	f040 8172 	bne.w	800886c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800858e:	3301      	adds	r3, #1
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d903      	bls.n	80085aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	220d      	movs	r2, #13
 80085a6:	701a      	strb	r2, [r3, #0]
      break;
 80085a8:	e160      	b.n	800886c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	795b      	ldrb	r3, [r3, #5]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 ff99 	bl	80094e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	791b      	ldrb	r3, [r3, #4]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 ff93 	bl	80094e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	701a      	strb	r2, [r3, #0]
      break;
 80085c8:	e150      	b.n	800886c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80085ca:	2112      	movs	r1, #18
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9f1 	bl	80089b4 <USBH_Get_DevDesc>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085e2:	e145      	b.n	8008870 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	f040 8142 	bne.w	8008870 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085f2:	3301      	adds	r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008602:	2b03      	cmp	r3, #3
 8008604:	d903      	bls.n	800860e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220d      	movs	r2, #13
 800860a:	701a      	strb	r2, [r3, #0]
      break;
 800860c:	e130      	b.n	8008870 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 ff67 	bl	80094e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	791b      	ldrb	r3, [r3, #4]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 ff61 	bl	80094e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
      break;
 8008632:	e11d      	b.n	8008870 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008634:	2101      	movs	r1, #1
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa68 	bl	8008b0c <USBH_SetAddress>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d132      	bne.n	80086ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008646:	2002      	movs	r0, #2
 8008648:	f001 fa47 	bl	8009ada <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2203      	movs	r2, #3
 8008658:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7919      	ldrb	r1, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800866e:	b292      	uxth	r2, r2
 8008670:	9202      	str	r2, [sp, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	9201      	str	r2, [sp, #4]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4603      	mov	r3, r0
 800867a:	2280      	movs	r2, #128	; 0x80
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fee3 	bl	8009448 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7959      	ldrb	r1, [r3, #5]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008696:	b292      	uxth	r2, r2
 8008698:	9202      	str	r2, [sp, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	9201      	str	r2, [sp, #4]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4603      	mov	r3, r0
 80086a2:	2200      	movs	r2, #0
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fecf 	bl	8009448 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086aa:	e0e3      	b.n	8008874 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f040 80e0 	bne.w	8008874 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	220d      	movs	r2, #13
 80086b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	705a      	strb	r2, [r3, #1]
      break;
 80086c0:	e0d8      	b.n	8008874 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80086c2:	2109      	movs	r1, #9
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f99d 	bl	8008a04 <USBH_Get_CfgDesc>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2204      	movs	r2, #4
 80086d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086da:	e0cd      	b.n	8008878 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	f040 80ca 	bne.w	8008878 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086ea:	3301      	adds	r3, #1
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d903      	bls.n	8008706 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220d      	movs	r2, #13
 8008702:	701a      	strb	r2, [r3, #0]
      break;
 8008704:	e0b8      	b.n	8008878 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	795b      	ldrb	r3, [r3, #5]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 feeb 	bl	80094e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	791b      	ldrb	r3, [r3, #4]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fee5 	bl	80094e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
      break;
 800872a:	e0a5      	b.n	8008878 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f965 	bl	8008a04 <USBH_Get_CfgDesc>
 800873a:	4603      	mov	r3, r0
 800873c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2205      	movs	r2, #5
 8008748:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800874a:	e097      	b.n	800887c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b03      	cmp	r3, #3
 8008750:	f040 8094 	bne.w	800887c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800875a:	3301      	adds	r3, #1
 800875c:	b2da      	uxtb	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800876a:	2b03      	cmp	r3, #3
 800876c:	d903      	bls.n	8008776 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	220d      	movs	r2, #13
 8008772:	701a      	strb	r2, [r3, #0]
      break;
 8008774:	e082      	b.n	800887c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	795b      	ldrb	r3, [r3, #5]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 feb3 	bl	80094e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	791b      	ldrb	r3, [r3, #4]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fead 	bl	80094e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
      break;
 800879a:	e06f      	b.n	800887c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d019      	beq.n	80087da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087b2:	23ff      	movs	r3, #255	; 0xff
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f949 	bl	8008a4c <USBH_Get_StringDesc>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d103      	bne.n	80087cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2206      	movs	r2, #6
 80087c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80087ca:	e059      	b.n	8008880 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d156      	bne.n	8008880 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2206      	movs	r2, #6
 80087d6:	705a      	strb	r2, [r3, #1]
      break;
 80087d8:	e052      	b.n	8008880 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2206      	movs	r2, #6
 80087de:	705a      	strb	r2, [r3, #1]
      break;
 80087e0:	e04e      	b.n	8008880 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d019      	beq.n	8008820 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087f8:	23ff      	movs	r3, #255	; 0xff
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f926 	bl	8008a4c <USBH_Get_StringDesc>
 8008800:	4603      	mov	r3, r0
 8008802:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2207      	movs	r2, #7
 800880e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008810:	e038      	b.n	8008884 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d135      	bne.n	8008884 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2207      	movs	r2, #7
 800881c:	705a      	strb	r2, [r3, #1]
      break;
 800881e:	e031      	b.n	8008884 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2207      	movs	r2, #7
 8008824:	705a      	strb	r2, [r3, #1]
      break;
 8008826:	e02d      	b.n	8008884 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800882e:	2b00      	cmp	r3, #0
 8008830:	d017      	beq.n	8008862 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800883e:	23ff      	movs	r3, #255	; 0xff
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f903 	bl	8008a4c <USBH_Get_StringDesc>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008854:	e018      	b.n	8008888 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b03      	cmp	r3, #3
 800885a:	d115      	bne.n	8008888 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
      break;
 8008860:	e012      	b.n	8008888 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
      break;
 8008866:	e00f      	b.n	8008888 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008868:	bf00      	nop
 800886a:	e00e      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 800886c:	bf00      	nop
 800886e:	e00c      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 8008870:	bf00      	nop
 8008872:	e00a      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 8008874:	bf00      	nop
 8008876:	e008      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 8008878:	bf00      	nop
 800887a:	e006      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 800887c:	bf00      	nop
 800887e:	e004      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 8008880:	bf00      	nop
 8008882:	e002      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 8008884:	bf00      	nop
 8008886:	e000      	b.n	800888a <USBH_HandleEnum+0x3be>
      break;
 8008888:	bf00      	nop
  }
  return Status;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f804 	bl	80088d6 <USBH_HandleSof>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b0b      	cmp	r3, #11
 80088e6:	d10a      	bne.n	80088fe <USBH_HandleSof+0x28>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
  }
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008916:	bf00      	nop
}
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008932:	bf00      	nop
}
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 ff5a 	bl	8009846 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	791b      	ldrb	r3, [r3, #4]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fda5 	bl	80094e8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	795b      	ldrb	r3, [r3, #5]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fd9f 	bl	80094e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089d2:	2100      	movs	r1, #0
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f864 	bl	8008aa2 <USBH_GetDescriptor>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	b292      	uxth	r2, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	f000 f918 	bl	8008c2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	331c      	adds	r3, #28
 8008a14:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a16:	887b      	ldrh	r3, [r7, #2]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f83d 	bl	8008aa2 <USBH_GetDescriptor>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	72fb      	strb	r3, [r7, #11]
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d107      	bne.n	8008a42 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a38:	887a      	ldrh	r2, [r7, #2]
 8008a3a:	68f9      	ldr	r1, [r7, #12]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f964 	bl	8008d0a <USBH_ParseCfgDesc>
  }

  return status;
 8008a42:	7afb      	ldrb	r3, [r7, #11]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	607a      	str	r2, [r7, #4]
 8008a56:	461a      	mov	r2, r3
 8008a58:	460b      	mov	r3, r1
 8008a5a:	72fb      	strb	r3, [r7, #11]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a68:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008a70:	893b      	ldrh	r3, [r7, #8]
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	460b      	mov	r3, r1
 8008a76:	2100      	movs	r1, #0
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f812 	bl	8008aa2 <USBH_GetDescriptor>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d107      	bne.n	8008a98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a8e:	893a      	ldrh	r2, [r7, #8]
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fa37 	bl	8008f06 <USBH_ParseStringDesc>
  }

  return status;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	607b      	str	r3, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	72fb      	strb	r3, [r7, #11]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	789b      	ldrb	r3, [r3, #2]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d11c      	bne.n	8008af6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2206      	movs	r2, #6
 8008acc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	893a      	ldrh	r2, [r7, #8]
 8008ad2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008ad4:	893b      	ldrh	r3, [r7, #8]
 8008ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ade:	d104      	bne.n	8008aea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f240 4209 	movw	r2, #1033	; 0x409
 8008ae6:	829a      	strh	r2, [r3, #20]
 8008ae8:	e002      	b.n	8008af0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8b3a      	ldrh	r2, [r7, #24]
 8008af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008af6:	8b3b      	ldrh	r3, [r7, #24]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fa50 	bl	8008fa2 <USBH_CtlReq>
 8008b02:	4603      	mov	r3, r0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	789b      	ldrb	r3, [r3, #2]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10f      	bne.n	8008b40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fa2c 	bl	8008fa2 <USBH_CtlReq>
 8008b4a:	4603      	mov	r3, r0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	789b      	ldrb	r3, [r3, #2]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10e      	bne.n	8008b86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2209      	movs	r2, #9
 8008b72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	887a      	ldrh	r2, [r7, #2]
 8008b78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008b86:	2200      	movs	r2, #0
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa09 	bl	8008fa2 <USBH_CtlReq>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	789b      	ldrb	r3, [r3, #2]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d10f      	bne.n	8008bce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9e5 	bl	8008fa2 <USBH_CtlReq>
 8008bd8:	4603      	mov	r3, r0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	789b      	ldrb	r3, [r3, #2]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d10f      	bne.n	8008c16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f9c1 	bl	8008fa2 <USBH_CtlReq>
 8008c20:	4603      	mov	r3, r0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	4613      	mov	r3, r2
 8008c36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	785a      	ldrb	r2, [r3, #1]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	3303      	adds	r3, #3
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	791a      	ldrb	r2, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	795a      	ldrb	r2, [r3, #5]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	799a      	ldrb	r2, [r3, #6]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	79da      	ldrb	r2, [r3, #7]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008c84:	88fb      	ldrh	r3, [r7, #6]
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d939      	bls.n	8008cfe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	3309      	adds	r3, #9
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	330a      	adds	r3, #10
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	330b      	adds	r3, #11
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	021b      	lsls	r3, r3, #8
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	330d      	adds	r3, #13
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	7b9a      	ldrb	r2, [r3, #14]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	7bda      	ldrb	r2, [r3, #15]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	7c1a      	ldrb	r2, [r3, #16]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	7c5a      	ldrb	r2, [r3, #17]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	745a      	strb	r2, [r3, #17]
  }
}
 8008cfe:	bf00      	nop
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b08a      	sub	sp, #40	; 0x28
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	4613      	mov	r3, r2
 8008d16:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	785a      	ldrb	r2, [r3, #1]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	3302      	adds	r3, #2
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	3303      	adds	r3, #3
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	4313      	orrs	r3, r2
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	791a      	ldrb	r2, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	795a      	ldrb	r2, [r3, #5]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	799a      	ldrb	r2, [r3, #6]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	79da      	ldrb	r2, [r3, #7]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	7a1a      	ldrb	r2, [r3, #8]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d95f      	bls.n	8008e46 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008d86:	2309      	movs	r3, #9
 8008d88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d8e:	e051      	b.n	8008e34 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d90:	f107 0316 	add.w	r3, r7, #22
 8008d94:	4619      	mov	r1, r3
 8008d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d98:	f000 f8e8 	bl	8008f6c <USBH_GetNextDesc>
 8008d9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d146      	bne.n	8008e34 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008daa:	221a      	movs	r2, #26
 8008dac:	fb02 f303 	mul.w	r3, r2, r3
 8008db0:	3308      	adds	r3, #8
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4413      	add	r3, r2
 8008db6:	3302      	adds	r3, #2
 8008db8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dbc:	69f8      	ldr	r0, [r7, #28]
 8008dbe:	f000 f846 	bl	8008e4e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008dcc:	e022      	b.n	8008e14 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dce:	f107 0316 	add.w	r3, r7, #22
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dd6:	f000 f8c9 	bl	8008f6c <USBH_GetNextDesc>
 8008dda:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	d117      	bne.n	8008e14 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008de8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008dec:	3201      	adds	r2, #1
 8008dee:	00d2      	lsls	r2, r2, #3
 8008df0:	211a      	movs	r1, #26
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	4413      	add	r3, r2
 8008df8:	3308      	adds	r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3304      	adds	r3, #4
 8008e00:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e04:	69b8      	ldr	r0, [r7, #24]
 8008e06:	f000 f851 	bl	8008eac <USBH_ParseEPDesc>
            ep_ix++;
 8008e0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008e0e:	3301      	adds	r3, #1
 8008e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	791b      	ldrb	r3, [r3, #4]
 8008e18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d204      	bcs.n	8008e2a <USBH_ParseCfgDesc+0x120>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	885a      	ldrh	r2, [r3, #2]
 8008e24:	8afb      	ldrh	r3, [r7, #22]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d8d1      	bhi.n	8008dce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e2e:	3301      	adds	r3, #1
 8008e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d804      	bhi.n	8008e46 <USBH_ParseCfgDesc+0x13c>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	885a      	ldrh	r2, [r3, #2]
 8008e40:	8afb      	ldrh	r3, [r7, #22]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d8a4      	bhi.n	8008d90 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008e46:	bf00      	nop
 8008e48:	3728      	adds	r7, #40	; 0x28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	785a      	ldrb	r2, [r3, #1]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	789a      	ldrb	r2, [r3, #2]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	78da      	ldrb	r2, [r3, #3]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	791a      	ldrb	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	795a      	ldrb	r2, [r3, #5]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	799a      	ldrb	r2, [r3, #6]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	79da      	ldrb	r2, [r3, #7]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	7a1a      	ldrb	r2, [r3, #8]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	721a      	strb	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785a      	ldrb	r2, [r3, #1]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	789a      	ldrb	r2, [r3, #2]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	78da      	ldrb	r2, [r3, #3]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	3305      	adds	r3, #5
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	799a      	ldrb	r2, [r3, #6]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	719a      	strb	r2, [r3, #6]
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b087      	sub	sp, #28
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	4613      	mov	r3, r2
 8008f12:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d120      	bne.n	8008f60 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	1e9a      	subs	r2, r3, #2
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	4293      	cmp	r3, r2
 8008f28:	bf28      	it	cs
 8008f2a:	4613      	movcs	r3, r2
 8008f2c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3302      	adds	r3, #2
 8008f32:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f34:	2300      	movs	r3, #0
 8008f36:	82fb      	strh	r3, [r7, #22]
 8008f38:	e00b      	b.n	8008f52 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f3a:	8afb      	ldrh	r3, [r7, #22]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f4c:	8afb      	ldrh	r3, [r7, #22]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	82fb      	strh	r3, [r7, #22]
 8008f52:	8afa      	ldrh	r2, [r7, #22]
 8008f54:	8abb      	ldrh	r3, [r7, #20]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d3ef      	bcc.n	8008f3a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
  }
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	881a      	ldrh	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4413      	add	r3, r2
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f94:	68fb      	ldr	r3, [r7, #12]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	4613      	mov	r3, r2
 8008fae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	789b      	ldrb	r3, [r3, #2]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d002      	beq.n	8008fc2 <USBH_CtlReq+0x20>
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d00f      	beq.n	8008fe0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008fc0:	e027      	b.n	8009012 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008fde:	e018      	b.n	8009012 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f81b 	bl	800901c <USBH_HandleControl>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <USBH_CtlReq+0x54>
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d106      	bne.n	8009004 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	761a      	strb	r2, [r3, #24]
      break;
 8009002:	e005      	b.n	8009010 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d102      	bne.n	8009010 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	709a      	strb	r2, [r3, #2]
      break;
 8009010:	bf00      	nop
  }
  return status;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009024:	2301      	movs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009028:	2300      	movs	r3, #0
 800902a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7e1b      	ldrb	r3, [r3, #24]
 8009030:	3b01      	subs	r3, #1
 8009032:	2b0a      	cmp	r3, #10
 8009034:	f200 8158 	bhi.w	80092e8 <USBH_HandleControl+0x2cc>
 8009038:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <USBH_HandleControl+0x24>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	0800906d 	.word	0x0800906d
 8009044:	08009087 	.word	0x08009087
 8009048:	080090f1 	.word	0x080090f1
 800904c:	08009117 	.word	0x08009117
 8009050:	0800914f 	.word	0x0800914f
 8009054:	0800917b 	.word	0x0800917b
 8009058:	080091cd 	.word	0x080091cd
 800905c:	080091ef 	.word	0x080091ef
 8009060:	0800922b 	.word	0x0800922b
 8009064:	08009253 	.word	0x08009253
 8009068:	08009291 	.word	0x08009291
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f103 0110 	add.w	r1, r3, #16
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	795b      	ldrb	r3, [r3, #5]
 8009076:	461a      	mov	r2, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f945 	bl	8009308 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	761a      	strb	r2, [r3, #24]
      break;
 8009084:	e13b      	b.n	80092fe <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	795b      	ldrb	r3, [r3, #5]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fcc7 	bl	8009a20 <USBH_LL_GetURBState>
 8009092:	4603      	mov	r3, r0
 8009094:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d11e      	bne.n	80090da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7c1b      	ldrb	r3, [r3, #16]
 80090a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8adb      	ldrh	r3, [r3, #22]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80090ae:	7b7b      	ldrb	r3, [r7, #13]
 80090b0:	2b80      	cmp	r3, #128	; 0x80
 80090b2:	d103      	bne.n	80090bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2203      	movs	r2, #3
 80090b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80090ba:	e117      	b.n	80092ec <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2205      	movs	r2, #5
 80090c0:	761a      	strb	r2, [r3, #24]
      break;
 80090c2:	e113      	b.n	80092ec <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80090c4:	7b7b      	ldrb	r3, [r7, #13]
 80090c6:	2b80      	cmp	r3, #128	; 0x80
 80090c8:	d103      	bne.n	80090d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2209      	movs	r2, #9
 80090ce:	761a      	strb	r2, [r3, #24]
      break;
 80090d0:	e10c      	b.n	80092ec <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2207      	movs	r2, #7
 80090d6:	761a      	strb	r2, [r3, #24]
      break;
 80090d8:	e108      	b.n	80092ec <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d003      	beq.n	80090e8 <USBH_HandleControl+0xcc>
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	f040 8102 	bne.w	80092ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	220b      	movs	r2, #11
 80090ec:	761a      	strb	r2, [r3, #24]
      break;
 80090ee:	e0fd      	b.n	80092ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6899      	ldr	r1, [r3, #8]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	899a      	ldrh	r2, [r3, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	791b      	ldrb	r3, [r3, #4]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f93c 	bl	8009386 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2204      	movs	r2, #4
 8009112:	761a      	strb	r2, [r3, #24]
      break;
 8009114:	e0f3      	b.n	80092fe <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fc7f 	bl	8009a20 <USBH_LL_GetURBState>
 8009122:	4603      	mov	r3, r0
 8009124:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d102      	bne.n	8009132 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2209      	movs	r2, #9
 8009130:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b05      	cmp	r3, #5
 8009136:	d102      	bne.n	800913e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009138:	2303      	movs	r3, #3
 800913a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800913c:	e0d8      	b.n	80092f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b04      	cmp	r3, #4
 8009142:	f040 80d5 	bne.w	80092f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	220b      	movs	r2, #11
 800914a:	761a      	strb	r2, [r3, #24]
      break;
 800914c:	e0d0      	b.n	80092f0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6899      	ldr	r1, [r3, #8]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	899a      	ldrh	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7958      	ldrb	r0, [r3, #5]
 800915a:	2301      	movs	r3, #1
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	4603      	mov	r3, r0
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f8eb 	bl	800933c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800916c:	b29a      	uxth	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2206      	movs	r2, #6
 8009176:	761a      	strb	r2, [r3, #24]
      break;
 8009178:	e0c1      	b.n	80092fe <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	795b      	ldrb	r3, [r3, #5]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fc4d 	bl	8009a20 <USBH_LL_GetURBState>
 8009186:	4603      	mov	r3, r0
 8009188:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d103      	bne.n	8009198 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2207      	movs	r2, #7
 8009194:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009196:	e0ad      	b.n	80092f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b05      	cmp	r3, #5
 800919c:	d105      	bne.n	80091aa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	220c      	movs	r2, #12
 80091a2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80091a4:	2303      	movs	r3, #3
 80091a6:	73fb      	strb	r3, [r7, #15]
      break;
 80091a8:	e0a4      	b.n	80092f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d103      	bne.n	80091b8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2205      	movs	r2, #5
 80091b4:	761a      	strb	r2, [r3, #24]
      break;
 80091b6:	e09d      	b.n	80092f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	f040 809a 	bne.w	80092f4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	220b      	movs	r2, #11
 80091c4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	73fb      	strb	r3, [r7, #15]
      break;
 80091ca:	e093      	b.n	80092f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	791b      	ldrb	r3, [r3, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f8d6 	bl	8009386 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2208      	movs	r2, #8
 80091ea:	761a      	strb	r2, [r3, #24]

      break;
 80091ec:	e087      	b.n	80092fe <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	791b      	ldrb	r3, [r3, #4]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fc13 	bl	8009a20 <USBH_LL_GetURBState>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d105      	bne.n	8009210 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	220d      	movs	r2, #13
 8009208:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800920e:	e073      	b.n	80092f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	2b04      	cmp	r3, #4
 8009214:	d103      	bne.n	800921e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220b      	movs	r2, #11
 800921a:	761a      	strb	r2, [r3, #24]
      break;
 800921c:	e06c      	b.n	80092f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	2b05      	cmp	r3, #5
 8009222:	d169      	bne.n	80092f8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009224:	2303      	movs	r3, #3
 8009226:	73fb      	strb	r3, [r7, #15]
      break;
 8009228:	e066      	b.n	80092f8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	795a      	ldrb	r2, [r3, #5]
 800922e:	2301      	movs	r3, #1
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4613      	mov	r3, r2
 8009234:	2200      	movs	r2, #0
 8009236:	2100      	movs	r1, #0
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f87f 	bl	800933c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	220a      	movs	r2, #10
 800924e:	761a      	strb	r2, [r3, #24]
      break;
 8009250:	e055      	b.n	80092fe <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	795b      	ldrb	r3, [r3, #5]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fbe1 	bl	8009a20 <USBH_LL_GetURBState>
 800925e:	4603      	mov	r3, r0
 8009260:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d105      	bne.n	8009274 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	220d      	movs	r2, #13
 8009270:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009272:	e043      	b.n	80092fc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d103      	bne.n	8009282 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2209      	movs	r2, #9
 800927e:	761a      	strb	r2, [r3, #24]
      break;
 8009280:	e03c      	b.n	80092fc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b04      	cmp	r3, #4
 8009286:	d139      	bne.n	80092fc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	220b      	movs	r2, #11
 800928c:	761a      	strb	r2, [r3, #24]
      break;
 800928e:	e035      	b.n	80092fc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7e5b      	ldrb	r3, [r3, #25]
 8009294:	3301      	adds	r3, #1
 8009296:	b2da      	uxtb	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	765a      	strb	r2, [r3, #25]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7e5b      	ldrb	r3, [r3, #25]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d806      	bhi.n	80092b2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092b0:	e025      	b.n	80092fe <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092b8:	2106      	movs	r1, #6
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	795b      	ldrb	r3, [r3, #5]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f90c 	bl	80094e8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	791b      	ldrb	r3, [r3, #4]
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f906 	bl	80094e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092e2:	2302      	movs	r3, #2
 80092e4:	73fb      	strb	r3, [r7, #15]
      break;
 80092e6:	e00a      	b.n	80092fe <USBH_HandleControl+0x2e2>

    default:
      break;
 80092e8:	bf00      	nop
 80092ea:	e008      	b.n	80092fe <USBH_HandleControl+0x2e2>
      break;
 80092ec:	bf00      	nop
 80092ee:	e006      	b.n	80092fe <USBH_HandleControl+0x2e2>
      break;
 80092f0:	bf00      	nop
 80092f2:	e004      	b.n	80092fe <USBH_HandleControl+0x2e2>
      break;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <USBH_HandleControl+0x2e2>
      break;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <USBH_HandleControl+0x2e2>
      break;
 80092fc:	bf00      	nop
  }

  return status;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af04      	add	r7, sp, #16
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4613      	mov	r3, r2
 8009314:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009316:	79f9      	ldrb	r1, [r7, #7]
 8009318:	2300      	movs	r3, #0
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	2308      	movs	r3, #8
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	2300      	movs	r3, #0
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	2200      	movs	r2, #0
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fb46 	bl	80099be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af04      	add	r7, sp, #16
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4611      	mov	r1, r2
 8009348:	461a      	mov	r2, r3
 800934a:	460b      	mov	r3, r1
 800934c:	80fb      	strh	r3, [r7, #6]
 800934e:	4613      	mov	r3, r2
 8009350:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009360:	7979      	ldrb	r1, [r7, #5]
 8009362:	7e3b      	ldrb	r3, [r7, #24]
 8009364:	9303      	str	r3, [sp, #12]
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	9302      	str	r3, [sp, #8]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	2301      	movs	r3, #1
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	2300      	movs	r3, #0
 8009374:	2200      	movs	r2, #0
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 fb21 	bl	80099be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b088      	sub	sp, #32
 800938a:	af04      	add	r7, sp, #16
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	4611      	mov	r1, r2
 8009392:	461a      	mov	r2, r3
 8009394:	460b      	mov	r3, r1
 8009396:	80fb      	strh	r3, [r7, #6]
 8009398:	4613      	mov	r3, r2
 800939a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800939c:	7979      	ldrb	r1, [r7, #5]
 800939e:	2300      	movs	r3, #0
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	2301      	movs	r3, #1
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	2300      	movs	r3, #0
 80093b0:	2201      	movs	r2, #1
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 fb03 	bl	80099be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80093b8:	2300      	movs	r3, #0

}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b088      	sub	sp, #32
 80093c6:	af04      	add	r7, sp, #16
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	4611      	mov	r1, r2
 80093ce:	461a      	mov	r2, r3
 80093d0:	460b      	mov	r3, r1
 80093d2:	80fb      	strh	r3, [r7, #6]
 80093d4:	4613      	mov	r3, r2
 80093d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80093e6:	7979      	ldrb	r1, [r7, #5]
 80093e8:	7e3b      	ldrb	r3, [r7, #24]
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	9302      	str	r3, [sp, #8]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	2301      	movs	r3, #1
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	2302      	movs	r3, #2
 80093fa:	2200      	movs	r2, #0
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 fade 	bl	80099be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af04      	add	r7, sp, #16
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4611      	mov	r1, r2
 8009418:	461a      	mov	r2, r3
 800941a:	460b      	mov	r3, r1
 800941c:	80fb      	strh	r3, [r7, #6]
 800941e:	4613      	mov	r3, r2
 8009420:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009422:	7979      	ldrb	r1, [r7, #5]
 8009424:	2300      	movs	r3, #0
 8009426:	9303      	str	r3, [sp, #12]
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	9302      	str	r3, [sp, #8]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	2301      	movs	r3, #1
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	2302      	movs	r3, #2
 8009436:	2201      	movs	r2, #1
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fac0 	bl	80099be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af04      	add	r7, sp, #16
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	461a      	mov	r2, r3
 8009456:	4603      	mov	r3, r0
 8009458:	70fb      	strb	r3, [r7, #3]
 800945a:	460b      	mov	r3, r1
 800945c:	70bb      	strb	r3, [r7, #2]
 800945e:	4613      	mov	r3, r2
 8009460:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009462:	7878      	ldrb	r0, [r7, #1]
 8009464:	78ba      	ldrb	r2, [r7, #2]
 8009466:	78f9      	ldrb	r1, [r7, #3]
 8009468:	8b3b      	ldrh	r3, [r7, #24]
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	7d3b      	ldrb	r3, [r7, #20]
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	7c3b      	ldrb	r3, [r7, #16]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	4603      	mov	r3, r0
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa53 	bl	8009922 <USBH_LL_OpenPipe>

  return USBH_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa72 	bl	8009980 <USBH_LL_ClosePipe>

  return USBH_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f837 	bl	8009526 <USBH_GetFreePipe>
 80094b8:	4603      	mov	r3, r0
 80094ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094bc:	89fb      	ldrh	r3, [r7, #14]
 80094be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00a      	beq.n	80094dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80094c6:	89fb      	ldrh	r3, [r7, #14]
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	33e0      	adds	r3, #224	; 0xe0
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094dc:	89fb      	ldrh	r3, [r7, #14]
 80094de:	b2db      	uxtb	r3, r3
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	2b0a      	cmp	r3, #10
 80094f8:	d80e      	bhi.n	8009518 <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80094fa:	78f8      	ldrb	r0, [r7, #3]
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	33e0      	adds	r3, #224	; 0xe0
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
 8009536:	e00f      	b.n	8009558 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	33e0      	adds	r3, #224	; 0xe0
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	b29b      	uxth	r3, r3
 8009550:	e007      	b.n	8009562 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	3301      	adds	r3, #1
 8009556:	73fb      	strb	r3, [r7, #15]
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b0a      	cmp	r3, #10
 800955c:	d9ec      	bls.n	8009538 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800955e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
	...

08009570 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009574:	2201      	movs	r2, #1
 8009576:	490e      	ldr	r1, [pc, #56]	; (80095b0 <MX_USB_HOST_Init+0x40>)
 8009578:	480e      	ldr	r0, [pc, #56]	; (80095b4 <MX_USB_HOST_Init+0x44>)
 800957a:	f7fe fc9d 	bl	8007eb8 <USBH_Init>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009584:	f7f7 ff8e 	bl	80014a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009588:	490b      	ldr	r1, [pc, #44]	; (80095b8 <MX_USB_HOST_Init+0x48>)
 800958a:	480a      	ldr	r0, [pc, #40]	; (80095b4 <MX_USB_HOST_Init+0x44>)
 800958c:	f7fe fd22 	bl	8007fd4 <USBH_RegisterClass>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009596:	f7f7 ff85 	bl	80014a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800959a:	4806      	ldr	r0, [pc, #24]	; (80095b4 <MX_USB_HOST_Init+0x44>)
 800959c:	f7fe fda6 	bl	80080ec <USBH_Start>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80095a6:	f7f7 ff7d 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	080095d1 	.word	0x080095d1
 80095b4:	20000238 	.word	0x20000238
 80095b8:	2000000c 	.word	0x2000000c

080095bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80095c0:	4802      	ldr	r0, [pc, #8]	; (80095cc <MX_USB_HOST_Process+0x10>)
 80095c2:	f7fe fda3 	bl	800810c <USBH_Process>
}
 80095c6:	bf00      	nop
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000238 	.word	0x20000238

080095d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d819      	bhi.n	8009618 <USBH_UserProcess+0x48>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBH_UserProcess+0x1c>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009619 	.word	0x08009619
 80095f0:	08009609 	.word	0x08009609
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009611 	.word	0x08009611
 80095fc:	08009601 	.word	0x08009601
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009600:	4b09      	ldr	r3, [pc, #36]	; (8009628 <USBH_UserProcess+0x58>)
 8009602:	2203      	movs	r2, #3
 8009604:	701a      	strb	r2, [r3, #0]
  break;
 8009606:	e008      	b.n	800961a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009608:	4b07      	ldr	r3, [pc, #28]	; (8009628 <USBH_UserProcess+0x58>)
 800960a:	2202      	movs	r2, #2
 800960c:	701a      	strb	r2, [r3, #0]
  break;
 800960e:	e004      	b.n	800961a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <USBH_UserProcess+0x58>)
 8009612:	2201      	movs	r2, #1
 8009614:	701a      	strb	r2, [r3, #0]
  break;
 8009616:	e000      	b.n	800961a <USBH_UserProcess+0x4a>

  default:
  break;
 8009618:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	200000b4 	.word	0x200000b4

0800962c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08a      	sub	sp, #40	; 0x28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009634:	f107 0314 	add.w	r3, r7, #20
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	605a      	str	r2, [r3, #4]
 800963e:	609a      	str	r2, [r3, #8]
 8009640:	60da      	str	r2, [r3, #12]
 8009642:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800964c:	d147      	bne.n	80096de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800964e:	2300      	movs	r3, #0
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	4a25      	ldr	r2, [pc, #148]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	6313      	str	r3, [r2, #48]	; 0x30
 800965e:	4b22      	ldr	r3, [pc, #136]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	613b      	str	r3, [r7, #16]
 8009668:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800966a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800966e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009670:	2300      	movs	r3, #0
 8009672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009678:	f107 0314 	add.w	r3, r7, #20
 800967c:	4619      	mov	r1, r3
 800967e:	481b      	ldr	r0, [pc, #108]	; (80096ec <HAL_HCD_MspInit+0xc0>)
 8009680:	f7f8 fb6e 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009684:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800968a:	2302      	movs	r3, #2
 800968c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009692:	2300      	movs	r3, #0
 8009694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009696:	230a      	movs	r3, #10
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800969a:	f107 0314 	add.w	r3, r7, #20
 800969e:	4619      	mov	r1, r3
 80096a0:	4812      	ldr	r0, [pc, #72]	; (80096ec <HAL_HCD_MspInit+0xc0>)
 80096a2:	f7f8 fb5d 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096a6:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	6353      	str	r3, [r2, #52]	; 0x34
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	4a0c      	ldr	r2, [pc, #48]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 80096ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096c0:	6453      	str	r3, [r2, #68]	; 0x44
 80096c2:	4b09      	ldr	r3, [pc, #36]	; (80096e8 <HAL_HCD_MspInit+0xbc>)
 80096c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	2043      	movs	r0, #67	; 0x43
 80096d4:	f7f8 fb0d 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096d8:	2043      	movs	r0, #67	; 0x43
 80096da:	f7f8 fb26 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096de:	bf00      	nop
 80096e0:	3728      	adds	r7, #40	; 0x28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	40023800 	.word	0x40023800
 80096ec:	40020000 	.word	0x40020000

080096f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff f8d7 	bl	80088b2 <USBH_LL_IncTimer>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff f90f 	bl	800893e <USBH_LL_Connect>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff f918 	bl	800896c <USBH_LL_Disconnect>
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
 8009750:	4613      	mov	r3, r2
 8009752:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff f8c9 	bl	8008906 <USBH_LL_PortEnabled>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff f8c9 	bl	8008922 <USBH_LL_PortDisabled>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d12a      	bne.n	8009800 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80097aa:	4a18      	ldr	r2, [pc, #96]	; (800980c <USBH_LL_Init+0x74>)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a15      	ldr	r2, [pc, #84]	; (800980c <USBH_LL_Init+0x74>)
 80097b6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097ba:	4b14      	ldr	r3, [pc, #80]	; (800980c <USBH_LL_Init+0x74>)
 80097bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <USBH_LL_Init+0x74>)
 80097c4:	2208      	movs	r2, #8
 80097c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80097c8:	4b10      	ldr	r3, [pc, #64]	; (800980c <USBH_LL_Init+0x74>)
 80097ca:	2201      	movs	r2, #1
 80097cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097ce:	4b0f      	ldr	r3, [pc, #60]	; (800980c <USBH_LL_Init+0x74>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80097d4:	4b0d      	ldr	r3, [pc, #52]	; (800980c <USBH_LL_Init+0x74>)
 80097d6:	2202      	movs	r2, #2
 80097d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097da:	4b0c      	ldr	r3, [pc, #48]	; (800980c <USBH_LL_Init+0x74>)
 80097dc:	2200      	movs	r2, #0
 80097de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80097e0:	480a      	ldr	r0, [pc, #40]	; (800980c <USBH_LL_Init+0x74>)
 80097e2:	f7f8 fc70 	bl	80020c6 <HAL_HCD_Init>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80097ec:	f7f7 fe5a 	bl	80014a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80097f0:	4806      	ldr	r0, [pc, #24]	; (800980c <USBH_LL_Init+0x74>)
 80097f2:	f7f9 f873 	bl	80028dc <HAL_HCD_GetCurrentFrame>
 80097f6:	4603      	mov	r3, r0
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff f84a 	bl	8008894 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000610 	.word	0x20000610

08009810 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009826:	4618      	mov	r0, r3
 8009828:	f7f8 ffe0 	bl	80027ec <HAL_HCD_Start>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	4618      	mov	r0, r3
 8009834:	f000 f95c 	bl	8009af0 <USBH_Get_USB_Status>
 8009838:	4603      	mov	r3, r0
 800983a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800983c:	7bbb      	ldrb	r3, [r7, #14]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800985c:	4618      	mov	r0, r3
 800985e:	f7f8 ffe8 	bl	8002832 <HAL_HCD_Stop>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	4618      	mov	r0, r3
 800986a:	f000 f941 	bl	8009af0 <USBH_Get_USB_Status>
 800986e:	4603      	mov	r3, r0
 8009870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009872:	7bbb      	ldrb	r3, [r7, #14]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009884:	2301      	movs	r3, #1
 8009886:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800988e:	4618      	mov	r0, r3
 8009890:	f7f9 f832 	bl	80028f8 <HAL_HCD_GetCurrentSpeed>
 8009894:	4603      	mov	r3, r0
 8009896:	2b01      	cmp	r3, #1
 8009898:	d007      	beq.n	80098aa <USBH_LL_GetSpeed+0x2e>
 800989a:	2b01      	cmp	r3, #1
 800989c:	d302      	bcc.n	80098a4 <USBH_LL_GetSpeed+0x28>
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d006      	beq.n	80098b0 <USBH_LL_GetSpeed+0x34>
 80098a2:	e008      	b.n	80098b6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
    break;
 80098a8:	e008      	b.n	80098bc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80098aa:	2301      	movs	r3, #1
 80098ac:	73fb      	strb	r3, [r7, #15]
    break;
 80098ae:	e005      	b.n	80098bc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80098b0:	2302      	movs	r3, #2
 80098b2:	73fb      	strb	r3, [r7, #15]
    break;
 80098b4:	e002      	b.n	80098bc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80098b6:	2301      	movs	r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]
    break;
 80098ba:	bf00      	nop
  }
  return  speed;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f8 ffc5 	bl	800286c <HAL_HCD_ResetPort>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 f901 	bl	8009af0 <USBH_Get_USB_Status>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f7f8 ffcd 	bl	80028b2 <HAL_HCD_HC_GetXferCount>
 8009918:	4603      	mov	r3, r0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009922:	b590      	push	{r4, r7, lr}
 8009924:	b089      	sub	sp, #36	; 0x24
 8009926:	af04      	add	r7, sp, #16
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	4608      	mov	r0, r1
 800992c:	4611      	mov	r1, r2
 800992e:	461a      	mov	r2, r3
 8009930:	4603      	mov	r3, r0
 8009932:	70fb      	strb	r3, [r7, #3]
 8009934:	460b      	mov	r3, r1
 8009936:	70bb      	strb	r3, [r7, #2]
 8009938:	4613      	mov	r3, r2
 800993a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800994a:	787c      	ldrb	r4, [r7, #1]
 800994c:	78ba      	ldrb	r2, [r7, #2]
 800994e:	78f9      	ldrb	r1, [r7, #3]
 8009950:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	4623      	mov	r3, r4
 8009962:	f7f8 fc12 	bl	800218a <HAL_HCD_HC_Init>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f8bf 	bl	8009af0 <USBH_Get_USB_Status>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009976:	7bbb      	ldrb	r3, [r7, #14]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	bd90      	pop	{r4, r7, pc}

08009980 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7f8 fc8b 	bl	80022ba <HAL_HCD_HC_Halt>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f8a0 	bl	8009af0 <USBH_Get_USB_Status>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099be:	b590      	push	{r4, r7, lr}
 80099c0:	b089      	sub	sp, #36	; 0x24
 80099c2:	af04      	add	r7, sp, #16
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	461a      	mov	r2, r3
 80099cc:	4603      	mov	r3, r0
 80099ce:	70fb      	strb	r3, [r7, #3]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70bb      	strb	r3, [r7, #2]
 80099d4:	4613      	mov	r3, r2
 80099d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80099e6:	787c      	ldrb	r4, [r7, #1]
 80099e8:	78ba      	ldrb	r2, [r7, #2]
 80099ea:	78f9      	ldrb	r1, [r7, #3]
 80099ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099f0:	9303      	str	r3, [sp, #12]
 80099f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	4623      	mov	r3, r4
 8009a02:	f7f8 fc7d 	bl	8002300 <HAL_HCD_HC_SubmitRequest>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f86f 	bl	8009af0 <USBH_Get_USB_Status>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd90      	pop	{r4, r7, pc}

08009a20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a32:	78fa      	ldrb	r2, [r7, #3]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f8 ff26 	bl	8002888 <HAL_HCD_HC_GetURBState>
 8009a3c:	4603      	mov	r3, r0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d103      	bne.n	8009a64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 f872 	bl	8009b48 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a64:	20c8      	movs	r0, #200	; 0xc8
 8009a66:	f7f8 f849 	bl	8001afc <HAL_Delay>
  return USBH_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
 8009a80:	4613      	mov	r3, r2
 8009a82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a8c:	78fa      	ldrb	r2, [r7, #3]
 8009a8e:	68f9      	ldr	r1, [r7, #12]
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	440b      	add	r3, r1
 8009a9a:	333b      	adds	r3, #59	; 0x3b
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009aa2:	78fa      	ldrb	r2, [r7, #3]
 8009aa4:	68f9      	ldr	r1, [r7, #12]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	440b      	add	r3, r1
 8009ab0:	3350      	adds	r3, #80	; 0x50
 8009ab2:	78ba      	ldrb	r2, [r7, #2]
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e009      	b.n	8009acc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	440b      	add	r3, r1
 8009ac6:	3351      	adds	r3, #81	; 0x51
 8009ac8:	78ba      	ldrb	r2, [r7, #2]
 8009aca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7f8 f80a 	bl	8001afc <HAL_Delay>
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d817      	bhi.n	8009b34 <USBH_Get_USB_Status+0x44>
 8009b04:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <USBH_Get_USB_Status+0x1c>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b1d 	.word	0x08009b1d
 8009b10:	08009b23 	.word	0x08009b23
 8009b14:	08009b29 	.word	0x08009b29
 8009b18:	08009b2f 	.word	0x08009b2f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b20:	e00b      	b.n	8009b3a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	73fb      	strb	r3, [r7, #15]
    break;
 8009b26:	e008      	b.n	8009b3a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2c:	e005      	b.n	8009b3a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	73fb      	strb	r3, [r7, #15]
    break;
 8009b32:	e002      	b.n	8009b3a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b34:	2302      	movs	r3, #2
 8009b36:	73fb      	strb	r3, [r7, #15]
    break;
 8009b38:	bf00      	nop
  }
  return usb_status;
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	73fb      	strb	r3, [r7, #15]
 8009b60:	e001      	b.n	8009b66 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	4803      	ldr	r0, [pc, #12]	; (8009b7c <MX_DriverVbusFS+0x34>)
 8009b6e:	f7f8 fa91 	bl	8002094 <HAL_GPIO_WritePin>
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40020800 	.word	0x40020800

08009b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b86:	e003      	b.n	8009b90 <LoopCopyDataInit>

08009b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b8e:	3104      	adds	r1, #4

08009b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b90:	480b      	ldr	r0, [pc, #44]	; (8009bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b98:	d3f6      	bcc.n	8009b88 <CopyDataInit>
  ldr  r2, =_sbss
 8009b9a:	4a0b      	ldr	r2, [pc, #44]	; (8009bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b9c:	e002      	b.n	8009ba4 <LoopFillZerobss>

08009b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ba0:	f842 3b04 	str.w	r3, [r2], #4

08009ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009ba8:	d3f9      	bcc.n	8009b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009baa:	f7f7 fd8d 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009bae:	f000 f817 	bl	8009be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009bb2:	f7f7 f95f 	bl	8000e74 <main>
  bx  lr    
 8009bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009bb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009bbc:	08009e18 	.word	0x08009e18
  ldr  r0, =_sdata
 8009bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009bc4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8009bc8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8009bcc:	200008d8 	.word	0x200008d8

08009bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009bd0:	e7fe      	b.n	8009bd0 <ADC_IRQHandler>
	...

08009bd4 <__errno>:
 8009bd4:	4b01      	ldr	r3, [pc, #4]	; (8009bdc <__errno+0x8>)
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	2000002c 	.word	0x2000002c

08009be0 <__libc_init_array>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4e0d      	ldr	r6, [pc, #52]	; (8009c18 <__libc_init_array+0x38>)
 8009be4:	4c0d      	ldr	r4, [pc, #52]	; (8009c1c <__libc_init_array+0x3c>)
 8009be6:	1ba4      	subs	r4, r4, r6
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	2500      	movs	r5, #0
 8009bec:	42a5      	cmp	r5, r4
 8009bee:	d109      	bne.n	8009c04 <__libc_init_array+0x24>
 8009bf0:	4e0b      	ldr	r6, [pc, #44]	; (8009c20 <__libc_init_array+0x40>)
 8009bf2:	4c0c      	ldr	r4, [pc, #48]	; (8009c24 <__libc_init_array+0x44>)
 8009bf4:	f000 f8ee 	bl	8009dd4 <_init>
 8009bf8:	1ba4      	subs	r4, r4, r6
 8009bfa:	10a4      	asrs	r4, r4, #2
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	42a5      	cmp	r5, r4
 8009c00:	d105      	bne.n	8009c0e <__libc_init_array+0x2e>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c08:	4798      	blx	r3
 8009c0a:	3501      	adds	r5, #1
 8009c0c:	e7ee      	b.n	8009bec <__libc_init_array+0xc>
 8009c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c12:	4798      	blx	r3
 8009c14:	3501      	adds	r5, #1
 8009c16:	e7f2      	b.n	8009bfe <__libc_init_array+0x1e>
 8009c18:	08009e10 	.word	0x08009e10
 8009c1c:	08009e10 	.word	0x08009e10
 8009c20:	08009e10 	.word	0x08009e10
 8009c24:	08009e14 	.word	0x08009e14

08009c28 <malloc>:
 8009c28:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <malloc+0xc>)
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	f000 b861 	b.w	8009cf4 <_malloc_r>
 8009c32:	bf00      	nop
 8009c34:	2000002c 	.word	0x2000002c

08009c38 <free>:
 8009c38:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <free+0xc>)
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	f000 b80b 	b.w	8009c58 <_free_r>
 8009c42:	bf00      	nop
 8009c44:	2000002c 	.word	0x2000002c

08009c48 <memset>:
 8009c48:	4402      	add	r2, r0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d100      	bne.n	8009c52 <memset+0xa>
 8009c50:	4770      	bx	lr
 8009c52:	f803 1b01 	strb.w	r1, [r3], #1
 8009c56:	e7f9      	b.n	8009c4c <memset+0x4>

08009c58 <_free_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	d045      	beq.n	8009cec <_free_r+0x94>
 8009c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c64:	1f0c      	subs	r4, r1, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfb8      	it	lt
 8009c6a:	18e4      	addlt	r4, r4, r3
 8009c6c:	f000 f8b0 	bl	8009dd0 <__malloc_lock>
 8009c70:	4a1f      	ldr	r2, [pc, #124]	; (8009cf0 <_free_r+0x98>)
 8009c72:	6813      	ldr	r3, [r2, #0]
 8009c74:	4610      	mov	r0, r2
 8009c76:	b933      	cbnz	r3, 8009c86 <_free_r+0x2e>
 8009c78:	6063      	str	r3, [r4, #4]
 8009c7a:	6014      	str	r4, [r2, #0]
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c82:	f000 b8a6 	b.w	8009dd2 <__malloc_unlock>
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	d90c      	bls.n	8009ca4 <_free_r+0x4c>
 8009c8a:	6821      	ldr	r1, [r4, #0]
 8009c8c:	1862      	adds	r2, r4, r1
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	bf04      	itt	eq
 8009c92:	681a      	ldreq	r2, [r3, #0]
 8009c94:	685b      	ldreq	r3, [r3, #4]
 8009c96:	6063      	str	r3, [r4, #4]
 8009c98:	bf04      	itt	eq
 8009c9a:	1852      	addeq	r2, r2, r1
 8009c9c:	6022      	streq	r2, [r4, #0]
 8009c9e:	6004      	str	r4, [r0, #0]
 8009ca0:	e7ec      	b.n	8009c7c <_free_r+0x24>
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	b10a      	cbz	r2, 8009cac <_free_r+0x54>
 8009ca8:	42a2      	cmp	r2, r4
 8009caa:	d9fa      	bls.n	8009ca2 <_free_r+0x4a>
 8009cac:	6819      	ldr	r1, [r3, #0]
 8009cae:	1858      	adds	r0, r3, r1
 8009cb0:	42a0      	cmp	r0, r4
 8009cb2:	d10b      	bne.n	8009ccc <_free_r+0x74>
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	4401      	add	r1, r0
 8009cb8:	1858      	adds	r0, r3, r1
 8009cba:	4282      	cmp	r2, r0
 8009cbc:	6019      	str	r1, [r3, #0]
 8009cbe:	d1dd      	bne.n	8009c7c <_free_r+0x24>
 8009cc0:	6810      	ldr	r0, [r2, #0]
 8009cc2:	6852      	ldr	r2, [r2, #4]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	4401      	add	r1, r0
 8009cc8:	6019      	str	r1, [r3, #0]
 8009cca:	e7d7      	b.n	8009c7c <_free_r+0x24>
 8009ccc:	d902      	bls.n	8009cd4 <_free_r+0x7c>
 8009cce:	230c      	movs	r3, #12
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	e7d3      	b.n	8009c7c <_free_r+0x24>
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	1821      	adds	r1, r4, r0
 8009cd8:	428a      	cmp	r2, r1
 8009cda:	bf04      	itt	eq
 8009cdc:	6811      	ldreq	r1, [r2, #0]
 8009cde:	6852      	ldreq	r2, [r2, #4]
 8009ce0:	6062      	str	r2, [r4, #4]
 8009ce2:	bf04      	itt	eq
 8009ce4:	1809      	addeq	r1, r1, r0
 8009ce6:	6021      	streq	r1, [r4, #0]
 8009ce8:	605c      	str	r4, [r3, #4]
 8009cea:	e7c7      	b.n	8009c7c <_free_r+0x24>
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	200000b8 	.word	0x200000b8

08009cf4 <_malloc_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	1ccd      	adds	r5, r1, #3
 8009cf8:	f025 0503 	bic.w	r5, r5, #3
 8009cfc:	3508      	adds	r5, #8
 8009cfe:	2d0c      	cmp	r5, #12
 8009d00:	bf38      	it	cc
 8009d02:	250c      	movcc	r5, #12
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	4606      	mov	r6, r0
 8009d08:	db01      	blt.n	8009d0e <_malloc_r+0x1a>
 8009d0a:	42a9      	cmp	r1, r5
 8009d0c:	d903      	bls.n	8009d16 <_malloc_r+0x22>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	6033      	str	r3, [r6, #0]
 8009d12:	2000      	movs	r0, #0
 8009d14:	bd70      	pop	{r4, r5, r6, pc}
 8009d16:	f000 f85b 	bl	8009dd0 <__malloc_lock>
 8009d1a:	4a23      	ldr	r2, [pc, #140]	; (8009da8 <_malloc_r+0xb4>)
 8009d1c:	6814      	ldr	r4, [r2, #0]
 8009d1e:	4621      	mov	r1, r4
 8009d20:	b991      	cbnz	r1, 8009d48 <_malloc_r+0x54>
 8009d22:	4c22      	ldr	r4, [pc, #136]	; (8009dac <_malloc_r+0xb8>)
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	b91b      	cbnz	r3, 8009d30 <_malloc_r+0x3c>
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f000 f841 	bl	8009db0 <_sbrk_r>
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	4629      	mov	r1, r5
 8009d32:	4630      	mov	r0, r6
 8009d34:	f000 f83c 	bl	8009db0 <_sbrk_r>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d126      	bne.n	8009d8a <_malloc_r+0x96>
 8009d3c:	230c      	movs	r3, #12
 8009d3e:	6033      	str	r3, [r6, #0]
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 f846 	bl	8009dd2 <__malloc_unlock>
 8009d46:	e7e4      	b.n	8009d12 <_malloc_r+0x1e>
 8009d48:	680b      	ldr	r3, [r1, #0]
 8009d4a:	1b5b      	subs	r3, r3, r5
 8009d4c:	d41a      	bmi.n	8009d84 <_malloc_r+0x90>
 8009d4e:	2b0b      	cmp	r3, #11
 8009d50:	d90f      	bls.n	8009d72 <_malloc_r+0x7e>
 8009d52:	600b      	str	r3, [r1, #0]
 8009d54:	50cd      	str	r5, [r1, r3]
 8009d56:	18cc      	adds	r4, r1, r3
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f000 f83a 	bl	8009dd2 <__malloc_unlock>
 8009d5e:	f104 000b 	add.w	r0, r4, #11
 8009d62:	1d23      	adds	r3, r4, #4
 8009d64:	f020 0007 	bic.w	r0, r0, #7
 8009d68:	1ac3      	subs	r3, r0, r3
 8009d6a:	d01b      	beq.n	8009da4 <_malloc_r+0xb0>
 8009d6c:	425a      	negs	r2, r3
 8009d6e:	50e2      	str	r2, [r4, r3]
 8009d70:	bd70      	pop	{r4, r5, r6, pc}
 8009d72:	428c      	cmp	r4, r1
 8009d74:	bf0d      	iteet	eq
 8009d76:	6863      	ldreq	r3, [r4, #4]
 8009d78:	684b      	ldrne	r3, [r1, #4]
 8009d7a:	6063      	strne	r3, [r4, #4]
 8009d7c:	6013      	streq	r3, [r2, #0]
 8009d7e:	bf18      	it	ne
 8009d80:	460c      	movne	r4, r1
 8009d82:	e7e9      	b.n	8009d58 <_malloc_r+0x64>
 8009d84:	460c      	mov	r4, r1
 8009d86:	6849      	ldr	r1, [r1, #4]
 8009d88:	e7ca      	b.n	8009d20 <_malloc_r+0x2c>
 8009d8a:	1cc4      	adds	r4, r0, #3
 8009d8c:	f024 0403 	bic.w	r4, r4, #3
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d005      	beq.n	8009da0 <_malloc_r+0xac>
 8009d94:	1a21      	subs	r1, r4, r0
 8009d96:	4630      	mov	r0, r6
 8009d98:	f000 f80a 	bl	8009db0 <_sbrk_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d0cd      	beq.n	8009d3c <_malloc_r+0x48>
 8009da0:	6025      	str	r5, [r4, #0]
 8009da2:	e7d9      	b.n	8009d58 <_malloc_r+0x64>
 8009da4:	bd70      	pop	{r4, r5, r6, pc}
 8009da6:	bf00      	nop
 8009da8:	200000b8 	.word	0x200000b8
 8009dac:	200000bc 	.word	0x200000bc

08009db0 <_sbrk_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4c06      	ldr	r4, [pc, #24]	; (8009dcc <_sbrk_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4605      	mov	r5, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	f7f7 fc58 	bl	8001670 <_sbrk>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_sbrk_r+0x1a>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_sbrk_r+0x1a>
 8009dc8:	602b      	str	r3, [r5, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	200008d4 	.word	0x200008d4

08009dd0 <__malloc_lock>:
 8009dd0:	4770      	bx	lr

08009dd2 <__malloc_unlock>:
 8009dd2:	4770      	bx	lr

08009dd4 <_init>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr

08009de0 <_fini>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	bf00      	nop
 8009de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de6:	bc08      	pop	{r3}
 8009de8:	469e      	mov	lr, r3
 8009dea:	4770      	bx	lr
